#!/usr/bin/env python3
"""
–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:
- –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö
- –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞
- –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import time
import psutil
import threading
import asyncio
import random
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, asdict
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
import logging
import json
import tempfile
import shutil
from contextlib import contextmanager
import tracemalloc
import gc
from unittest.mock import Mock, patch
import queue
import multiprocessing

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from inventory_sync_service_optimized import OptimizedInventorySyncService, InventoryRecord, SyncResult, SyncStatus
    from parallel_sync_manager import ParallelSyncManager, SyncPriority
    from api_request_optimizer import APIRequestOptimizer
    from load_test_inventory_sync import MockDataGenerator, ResourceMonitor
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@dataclass
class StressTestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—Ä—É–∑–∫–∏
    max_dataset_size: int = 1000000  # 1 –º–∏–ª–ª–∏–æ–Ω –∑–∞–ø–∏—Å–µ–π
    concurrent_processes: int = 8
    test_duration_minutes: int = 60
    memory_pressure_mb: int = 4096  # 4 –ì–ë
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    error_injection_rate: float = 0.05  # 5% –æ—à–∏–±–æ–∫
    network_failure_rate: float = 0.02  # 2% —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ–µ–≤
    memory_leak_simulation: bool = True
    
    # –ü–æ—Ä–æ–≥–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
    max_memory_mb: int = 8192  # 8 –ì–ë
    max_cpu_percent: float = 95.0
    max_response_time_seconds: int = 600  # 10 –º–∏–Ω—É—Ç
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    retry_attempts: int = 5
    recovery_timeout_seconds: int = 300


@dataclass
class StressTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    test_name: str
    start_time: datetime
    end_time: Optional[datetime] = None
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    total_operations: int = 0
    successful_operations: int = 0
    failed_operations: int = 0
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    peak_memory_mb: float = 0.0
    avg_cpu_percent: float = 0.0
    peak_cpu_percent: float = 0.0
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    crashes: int = 0
    recoveries: int = 0
    memory_leaks_detected: int = 0
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    data_corruption_incidents: int = 0
    timeout_incidents: int = 0
    
    @property
    def duration_minutes(self) -> float:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö."""
        if self.end_time:
            return (self.end_time - self.start_time).total_seconds() / 60
        return 0.0
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        if self.total_operations > 0:
            return self.successful_operations / self.total_operations
        return 0.0
    
    @property
    def operations_per_minute(self) -> float:
        """–û–ø–µ—Ä–∞—Ü–∏–π –≤ –º–∏–Ω—É—Ç—É."""
        if self.duration_minutes > 0:
            return self.total_operations / self.duration_minutes
        return 0.0


class ErrorInjector:
    """–ò–Ω–∂–µ–∫—Ç–æ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, error_rate: float = 0.05, network_failure_rate: float = 0.02):
        self.error_rate = error_rate
        self.network_failure_rate = network_failure_rate
        self.injected_errors = 0
        self.network_failures = 0
    
    def should_inject_error(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∂–µ–∫—Ü–∏–∏ –æ—à–∏–±–∫–∏."""
        return random.random() < self.error_rate
    
    def should_inject_network_failure(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∂–µ–∫—Ü–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–±–æ—è."""
        return random.random() < self.network_failure_rate
    
    def inject_processing_error(self):
        """–ò–Ω–∂–µ–∫—Ü–∏—è –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        self.injected_errors += 1
        error_types = [
            "Simulated processing error",
            "Simulated validation error", 
            "Simulated timeout error",
            "Simulated memory error"
        ]
        raise Exception(random.choice(error_types))
    
    def inject_network_failure(self):
        """–ò–Ω–∂–µ–∫—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–±–æ—è."""
        self.network_failures += 1
        failure_types = [
            "Connection timeout",
            "Network unreachable",
            "DNS resolution failed",
            "SSL handshake failed"
        ]
        raise ConnectionError(random.choice(failure_types))


class MemoryLeakSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏."""
    
    def __init__(self):
        self.leaked_objects = []
        self.leak_size_mb = 0
    
    def create_memory_leak(self, size_mb: float = 1.0):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏."""
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
        leak_data = bytearray(int(size_mb * 1024 * 1024))
        self.leaked_objects.append(leak_data)
        self.leak_size_mb += size_mb
        logger.debug(f"üíß –°–æ–∑–¥–∞–Ω–∞ —É—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏: {size_mb} –ú–ë (–≤—Å–µ–≥–æ: {self.leak_size_mb} –ú–ë)")
    
    def cleanup_leaks(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏."""
        self.leaked_objects.clear()
        leaked_mb = self.leak_size_mb
        self.leak_size_mb = 0
        logger.info(f"üßπ –û—á–∏—â–µ–Ω—ã —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏: {leaked_mb} –ú–ë")


class StressTester:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, config: StressTestConfig):
        self.config = config
        self.error_injector = ErrorInjector(
            config.error_injection_rate,
            config.network_failure_rate
        )
        self.memory_leak_simulator = MemoryLeakSimulator()
        self.temp_dir = tempfile.mkdtemp()
        self.stop_flag = threading.Event()
        self.results: List[StressTestResult] = []
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤."""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç—ã...")
        self.stop_flag.set()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        self.memory_leak_simulator.cleanup_leaks()
        if os.path.exists(self.temp_dir):
            shutil.rmtree(self.temp_dir)
    
    def stress_test_high_volume_processing(self) -> StressTestResult:
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤")
        
        result = StressTestResult(
            test_name="high_volume_processing",
            start_time=datetime.now()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        monitor = ResourceMonitor(interval_seconds=1.0)
        monitor.start()
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {self.config.max_dataset_size} –∑–∞–ø–∏—Å–µ–π...")
            test_data = MockDataGenerator.generate_ozon_inventory_data(self.config.max_dataset_size)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            service = OptimizedInventorySyncService(
                batch_size=5000,
                max_workers=self.config.concurrent_processes
            )
            service.product_cache.get_product_id_by_ozon_sku = lambda x: random.randint(1, 1000)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω–∂–µ–∫—Ü–∏–µ–π –æ—à–∏–±–æ–∫
            processed_count = 0
            failed_count = 0
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            chunk_size = 10000
            chunks = [test_data[i:i + chunk_size] for i in range(0, len(test_data), chunk_size)]
            
            for i, chunk in enumerate(chunks):
                if self.stop_flag.is_set():
                    break
                
                try:
                    # –ò–Ω–∂–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫
                    if self.error_injector.should_inject_error():
                        self.error_injector.inject_processing_error()
                    
                    # –°–∏–º—É–ª—è—Ü–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
                    if self.config.memory_leak_simulation and random.random() < 0.1:
                        self.memory_leak_simulator.create_memory_leak(0.5)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞
                    processed_records = service.process_inventory_batch(chunk, 'Ozon')
                    processed_count += len(processed_records)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if (i + 1) % 10 == 0:
                        logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {i + 1}/{len(chunks)}, –∑–∞–ø–∏—Å–µ–π: {processed_count}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {i}: {e}")
                    failed_count += len(chunk)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞–º—è—Ç–∏
                if i % 5 == 0:
                    gc.collect()
            
            result.total_operations = len(test_data)
            result.successful_operations = processed_count
            result.failed_operations = failed_count
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞: {e}")
            result.crashes += 1
        finally:
            monitor.stop()
            resource_summary = monitor.get_summary()
            
            result.end_time = datetime.now()
            result.peak_memory_mb = resource_summary.get('peak_memory_mb', 0)
            result.avg_cpu_percent = resource_summary.get('avg_cpu_percent', 0)
            result.peak_cpu_percent = resource_summary.get('peak_cpu_percent', 0)
        
        logger.info(f"‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: "
                   f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.successful_operations}/{result.total_operations} –∑–∞–ø–∏—Å–µ–π")
        
        return result
    
    def stress_test_concurrent_operations(self) -> StressTestResult:
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        result = StressTestResult(
            test_name="concurrent_operations",
            start_time=datetime.now()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        monitor = ResourceMonitor(interval_seconds=0.5)
        monitor.start()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            with ProcessPoolExecutor(max_workers=self.config.concurrent_processes) as executor:
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                def worker_function(worker_id: int) -> Dict[str, int]:
                    worker_result = {'processed': 0, 'failed': 0, 'errors': 0}
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
                        worker_data = MockDataGenerator.generate_ozon_inventory_data(10000)
                        
                        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
                        service = OptimizedInventorySyncService(batch_size=1000, max_workers=2)
                        service.product_cache.get_product_id_by_ozon_sku = lambda x: random.randint(1, 100)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω–∂–µ–∫—Ü–∏–µ–π –æ—à–∏–±–æ–∫
                        for i, item in enumerate(worker_data):
                            if i % 1000 == 0 and self.stop_flag.is_set():
                                break
                            
                            try:
                                # –°–ª—É—á–∞–π–Ω–∞—è –∏–Ω–∂–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫
                                if random.random() < self.config.error_injection_rate:
                                    raise Exception(f"Worker {worker_id} simulated error")
                                
                                # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                                time.sleep(0.001)  # 1–º—Å –Ω–∞ –∑–∞–ø–∏—Å—å
                                worker_result['processed'] += 1
                                
                            except Exception:
                                worker_result['failed'] += 1
                                worker_result['errors'] += 1
                        
                    except Exception as e:
                        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {worker_id}: {e}")
                        worker_result['errors'] += 1
                    
                    return worker_result
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
                futures = []
                for worker_id in range(self.config.concurrent_processes):
                    future = executor.submit(worker_function, worker_id)
                    futures.append(future)
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                total_processed = 0
                total_failed = 0
                total_errors = 0
                
                for future in as_completed(futures):
                    try:
                        worker_result = future.result(timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                        total_processed += worker_result['processed']
                        total_failed += worker_result['failed']
                        total_errors += worker_result['errors']
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
                        result.crashes += 1
                
                result.total_operations = total_processed + total_failed
                result.successful_operations = total_processed
                result.failed_operations = total_failed
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞: {e}")
            result.crashes += 1
        finally:
            monitor.stop()
            resource_summary = monitor.get_summary()
            
            result.end_time = datetime.now()
            result.peak_memory_mb = resource_summary.get('peak_memory_mb', 0)
            result.avg_cpu_percent = resource_summary.get('avg_cpu_percent', 0)
            result.peak_cpu_percent = resource_summary.get('peak_cpu_percent', 0)
        
        logger.info(f"‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: "
                   f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.successful_operations} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫ {result.failed_operations}")
        
        return result
    
    def stress_test_memory_pressure(self) -> StressTestResult:
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏")
        
        result = StressTestResult(
            test_name="memory_pressure",
            start_time=datetime.now()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        monitor = ResourceMonitor(interval_seconds=0.1)
        monitor.start()
        
        tracemalloc.start()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–º—è—Ç—å
            memory_hogs = []
            target_memory_mb = self.config.memory_pressure_mb
            
            logger.info(f"üìä –°–æ–∑–¥–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–º—è—Ç—å –¥–æ {target_memory_mb} –ú–ë...")
            
            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            current_memory_mb = 0
            while current_memory_mb < target_memory_mb and not self.stop_flag.is_set():
                # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –ø–∞–º—è—Ç–∏
                chunk_size_mb = min(100, target_memory_mb - current_memory_mb)
                memory_chunk = bytearray(int(chunk_size_mb * 1024 * 1024))
                memory_hogs.append(memory_chunk)
                current_memory_mb += chunk_size_mb
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
                try:
                    test_data = MockDataGenerator.generate_ozon_inventory_data(1000)
                    service = OptimizedInventorySyncService(batch_size=100, max_workers=2)
                    service.product_cache.get_product_id_by_ozon_sku = lambda x: 1
                    
                    processed_records = service.process_inventory_batch(test_data, 'Ozon')
                    result.successful_operations += len(processed_records)
                    
                    # –°–∏–º—É–ª—è—Ü–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
                    if self.config.memory_leak_simulation:
                        self.memory_leak_simulator.create_memory_leak(0.1)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏: {e}")
                    result.failed_operations += 1000
                
                result.total_operations += 1000
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                process = psutil.Process()
                memory_info = process.memory_info()
                current_memory_usage = memory_info.rss / 1024 / 1024
                
                if current_memory_usage > self.config.max_memory_mb:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {current_memory_usage:.1f} –ú–ë")
                    result.memory_leaks_detected += 1
                    break
                
                time.sleep(0.1)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            logger.info("üßπ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            del memory_hogs
            gc.collect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            recovery_start = time.time()
            test_data = MockDataGenerator.generate_ozon_inventory_data(5000)
            service = OptimizedInventorySyncService(batch_size=1000, max_workers=4)
            service.product_cache.get_product_id_by_ozon_sku = lambda x: 1
            
            processed_records = service.process_inventory_batch(test_data, 'Ozon')
            recovery_time = time.time() - recovery_start
            
            if recovery_time < 30:  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º
                result.recoveries += 1
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {recovery_time:.1f}—Å")
            else:
                logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recovery_time:.1f}—Å")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏: {e}")
            result.crashes += 1
        finally:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            current, peak = tracemalloc.get_traced_memory()
            tracemalloc.stop()
            
            monitor.stop()
            resource_summary = monitor.get_summary()
            
            result.end_time = datetime.now()
            result.peak_memory_mb = max(peak / 1024 / 1024, resource_summary.get('peak_memory_mb', 0))
            result.avg_cpu_percent = resource_summary.get('avg_cpu_percent', 0)
            result.peak_cpu_percent = resource_summary.get('peak_cpu_percent', 0)
        
        logger.info(f"‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: –ø–∏–∫ {result.peak_memory_mb:.1f} –ú–ë")
        
        return result
    
    def stress_test_long_running_stability(self) -> StressTestResult:
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã."""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ ({self.config.test_duration_minutes} –º–∏–Ω—É—Ç)")
        
        result = StressTestResult(
            test_name="long_running_stability",
            start_time=datetime.now()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        monitor = ResourceMonitor(interval_seconds=5.0)
        monitor.start()
        
        end_time = datetime.now() + timedelta(minutes=self.config.test_duration_minutes)
        
        try:
            iteration = 0
            while datetime.now() < end_time and not self.stop_flag.is_set():
                iteration += 1
                
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    dataset_size = random.randint(1000, 10000)
                    test_data = MockDataGenerator.generate_ozon_inventory_data(dataset_size)
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    batch_size = random.choice([100, 500, 1000, 2000])
                    workers = random.choice([1, 2, 4, 8])
                    
                    service = OptimizedInventorySyncService(
                        batch_size=batch_size,
                        max_workers=workers
                    )
                    service.product_cache.get_product_id_by_ozon_sku = lambda x: random.randint(1, 1000)
                    
                    # –ò–Ω–∂–µ–∫—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                    if self.error_injector.should_inject_network_failure():
                        self.error_injector.inject_network_failure()
                    
                    if self.error_injector.should_inject_error():
                        self.error_injector.inject_processing_error()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    processed_records = service.process_inventory_batch(test_data, 'Ozon')
                    result.successful_operations += len(processed_records)
                    
                    # –°–∏–º—É–ª—è—Ü–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
                    if self.config.memory_leak_simulation and iteration % 10 == 0:
                        self.memory_leak_simulator.create_memory_leak(0.1)
                    
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                    if iteration % 50 == 0:
                        gc.collect()
                        logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.successful_operations} –∑–∞–ø–∏—Å–µ–π")
                    
                except ConnectionError as e:
                    logger.warning(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
                    result.failed_operations += dataset_size
                    result.timeout_incidents += 1
                    
                    # –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    time.sleep(random.uniform(1, 5))
                    result.recoveries += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
                    result.failed_operations += dataset_size
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    if "memory" in str(e).lower():
                        result.memory_leaks_detected += 1
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    try:
                        time.sleep(1)
                        gc.collect()
                        result.recoveries += 1
                    except:
                        result.crashes += 1
                
                result.total_operations += dataset_size
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
                process = psutil.Process()
                memory_mb = process.memory_info().rss / 1024 / 1024
                cpu_percent = process.cpu_percent()
                
                if memory_mb > self.config.max_memory_mb:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏: {memory_mb:.1f} –ú–ë")
                    result.memory_leaks_detected += 1
                
                if cpu_percent > self.config.max_cpu_percent:
                    logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                time.sleep(random.uniform(0.1, 1.0))
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç...")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            result.crashes += 1
        finally:
            monitor.stop()
            resource_summary = monitor.get_summary()
            
            result.end_time = datetime.now()
            result.peak_memory_mb = resource_summary.get('peak_memory_mb', 0)
            result.avg_cpu_percent = resource_summary.get('avg_cpu_percent', 0)
            result.peak_cpu_percent = resource_summary.get('peak_cpu_percent', 0)
        
        logger.info(f"‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: "
                   f"{result.duration_minutes:.1f} –º–∏–Ω—É—Ç, "
                   f"—É—Å–ø–µ—à–Ω–æ—Å—Ç—å {result.success_rate:.2%}")
        
        return result
    
    def run_comprehensive_stress_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        start_time = datetime.now()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã
        stress_results = {}
        
        try:
            # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
            logger.info("=" * 60)
            logger.info("–°–¢–†–ï–°–°-–¢–ï–°–¢ –ë–û–õ–¨–®–ò–• –û–ë–™–ï–ú–û–í –î–ê–ù–ù–´–•")
            logger.info("=" * 60)
            stress_results['high_volume'] = self.stress_test_high_volume_processing()
            
            if self.stop_flag.is_set():
                return self._create_partial_report(stress_results, start_time)
            
            # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            logger.info("=" * 60)
            logger.info("–°–¢–†–ï–°–°-–¢–ï–°–¢ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –û–ü–ï–†–ê–¶–ò–ô")
            logger.info("=" * 60)
            stress_results['concurrent'] = self.stress_test_concurrent_operations()
            
            if self.stop_flag.is_set():
                return self._create_partial_report(stress_results, start_time)
            
            # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏
            logger.info("=" * 60)
            logger.info("–°–¢–†–ï–°–°-–¢–ï–°–¢ –î–ê–í–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–ò")
            logger.info("=" * 60)
            stress_results['memory_pressure'] = self.stress_test_memory_pressure()
            
            if self.stop_flag.is_set():
                return self._create_partial_report(stress_results, start_time)
            
            # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ)
            logger.info("=" * 60)
            logger.info("–°–¢–†–ï–°–°-–¢–ï–°–¢ –î–õ–ò–¢–ï–õ–¨–ù–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò")
            logger.info("=" * 60)
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            original_duration = self.config.test_duration_minutes
            self.config.test_duration_minutes = min(5, original_duration)  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            
            stress_results['stability'] = self.stress_test_long_running_stability()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            self.config.test_duration_minutes = original_duration
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        end_time = datetime.now()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis = self._analyze_stress_results(stress_results)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = {
            'stress_test_summary': {
                'start_time': start_time.isoformat(),
                'end_time': end_time.isoformat(),
                'total_duration_minutes': (end_time - start_time).total_seconds() / 60,
                'config': asdict(self.config),
                'interrupted': self.stop_flag.is_set()
            },
            'stress_results': {
                test_name: asdict(result) for test_name, result in stress_results.items()
            },
            'stability_analysis': analysis,
            'recommendations': self._generate_stress_recommendations(analysis)
        }
        
        logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return report
    
    def _create_partial_report(self, results: Dict[str, StressTestResult], start_time: datetime) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏."""
        return {
            'stress_test_summary': {
                'start_time': start_time.isoformat(),
                'end_time': datetime.now().isoformat(),
                'interrupted': True,
                'completed_tests': list(results.keys())
            },
            'stress_results': {
                test_name: asdict(result) for test_name, result in results.items()
            }
        }
    
    def _analyze_stress_results(self, results: Dict[str, StressTestResult]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        analysis = {
            'overall_stability': 'stable',
            'critical_issues': [],
            'performance_degradation': [],
            'resource_issues': [],
            'recovery_capability': 'good'
        }
        
        total_crashes = sum(result.crashes for result in results.values())
        total_operations = sum(result.total_operations for result in results.values())
        total_successful = sum(result.successful_operations for result in results.values())
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if total_crashes > 0:
            analysis['overall_stability'] = 'unstable'
            analysis['critical_issues'].append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_crashes} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        if total_operations > 0:
            success_rate = total_successful / total_operations
            if success_rate < 0.95:
                analysis['overall_stability'] = 'degraded'
                analysis['performance_degradation'].append(
                    f"–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π: {success_rate:.2%}"
                )
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        for test_name, result in results.items():
            if result.peak_memory_mb > self.config.max_memory_mb:
                analysis['resource_issues'].append(
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏ –≤ —Ç–µ—Å—Ç–µ {test_name}: {result.peak_memory_mb:.1f} –ú–ë"
                )
            
            if result.peak_cpu_percent > self.config.max_cpu_percent:
                analysis['resource_issues'].append(
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ CPU –≤ —Ç–µ—Å—Ç–µ {test_name}: {result.peak_cpu_percent:.1f}%"
                )
            
            if result.memory_leaks_detected > 0:
                analysis['critical_issues'].append(
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –≤ —Ç–µ—Å—Ç–µ {test_name}: {result.memory_leaks_detected}"
                )
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
        total_recoveries = sum(result.recoveries for result in results.values())
        total_failures = sum(result.failed_operations for result in results.values())
        
        if total_failures > 0:
            recovery_rate = total_recoveries / total_failures
            if recovery_rate < 0.8:
                analysis['recovery_capability'] = 'poor'
            elif recovery_rate < 0.9:
                analysis['recovery_capability'] = 'fair'
        
        return analysis
    
    def _generate_stress_recommendations(self, analysis: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        recommendations = []
        
        if analysis['overall_stability'] != 'stable':
            recommendations.append("–ö–†–ò–¢–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
            recommendations.append("- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
            recommendations.append("- –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        if analysis['critical_issues']:
            recommendations.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in analysis['critical_issues']:
                recommendations.append(f"  - {issue}")
        
        if analysis['resource_issues']:
            recommendations.append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏:")
            for issue in analysis['resource_issues']:
                recommendations.append(f"  - {issue}")
            recommendations.append("- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
            recommendations.append("- –î–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU")
        
        if analysis['recovery_capability'] != 'good':
            recommendations.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º:")
            recommendations.append("- –£–ª—É—á—à–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º—ã retry")
            recommendations.append("- –î–æ–±–∞–≤–∏—Ç—å circuit breaker –ø–∞—Ç—Ç–µ—Ä–Ω")
            recommendations.append("- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å graceful degradation")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
            recommendations.append("- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            recommendations.append("- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        
        return recommendations


def save_stress_test_report(report: Dict[str, Any], filename: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"stress_test_report_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False, default=str)
    
    logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")


def print_stress_test_summary(report: Dict[str, Any]):
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\n" + "="*80)
    print("–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    summary = report['stress_test_summary']
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_duration_minutes']:.1f} –º–∏–Ω—É—Ç")
    
    if summary.get('interrupted'):
        print("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–´–õ–û –ü–†–ï–†–í–ê–ù–û")
    
    print("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–û–í:")
    print("-"*40)
    
    stress_results = report['stress_results']
    for test_name, result in stress_results.items():
        print(f"\n{test_name.upper().replace('_', ' ')}:")
        print(f"  –û–ø–µ—Ä–∞—Ü–∏–π: {result['total_operations']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {result['successful_operations']} ({result.get('success_rate', 0):.2%})")
        print(f"  –ü–∏–∫ –ø–∞–º—è—Ç–∏: {result['peak_memory_mb']:.1f} –ú–ë")
        print(f"  –ü–∏–∫ CPU: {result['peak_cpu_percent']:.1f}%")
        print(f"  –°–±–æ–µ–≤: {result['crashes']}")
        print(f"  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {result['recoveries']}")
    
    if 'stability_analysis' in report:
        analysis = report['stability_analysis']
        print(f"\n–û–ë–©–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨: {analysis['overall_stability'].upper()}")
        
        if analysis['critical_issues']:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in analysis['critical_issues']:
                print(f"  - {issue}")
    
    print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-"*40)
    recommendations = report.get('recommendations', [])
    for rec in recommendations:
        print(f"  {rec}")
    
    print("\n" + "="*80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –¥–ª—è –¥–µ–º–æ)
    config = StressTestConfig(
        max_dataset_size=50000,  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        concurrent_processes=4,
        test_duration_minutes=2,  # –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
        memory_pressure_mb=1024,  # 1 –ì–ë
        error_injection_rate=0.05,
        network_failure_rate=0.02,
        memory_leak_simulation=True,
        max_memory_mb=2048,  # 2 –ì–ë –ª–∏–º–∏—Ç
        max_cpu_percent=90.0
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–µ—Ä
    tester = StressTester(config)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        report = tester.run_comprehensive_stress_test()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        save_stress_test_report(report)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        print_stress_test_summary(report)
        
        logger.info("‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except KeyboardInterrupt:
        logger.info("üõë –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise
    finally:
        tester.cleanup()


if __name__ == "__main__":
    main()