#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ BaseBuy API.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö mi_core_db.
"""

import os
import sys
import requests
import logging
import gzip
import io
import re
from datetime import datetime
from typing import Optional, Dict, Any
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv
from bs4 import BeautifulSoup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class CarDataUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞."""
        self.api_key = os.getenv('BASEBUY_API_KEY')
        
        # –†–∞–±–æ—á–∏–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ (–Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.version_url = 'https://basebuy.ru/api/auto/v1/version'
        
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API endpoints
        self.api_base_url = 'https://api.basebuy.ru/api/auto/v1'
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—É—â–Ω–æ—Å—Ç–µ–π BaseBuy –∫ –Ω–∞—à–∏–º —Ç–∞–±–ª–∏—Ü–∞–º
        self.entity_mapping = {
            'mark': {
                'table': 'brands',
                'id_type': 1,  # –ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
                'fields': ['id', 'name', 'name_rus']
            },
            'model': {
                'table': 'car_models', 
                'id_type': 1,
                'fields': ['id', 'id_mark', 'name', 'name_rus']
            },
            'serie': {
                'table': 'car_specifications',
                'id_type': 1, 
                'fields': ['id', 'id_model', 'name', 'year_start', 'year_end']
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        self.db_config = {
            'host': os.getenv('DB_HOST', '127.0.0.1'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD'),
            'database': os.getenv('DB_NAME'),
            'charset': 'utf8mb4',
            'connection_timeout': 5
        }
        
        if not self.api_key:
            logger.error("BASEBUY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            raise ValueError("API –∫–ª—é—á BaseBuy –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def connect_to_db(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def get_latest_version_from_api(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –ë–î –∏–∑ BaseBuy API, –ø–∞—Ä—Å—è HTML."""
        logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∏–∑ BaseBuy API...")
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        try:
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: {self.version_url}")
            
            response = requests.get(
                self.version_url,
                headers=headers,
                timeout=10
            )
            
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                # –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # –ò—â–µ–º –≤ meta-—Ç–µ–≥–∞—Ö
                meta_title = soup.find('meta', property='og:title')
                if meta_title and meta_title.get('content'):
                    content = meta_title.get('content')
                    logger.info(f"–ù–∞–π–¥–µ–Ω meta og:title: {content}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
                    date_pattern = r'(\d{2}\.\d{2}\.\d{4})'
                    match = re.search(date_pattern, content)
                    
                    if match:
                        version_date = match.group(1)
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: {version_date}")
                        return version_date
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ title
                title_tag = soup.find('title')
                if title_tag:
                    title_text = title_tag.get_text()
                    logger.info(f"–ù–∞–π–¥–µ–Ω title: {title_text}")
                    
                    match = re.search(r'(\d{2}\.\d{2}\.\d{4})', title_text)
                    if match:
                        version_date = match.group(1)
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –∏–∑ title: {version_date}")
                        return version_date
                
                # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_text = soup.get_text()
                matches = re.findall(r'(\d{2}\.\d{2}\.\d{4})', page_text)
                if matches:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É (–æ–±—ã—á–Ω–æ —Å–∞–º–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è)
                    version_date = matches[-1]
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ: {version_date}")
                    return version_date
                
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –≤–µ—Ä—Å–∏–∏ –≤ HTML")
                return None
            
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text[:200]}")
                return None
                
        except requests.exceptions.Timeout:
            logger.error("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return None
        except requests.exceptions.ConnectionError:
            logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def test_api_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API BaseBuy (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API BaseBuy...")
        
        version = self.get_latest_version_from_api()
        if version:
            return self.version_url, {'version': version, 'source': 'HTML parsing'}
        else:
            return None, None
    
    def get_entity_update_date(self, entity_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏."""
        if entity_name not in self.entity_mapping:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å: {entity_name}")
            return None
        
        entity_config = self.entity_mapping[entity_name]
        id_type = entity_config['id_type']
        
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        url = f"{self.api_base_url}/{entity_name}.getDateUpdate.timestamp"
        
        # –ü–µ—Ä–µ–¥–∞–µ–º API –∫–ª—é—á —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'api_key': self.api_key,
            'id_type': id_type
        }
        
        try:
            logger.info(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {entity_name}: {url}")
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                # –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å timestamp
                timestamp = response.text.strip()
                logger.info(f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {entity_name}: {timestamp}")
                return timestamp
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è {entity_name}: {response.status_code}")
                logger.error(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã –¥–ª—è {entity_name}: {e}")
            return None
    
    def download_entity_csv(self, entity_name: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç CSV –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏."""
        if entity_name not in self.entity_mapping:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å: {entity_name}")
            return None
        
        entity_config = self.entity_mapping[entity_name]
        id_type = entity_config['id_type']
        
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSV –¥–∞–Ω–Ω—ã—Ö
        url = f"{self.api_base_url}/{entity_name}.getAll.csv"
        
        # –ü–µ—Ä–µ–¥–∞–µ–º API –∫–ª—é—á —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'api_key': self.api_key,
            'id_type': id_type
        }
        
        try:
            logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º CSV –¥–ª—è {entity_name}: {url}")
            
            response = requests.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                csv_data = response.text
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(csv_data)} —Å–∏–º–≤–æ–ª–æ–≤ CSV –¥–ª—è {entity_name}")
                return csv_data
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV –¥–ª—è {entity_name}: {response.status_code}")
                logger.error(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV –¥–ª—è {entity_name}: {e}")
            return None
    
    def update_entity_data(self, entity_name: str, csv_data: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –ë–î –∏–∑ CSV."""
        if entity_name not in self.entity_mapping:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å: {entity_name}")
            return False
        
        entity_config = self.entity_mapping[entity_name]
        table_name = entity_config['table']
        
        try:
            import csv
            import io
            
            # –ü–∞—Ä—Å–∏–º CSV
            csv_reader = csv.DictReader(io.StringIO(csv_data))
            rows = list(csv_reader)
            
            if not rows:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV –¥–ª—è {entity_name}")
                return True
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(rows)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {entity_name}")
            
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if entity_name == 'mark':
                sql = """
                    INSERT INTO brands (external_id, name, name_rus, source)
                    VALUES (%s, %s, %s, 'basebuy')
                    ON DUPLICATE KEY UPDATE
                        name = VALUES(name),
                        name_rus = VALUES(name_rus),
                        updated_at = CURRENT_TIMESTAMP
                """
                
                for row in rows:
                    cursor.execute(sql, (
                        row.get('id'),
                        row.get('name', ''),
                        row.get('name_rus', row.get('name', ''))
                    ))
            
            elif entity_name == 'model':
                sql = """
                    INSERT INTO car_models (external_id, brand_id, name, name_rus, source)
                    VALUES (%s, %s, %s, %s, 'basebuy')
                    ON DUPLICATE KEY UPDATE
                        name = VALUES(name),
                        name_rus = VALUES(name_rus),
                        updated_at = CURRENT_TIMESTAMP
                """
                
                for row in rows:
                    # –ù–∞—Ö–æ–¥–∏–º brand_id –ø–æ external_id –º–∞—Ä–∫–∏
                    cursor.execute(
                        "SELECT id FROM brands WHERE external_id = %s AND source = 'basebuy'",
                        (row.get('id_mark'),)
                    )
                    brand_result = cursor.fetchone()
                    
                    if brand_result:
                        brand_id = brand_result[0]
                        cursor.execute(sql, (
                            row.get('id'),
                            brand_id,
                            row.get('name', ''),
                            row.get('name_rus', row.get('name', ''))
                        ))
                    else:
                        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–∞—Ä–∫–∞ —Å external_id {row.get('id_mark')} –¥–ª—è –º–æ–¥–µ–ª–∏ {row.get('id')}")
            
            elif entity_name == 'serie':
                sql = """
                    INSERT INTO car_specifications (external_id, car_model_id, name, year_start, year_end, source)
                    VALUES (%s, %s, %s, %s, %s, 'basebuy')
                    ON DUPLICATE KEY UPDATE
                        name = VALUES(name),
                        year_start = VALUES(year_start),
                        year_end = VALUES(year_end),
                        updated_at = CURRENT_TIMESTAMP
                """
                
                for row in rows:
                    # –ù–∞—Ö–æ–¥–∏–º car_model_id –ø–æ external_id –º–æ–¥–µ–ª–∏
                    cursor.execute(
                        "SELECT id FROM car_models WHERE external_id = %s AND source = 'basebuy'",
                        (row.get('id_model'),)
                    )
                    model_result = cursor.fetchone()
                    
                    if model_result:
                        model_id = model_result[0]
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–¥—ã
                        year_start = row.get('year_start')
                        year_end = row.get('year_end')
                        
                        try:
                            year_start = int(year_start) if year_start else None
                            year_end = int(year_end) if year_end else None
                        except (ValueError, TypeError):
                            year_start = year_end = None
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ year_start
                        if year_start is None:
                            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é {row.get('id')}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç year_start")
                            continue
                        
                        cursor.execute(sql, (
                            row.get('id'),
                            model_id,
                            row.get('name', ''),
                            year_start,
                            year_end
                        ))
                    else:
                        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å external_id {row.get('id_model')} –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ {row.get('id')}")
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ {entity_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {entity_name}: {e}")
            return False
    
    def get_current_db_version(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î –∏–∑ system_settings."""
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ system_settings
            cursor.execute("""
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_schema = %s AND table_name = 'system_settings'
            """, (self.db_config['database'],))
            
            if cursor.fetchone()[0] == 0:
                logger.warning("–¢–∞–±–ª–∏—Ü–∞ system_settings –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
                self.create_system_settings_table()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
            cursor.execute(
                "SELECT setting_value FROM system_settings WHERE setting_key = %s",
                ('basebuy_db_version',)
            )
            result = cursor.fetchone()
            
            cursor.close()
            connection.close()
            
            if result:
                version = result[0]
                logger.info(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ë–î: {version}")
                return version
            else:
                logger.info("–í–µ—Ä—Å–∏—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é")
                self.set_db_version('2025-09-11')
                return '2025-09-11'
                
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ë–î: {e}")
            return None
    
    def create_system_settings_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É system_settings –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS system_settings (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    setting_key VARCHAR(100) NOT NULL UNIQUE,
                    setting_value TEXT NOT NULL,
                    description VARCHAR(255),
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                ) ENGINE=InnoDB
            """)
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_settings —Å–æ–∑–¥–∞–Ω–∞")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã system_settings: {e}")
            raise
    
    def set_db_version(self, version: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ë–î –≤ system_settings."""
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            cursor.execute("""
                INSERT INTO system_settings (setting_key, setting_value, description)
                VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE
                    setting_value = VALUES(setting_value),
                    description = VALUES(description),
                    updated_at = CURRENT_TIMESTAMP
            """, (
                'basebuy_db_version',
                version,
                f'–í–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö BaseBuy, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().isoformat()}'
            ))
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info(f"‚úÖ –í–µ—Ä—Å–∏—è –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: {version}")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–∏ –ë–î: {e}")
            raise
    
    def check_for_updates(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ BaseBuy API.
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
        """
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î
        current_version = self.get_current_db_version()
        if not current_version:
            return {'has_updates': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î'}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –∏–∑ API
        latest_version = self.get_latest_version_from_api()
        
        if not latest_version:
            return {
                'has_updates': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ API BaseBuy',
                'current_version': current_version
            }
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
        has_updates = latest_version != current_version
        
        result = {
            'has_updates': has_updates,
            'current_version': current_version,
            'latest_version': latest_version,
            'api_url': self.version_url,
            'source': 'HTML parsing'
        }
        
        if has_updates:
            logger.info(f"üÜï –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {current_version} -> {latest_version}")
        else:
            logger.info(f"‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: {current_version}")
        
        return result
    
    def apply_updates(self, download_url: Optional[str] = None) -> bool:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API endpoints.
        
        Args:
            download_url: URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            
        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ API...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
        update_info = self.check_for_updates()
        
        if update_info.get('error'):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {update_info['error']}")
            return False
        
        if not update_info.get('has_updates'):
            logger.info("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            return True
        
        latest_version = update_info['latest_version']
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            logger.info("üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BaseBuy API...")
            api_test = self.test_api_endpoints()
            
            if not api_test['api_key_valid']:
                logger.warning("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫ —Ä–µ–∂–∏–º")
                logger.info("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                logger.info("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞ –Ω–∞ BaseBuy.ru")
                logger.info("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç 100 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å")
                logger.info("   3. –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
                logger.info("   4. –î–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ initial_load.py —Å –Ω–æ–≤—ã–º–∏ CSV —Ñ–∞–π–ª–∞–º–∏")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ë–î, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ë–î –¥–æ {latest_version} (—Ñ–æ–ª–±—ç–∫)")
                self.set_db_version(latest_version)
                return True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API endpoints
            entities_to_update = ['mark', 'model', 'serie']
            success_count = 0
            
            for entity in entities_to_update:
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º {entity}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
                entity_date = self.get_entity_update_date(entity)
                if entity_date:
                    logger.info(f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {entity}: {entity_date}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
                csv_data = self.download_entity_csv(entity)
                if not csv_data:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {entity}")
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                if self.update_entity_data(entity, csv_data):
                    success_count += 1
                    logger.info(f"‚úÖ {entity} –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {entity}")
            
            if success_count == len(entities_to_update):
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ë–î –¥–æ {latest_version}")
                self.set_db_version(latest_version)
                logger.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_count} –∏–∑ {len(entities_to_update)} —Å—É—â–Ω–æ—Å—Ç–µ–π")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    def test_api_endpoints(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ API endpoints BaseBuy."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints BaseBuy...")
        
        results = {
            'api_key_valid': False,
            'entities': {},
            'errors': []
        }
        
        if not self.api_key:
            results['errors'].append('API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
            return results
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—É—â–Ω–æ—Å—Ç—å
        for entity_name in self.entity_mapping.keys():
            logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {entity_name}...")
            
            entity_result = {
                'update_date': None,
                'csv_available': False,
                'csv_size': 0,
                'error': None
            }
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_date = self.get_entity_update_date(entity_name)
                if update_date:
                    entity_result['update_date'] = update_date
                    results['api_key_valid'] = True
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞)
                csv_data = self.download_entity_csv(entity_name)
                if csv_data:
                    entity_result['csv_available'] = True
                    entity_result['csv_size'] = len(csv_data)
                    entity_result['csv_preview'] = csv_data[:200] + '...' if len(csv_data) > 200 else csv_data
                
            except Exception as e:
                entity_result['error'] = str(e)
            
            results['entities'][entity_name] = entity_result
        
        return results
    
    def run_daily_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_info = self.check_for_updates()
            
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô:")
            print("=" * 50)
            
            if update_info.get('error'):
                print(f"‚ùå –û—à–∏–±–∫–∞: {update_info['error']}")
                return False
            
            print(f"üîó API URL: {update_info.get('api_url', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"üìÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {update_info.get('current_version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if 'latest_version' in update_info:
                print(f"üÜï –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: {update_info['latest_version']}")
                
                if update_info.get('has_updates'):
                    print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
                    if 'download_url' in update_info:
                        print(f"üì• URL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_info['download_url']}")
                    else:
                        print("‚ö†Ô∏è URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            else:
                print("üìÑ –û—Ç–≤–µ—Ç API:")
                print(f"   {update_info.get('api_response', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        updater = CarDataUpdater()
        success = updater.run_daily_check()
        return 0 if success else 1
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
