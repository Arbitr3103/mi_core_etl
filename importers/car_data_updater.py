#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ BaseBuy API.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö mi_core_db.
"""

import os
import sys
import requests
import logging
import gzip
import io
from datetime import datetime
from typing import Optional, Dict, Any
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class CarDataUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞."""
        self.api_key = os.getenv('BASEBUY_API_KEY')
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ URL API BaseBuy
        self.possible_base_urls = [
            'https://api.basebuy.ru/api/auto/v1',
            'https://basebuy.ru/api/auto/v1',
            'https://api.basebuy.ru/v1',
            'https://basebuy.ru/api/v1'
        ]
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        self.db_config = {
            'host': os.getenv('DB_HOST', '127.0.0.1'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD'),
            'database': os.getenv('DB_NAME'),
            'charset': 'utf8mb4',
            'connection_timeout': 5
        }
        
        if not self.api_key:
            logger.error("BASEBUY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            raise ValueError("API –∫–ª—é—á BaseBuy –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def connect_to_db(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def test_api_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API BaseBuy –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–±–æ—á–∏–π URL."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API BaseBuy...")
        
        headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json',
            'User-Agent': 'mi_core_etl/1.0'
        }
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
        version_endpoints = ['/version', '/info', '/status', '/database/version']
        
        for base_url in self.possible_base_urls:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π URL: {base_url}")
            
            for endpoint in version_endpoints:
                full_url = f"{base_url}{endpoint}"
                
                try:
                    logger.info(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º: {full_url}")
                    
                    response = requests.get(
                        full_url,
                        headers=headers,
                        timeout=10
                    )
                    
                    logger.info(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    
                    if response.status_code == 200:
                        try:
                            data = response.json()
                            logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {full_url}")
                            logger.info(f"  üìÑ –î–∞–Ω–Ω—ã–µ: {data}")
                            return full_url, data
                        except ValueError:
                            logger.info(f"  üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response.text[:200]}")
                            return full_url, response.text
                    
                    elif response.status_code == 401:
                        logger.warning(f"  üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á")
                    elif response.status_code == 404:
                        logger.debug(f"  ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    else:
                        logger.info(f"  ‚ö†Ô∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                        logger.info(f"  üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
                
                except requests.exceptions.Timeout:
                    logger.warning(f"  ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è {full_url}")
                except requests.exceptions.ConnectionError:
                    logger.warning(f"  üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {full_url}")
                except Exception as e:
                    logger.warning(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {full_url}: {e}")
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π API endpoint")
        return None, None
    
    def get_current_db_version(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î –∏–∑ system_settings."""
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ system_settings
            cursor.execute("""
                SELECT COUNT(*) FROM information_schema.tables 
                WHERE table_schema = %s AND table_name = 'system_settings'
            """, (self.db_config['database'],))
            
            if cursor.fetchone()[0] == 0:
                logger.warning("–¢–∞–±–ª–∏—Ü–∞ system_settings –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
                self.create_system_settings_table()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
            cursor.execute(
                "SELECT setting_value FROM system_settings WHERE setting_key = %s",
                ('basebuy_db_version',)
            )
            result = cursor.fetchone()
            
            cursor.close()
            connection.close()
            
            if result:
                version = result[0]
                logger.info(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ë–î: {version}")
                return version
            else:
                logger.info("–í–µ—Ä—Å–∏—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é")
                self.set_db_version('2025-09-11')
                return '2025-09-11'
                
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ë–î: {e}")
            return None
    
    def create_system_settings_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É system_settings –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS system_settings (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    setting_key VARCHAR(100) NOT NULL UNIQUE,
                    setting_value TEXT NOT NULL,
                    description VARCHAR(255),
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                ) ENGINE=InnoDB
            """)
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ system_settings —Å–æ–∑–¥–∞–Ω–∞")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã system_settings: {e}")
            raise
    
    def set_db_version(self, version: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ë–î –≤ system_settings."""
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            cursor.execute("""
                INSERT INTO system_settings (setting_key, setting_value, description)
                VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE
                    setting_value = VALUES(setting_value),
                    description = VALUES(description),
                    updated_at = CURRENT_TIMESTAMP
            """, (
                'basebuy_db_version',
                version,
                f'–í–µ—Ä—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö BaseBuy, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().isoformat()}'
            ))
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info(f"‚úÖ –í–µ—Ä—Å–∏—è –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: {version}")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä—Å–∏–∏ –ë–î: {e}")
            raise
    
    def check_for_updates(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ BaseBuy API.
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
        """
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î
        current_version = self.get_current_db_version()
        if not current_version:
            return {'has_updates': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î'}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        api_url, api_response = self.test_api_connection()
        
        if not api_url:
            return {
                'has_updates': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API BaseBuy',
                'current_version': current_version
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
        result = {
            'has_updates': False,
            'current_version': current_version,
            'api_url': api_url,
            'api_response': api_response
        }
        
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ JSON —Å –≤–µ—Ä—Å–∏–µ–π
        if isinstance(api_response, dict):
            if 'version' in api_response:
                latest_version = api_response['version']
                result['latest_version'] = latest_version
                result['has_updates'] = latest_version != current_version
                
                if 'update_file_url' in api_response:
                    result['download_url'] = api_response['update_file_url']
                elif 'download_url' in api_response:
                    result['download_url'] = api_response['download_url']
        
        return result
    
    def run_daily_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_info = self.check_for_updates()
            
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–ô:")
            print("=" * 50)
            
            if update_info.get('error'):
                print(f"‚ùå –û—à–∏–±–∫–∞: {update_info['error']}")
                return False
            
            print(f"üîó API URL: {update_info.get('api_url', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"üìÖ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {update_info.get('current_version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            if 'latest_version' in update_info:
                print(f"üÜï –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: {update_info['latest_version']}")
                
                if update_info.get('has_updates'):
                    print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
                    if 'download_url' in update_info:
                        print(f"üì• URL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_info['download_url']}")
                    else:
                        print("‚ö†Ô∏è URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            else:
                print("üìÑ –û—Ç–≤–µ—Ç API:")
                print(f"   {update_info.get('api_response', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        updater = CarDataUpdater()
        success = updater.run_daily_check()
        return 0 if success else 1
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
