#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon –∏ Wildberries.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API Ozon –∏ Wildberries
- –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É stock_movements —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π (–ø—Ä–æ–¥–∞–∂–∏, –≤–æ–∑–≤—Ä–∞—Ç—ã, —Å–ø–∏—Å–∞–Ω–∏—è)
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 20 —Å–µ–Ω—Ç—è–±—Ä—è 2025
"""

import os
import sys
import logging
import requests
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from ozon_importer import connect_to_db
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MovementImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–µ—Ä–∞."""
        self.connection = None
        self.cursor = None
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def get_ozon_movements(self, hours_back: int = 24) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            hours_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π —Å Ozon –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤...")
        
        movements_data = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        end_date = datetime.now()
        start_date = end_date - timedelta(hours=hours_back)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º FBO –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            fbo_movements = self._get_ozon_fbo_movements(start_date, end_date)
            movements_data.extend(fbo_movements)
            
            # –ü–æ–ª—É—á–∞–µ–º FBS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            fbs_movements = self._get_ozon_fbs_movements(start_date, end_date)
            movements_data.extend(fbs_movements)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π Ozon: {e}")
            raise
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(movements_data)} –¥–≤–∏–∂–µ–Ω–∏–π —Å Ozon")
        return movements_data

    def _get_ozon_fbo_movements(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ FBO –¥–≤–∏–∂–µ–Ω–∏–π —Å Ozon."""
        url = "https://api-seller.ozon.ru/v2/posting/fbo/list"
        headers = {
            "Client-Id": config.OZON_CLIENT_ID,
            "Api-Key": config.OZON_API_KEY,
            "Content-Type": "application/json"
        }
        
        movements = []
        offset = 0
        limit = 1000
        
        try:
            while True:
                payload = {
                    "dir": "ASC",
                    "filter": {
                        "since": start_date.isoformat(),
                        "to": end_date.isoformat(),
                        "status": ""
                    },
                    "limit": limit,
                    "offset": offset,
                    "with": {
                        "analytics_data": True,
                        "financial_data": True
                    }
                }
                
                response = requests.post(url, json=payload, headers=headers)
                response.raise_for_status()
                
                data = response.json()
                postings = data.get('result', [])
                
                if not postings:
                    break
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(postings)} FBO –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π (offset: {offset})")
                
                for posting in postings:
                    posting_movements = self._process_ozon_posting(posting, 'FBO')
                    movements.extend(posting_movements)
                
                if len(postings) < limit:
                    break
                    
                offset += limit
                time.sleep(0.1)
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ FBO –¥–≤–∏–∂–µ–Ω–∏–π Ozon: {e}")
            raise
        
        return movements

    def _get_ozon_fbs_movements(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ FBS –¥–≤–∏–∂–µ–Ω–∏–π —Å Ozon."""
        url = "https://api-seller.ozon.ru/v3/posting/fbs/list"
        headers = {
            "Client-Id": config.OZON_CLIENT_ID,
            "Api-Key": config.OZON_API_KEY,
            "Content-Type": "application/json"
        }
        
        movements = []
        offset = 0
        limit = 1000
        
        try:
            while True:
                payload = {
                    "dir": "ASC",
                    "filter": {
                        "since": start_date.isoformat(),
                        "to": end_date.isoformat(),
                        "status": ""
                    },
                    "limit": limit,
                    "offset": offset,
                    "with": {
                        "analytics_data": True,
                        "financial_data": True
                    }
                }
                
                response = requests.post(url, json=payload, headers=headers)
                response.raise_for_status()
                
                data = response.json()
                postings = data.get('result', [])
                
                if not postings:
                    break
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(postings)} FBS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π (offset: {offset})")
                
                for posting in postings:
                    posting_movements = self._process_ozon_posting(posting, 'FBS')
                    movements.extend(posting_movements)
                
                if len(postings) < limit:
                    break
                    
                offset += limit
                time.sleep(0.1)
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ FBS –¥–≤–∏–∂–µ–Ω–∏–π Ozon: {e}")
            raise
        
        return movements

    def _process_ozon_posting(self, posting: Dict[str, Any], stock_type: str) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è Ozon –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π.
        
        Args:
            posting: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            stock_type: –¢–∏–ø —Å–∫–ª–∞–¥–∞ (FBO/FBS)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        movements = []
        
        posting_number = posting.get('posting_number', '')
        order_date = posting.get('created_at', '')
        status = posting.get('status', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        movement_type = self._map_ozon_status_to_movement_type(status)
        
        if not movement_type:
            return movements
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        for product in posting.get('products', []):
            offer_id = product.get('offer_id', '')
            quantity = product.get('quantity', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º product_id –∏–∑ –ë–î
            product_id = self._get_product_id_by_ozon_sku(offer_id)
            
            if not product_id:
                logger.warning(f"–¢–æ–≤–∞—Ä —Å offer_id {offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–≤–∏–∂–µ–Ω–∏—è
            movement = {
                'movement_id': f"{posting_number}_{offer_id}",
                'product_id': product_id,
                'movement_date': order_date,
                'movement_type': movement_type,
                'quantity': -quantity if movement_type == 'sale' else quantity,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂
                'warehouse_name': posting.get('warehouse_name', f'{stock_type}-–°–∫–ª–∞–¥'),
                'order_id': posting_number,
                'source': 'Ozon'
            }
            
            movements.append(movement)
        
        return movements

    def _map_ozon_status_to_movement_type(self, status: str) -> Optional[str]:
        """
        –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ Ozon –Ω–∞ —Ç–∏–ø—ã –¥–≤–∏–∂–µ–Ω–∏–π.
        
        Args:
            status: –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è Ozon
            
        Returns:
            str: –¢–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ None
        """
        status_mapping = {
            'delivered': 'sale',
            'delivering': 'sale',
            'cancelled': 'return',
            'returned': 'return',
            'not_accepted': 'return'
        }
        
        return status_mapping.get(status.lower())

    def get_wb_movements(self, hours_back: int = 24) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            hours_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π —Å Wildberries –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤...")
        
        movements_data = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        end_date = datetime.now()
        start_date = end_date - timedelta(hours=hours_back)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
            wb_movements = self._get_wb_detailed_report(start_date, end_date)
            movements_data.extend(wb_movements)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π WB: {e}")
            raise
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(movements_data)} –¥–≤–∏–∂–µ–Ω–∏–π —Å Wildberries")
        return movements_data

    def _get_wb_detailed_report(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º WB."""
        url = "https://suppliers-api.wildberries.ru/api/v1/supplier/reportDetailByPeriod"
        headers = {
            "Authorization": config.WB_API_TOKEN
        }
        
        params = {
            "dateFrom": start_date.strftime('%Y-%m-%d'),
            "dateTo": end_date.strftime('%Y-%m-%d'),
            "limit": 100000,
            "rrdid": 0
        }
        
        movements = []
        
        try:
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            for item in data:
                movement = self._process_wb_report_item(item)
                if movement:
                    movements.append(movement)
                    
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—á–µ—Ç–∞ WB: {e}")
            raise
        
        return movements

    def _process_wb_report_item(self, item: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç—á–µ—Ç–∞ WB –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.
        
        Args:
            item: –≠–ª–µ–º–µ–Ω—Ç –æ—Ç—á–µ—Ç–∞ WB
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ None
        """
        supplier_article = item.get('supplierArticle', '')
        nm_id = item.get('nmId', '')
        doc_type_name = item.get('docTypeName', '')
        quantity = item.get('quantity', 0)
        date_str = item.get('date', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è
        movement_type = self._map_wb_doc_type_to_movement_type(doc_type_name)
        
        if not movement_type:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º product_id –∏–∑ –ë–î
        product_id = self._get_product_id_by_wb_sku(str(nm_id))
        
        if not product_id:
            logger.warning(f"–¢–æ–≤–∞—Ä —Å nmId {nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return None
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–≤–∏–∂–µ–Ω–∏—è
        movement_id = f"wb_{nm_id}_{date_str}_{doc_type_name}_{item.get('rrdid', 0)}"
        
        movement = {
            'movement_id': movement_id,
            'product_id': product_id,
            'movement_date': date_str,
            'movement_type': movement_type,
            'quantity': -quantity if movement_type == 'sale' else quantity,
            'warehouse_name': item.get('warehouseName', 'WB-–°–∫–ª–∞–¥'),
            'order_id': item.get('srid', ''),
            'source': 'Wildberries'
        }
        
        return movement

    def _map_wb_doc_type_to_movement_type(self, doc_type: str) -> Optional[str]:
        """
        –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ WB –Ω–∞ —Ç–∏–ø—ã –¥–≤–∏–∂–µ–Ω–∏–π.
        
        Args:
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ WB
            
        Returns:
            str: –¢–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ None
        """
        doc_type_mapping = {
            '–ü—Ä–æ–¥–∞–∂–∞': 'sale',
            '–í–æ–∑–≤—Ä–∞—Ç': 'return',
            '–°–ø–∏—Å–∞–Ω–∏–µ': 'disposal',
            '–ü–æ—Ç–µ—Ä—è': 'loss',
            '–ù–µ–¥–æ—Å—Ç–∞—á–∞': 'shortage',
            '–ë—Ä–∞–∫': 'defect'
        }
        
        return doc_type_mapping.get(doc_type)

    def _get_product_id_by_ozon_sku(self, sku_ozon: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Ozon."""
        if not sku_ozon:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE sku_ozon = %s",
                (sku_ozon,)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_ozon {sku_ozon}: {e}")
            return None

    def _get_product_id_by_wb_sku(self, sku_wb: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Wildberries."""
        if not sku_wb:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE sku_wb = %s",
                (sku_wb,)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_wb {sku_wb}: {e}")
            return None

    def add_movements(self, movements_data: List[Dict[str, Any]], source: str):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É stock_movements —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
        
        Args:
            movements_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon' –∏–ª–∏ 'Wildberries')
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}")
        
        if not movements_data:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö –¥–ª—è {source}")
            return
        
        try:
            insert_query = """
            INSERT IGNORE INTO stock_movements 
            (movement_id, product_id, movement_date, movement_type, quantity, 
             warehouse_name, order_id, source)
            VALUES (%(movement_id)s, %(product_id)s, %(movement_date)s, %(movement_type)s, 
                   %(quantity)s, %(warehouse_name)s, %(order_id)s, %(source)s)
            """
            
            self.cursor.executemany(insert_query, movements_data)
            inserted_count = self.cursor.rowcount
            
            self.connection.commit()
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {inserted_count} –Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è {source}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π {source}: {e}")
            self.connection.rollback()
            raise

    def run_movements_update(self, hours_back: int = 24):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–π.
        
        Args:
            hours_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤")
        
        try:
            self.connect_to_database()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏—è Ozon
            logger.info("=" * 50)
            logger.info("–û–ë–ù–û–í–õ–ï–ù–ò–ï –î–í–ò–ñ–ï–ù–ò–ô OZON")
            logger.info("=" * 50)
            
            ozon_movements = self.get_ozon_movements(hours_back)
            self.add_movements(ozon_movements, 'Ozon')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏—è Wildberries
            logger.info("=" * 50)
            logger.info("–û–ë–ù–û–í–õ–ï–ù–ò–ï –î–í–ò–ñ–ï–ù–ò–ô WILDBERRIES")
            logger.info("=" * 50)
            
            wb_movements = self.get_wb_movements(hours_back)
            self.add_movements(wb_movements, 'Wildberries')
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._print_movements_statistics()
            
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π: {e}")
            raise
        finally:
            self.close_database_connection()

    def _print_movements_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–≤–∏–∂–µ–Ω–∏—è–º."""
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–í–ò–ñ–ï–ù–ò–ô:")
        logger.info("=" * 40)
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            self.cursor.execute("""
                SELECT 
                    source,
                    movement_type,
                    COUNT(*) as count,
                    SUM(ABS(quantity)) as total_quantity
                FROM stock_movements 
                WHERE movement_date >= DATE_SUB(NOW(), INTERVAL 24 HOUR)
                GROUP BY source, movement_type
                ORDER BY source, movement_type
            """)
            
            stats = self.cursor.fetchall()
            
            current_source = None
            for stat in stats:
                if stat['source'] != current_source:
                    current_source = stat['source']
                    logger.info(f"{current_source}:")
                
                logger.info(f"  {stat['movement_type']}: {stat['count']} –æ–ø–µ—Ä–∞—Ü–∏–π, {stat['total_quantity']} –µ–¥–∏–Ω–∏—Ü")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.cursor.execute("""
                SELECT 
                    COUNT(*) as total_movements,
                    COUNT(DISTINCT product_id) as unique_products,
                    MIN(movement_date) as earliest_date,
                    MAX(movement_date) as latest_date
                FROM stock_movements
            """)
            
            total_stats = self.cursor.fetchone()
            logger.info("-" * 40)
            logger.info(f"–í—Å–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–π –≤ –ë–î: {total_stats['total_movements']}")
            logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {total_stats['unique_products']}")
            logger.info(f"–ü–µ—Ä–∏–æ–¥: {total_stats['earliest_date']} - {total_stats['latest_date']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–≤–∏–∂–µ–Ω–∏–π: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ò–º–ø–æ—Ä—Ç –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤')
    parser.add_argument('--hours', type=int, default=24, 
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 24)')
    
    args = parser.parse_args()
    
    importer = MovementImporter()
    importer.run_movements_update(args.hours)


if __name__ == "__main__":
    main()
