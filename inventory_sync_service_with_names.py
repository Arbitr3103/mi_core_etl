#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤.

–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Ozon_Analytics —á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É product_names
- Fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 08 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import requests
import time
import json
from datetime import datetime, date
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    import config
    from inventory_data_validator import InventoryDataValidator, ValidationResult
    from sync_logger import SyncLogger, SyncType, SyncStatus as LogSyncStatus, ProcessingStats
    from product_name_resolver import ProductNameResolver
    import mysql.connector
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL."""
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            user=os.getenv('DB_USER', 'v_admin'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME', 'mi_core'),
            charset='utf8mb4',
            collation='utf8mb4_unicode_ci',
            autocommit=True
        )
        return connection
    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SyncStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    SUCCESS = "success"
    PARTIAL = "partial"
    FAILED = "failed"


@dataclass
class InventoryRecord:
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ë–î."""
    product_id: int
    sku: str
    source: str
    warehouse_name: str
    stock_type: str
    current_stock: int
    reserved_stock: int
    available_stock: int
    quantity_present: int
    quantity_reserved: int
    snapshot_date: date
    product_name: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.current_stock = max(0, int(self.current_stock or 0))
        self.reserved_stock = max(0, int(self.reserved_stock or 0))
        self.available_stock = max(0, int(self.available_stock or 0))
        self.quantity_present = max(0, int(self.quantity_present or 0))
        self.quantity_reserved = max(0, int(self.quantity_reserved or 0))
        
        # –ï—Å–ª–∏ available_stock –Ω–µ –∑–∞–¥–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
        if self.available_stock == 0 and self.current_stock > 0:
            self.available_stock = max(0, self.current_stock - self.reserved_stock)


class InventorySyncServiceWithNames:
    """–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.connection = connect_to_db()
        self.validator = InventoryDataValidator()
        self.sync_logger = SyncLogger(self.connection)
        self.name_resolver = ProductNameResolver()  # –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        self.ozon_client_id = config.OZON_CLIENT_ID
        self.ozon_api_key = config.OZON_API_KEY
        self.wb_api_key = config.WB_API_KEY
        
        # –ë–∞–∑–æ–≤—ã–µ URL
        self.ozon_base_url = "https://api-seller.ozon.ru"
        self.wb_base_url = "https://statistics-api.wildberries.ru"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è rate limiting
        self.request_delay = 0.5
        self.last_request_time = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_processed': 0,
            'total_inserted': 0,
            'total_updated': 0,
            'total_failed': 0,
            'names_resolved': 0,
            'names_failed': 0
        }
    
    def _rate_limit(self):
        """–ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤."""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        if time_since_last < self.request_delay:
            time.sleep(self.request_delay - time_since_last)
        self.last_request_time = time.time()
    
    def sync_ozon_inventory_with_names(self) -> Dict[str, Any]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Ozon —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤")
        
        start_time = datetime.now()
        sync_id = self.sync_logger.start_sync(SyncType.INVENTORY, "Ozon")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —á–µ—Ä–µ–∑ v4 API
            main_stocks = self._get_ozon_stocks_v4()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(main_stocks)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            analytics_stocks = self._get_ozon_analytics_stocks()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(analytics_stocks)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API")
            
            # 3. –û–±–æ–≥–∞—â–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
            enriched_analytics = self._enrich_analytics_with_names(analytics_stocks)
            logger.info(f"–û–±–æ–≥–∞—â–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ {len(enriched_analytics)} –∑–∞–ø–∏—Å–µ–π")
            
            # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            all_records = self._merge_ozon_data(main_stocks, enriched_analytics)
            logger.info(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(all_records)} –∑–∞–ø–∏—Å–µ–π")
            
            # 5. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            validation_result = self.validator.validate_inventory_records(all_records)
            if not validation_result.is_valid:
                logger.warning(f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(validation_result.errors)} –æ—à–∏–±–æ–∫")
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            save_result = self._save_inventory_records(all_records, "Ozon")
            
            # 7. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            processing_stats = ProcessingStats(
                records_processed=len(all_records),
                records_inserted=save_result['inserted'],
                records_updated=save_result['updated'],
                records_failed=save_result['failed'],
                validation_errors=len(validation_result.errors),
                duration_seconds=duration
            )
            
            self.sync_logger.complete_sync(
                sync_id, 
                LogSyncStatus.SUCCESS if save_result['failed'] == 0 else LogSyncStatus.PARTIAL,
                processing_stats
            )
            
            result = {
                'status': 'success',
                'records_processed': len(all_records),
                'records_inserted': save_result['inserted'],
                'records_updated': save_result['updated'],
                'records_failed': save_result['failed'],
                'names_resolved': self.stats['names_resolved'],
                'names_failed': self.stats['names_failed'],
                'duration_seconds': duration,
                'validation_errors': len(validation_result.errors)
            }
            
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon: {e}")
            
            self.sync_logger.complete_sync(
                sync_id,
                LogSyncStatus.FAILED,
                ProcessingStats(records_processed=0, records_failed=1, duration_seconds=0),
                str(e)
            )
            
            return {
                'status': 'failed',
                'error': str(e),
                'records_processed': 0,
                'records_inserted': 0,
                'records_updated': 0,
                'records_failed': 1
            }
    
    def _get_ozon_stocks_v4(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —á–µ—Ä–µ–∑ Ozon v4 API."""
        try:
            self._rate_limit()
            
            url = f"{self.ozon_base_url}/v4/product/info/stocks"
            headers = {
                'Client-Id': self.ozon_client_id,
                'Api-Key': self.ozon_api_key,
                'Content-Type': 'application/json'
            }
            
            payload = {
                "filter": {
                    "visibility": "ALL"
                },
                "limit": 1000
            }
            
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            data = response.json()
            
            if not data.get('result') or not data['result'].get('items'):
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ v4 API")
                return []
            
            stocks = []
            for item in data['result']['items']:
                product_id = item.get('id', 0)
                offer_id = item.get('offer_id', '')
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
                for stock in item.get('stocks', []):
                    stocks.append({
                        'product_id': product_id,
                        'offer_id': offer_id,
                        'sku': stock.get('sku', offer_id),
                        'warehouse_id': stock.get('warehouse_id', 0),
                        'warehouse_name': stock.get('warehouse_name', 'Unknown'),
                        'present': stock.get('present', 0),
                        'reserved': stock.get('reserved', 0),
                        'stock_type': 'FBO'  # –û—Å–Ω–æ–≤–Ω–æ–π API –æ–±—ã—á–Ω–æ FBO
                    })
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(stocks)} –∑–∞–ø–∏—Å–µ–π –∏–∑ v4 API")
            return stocks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö v4 API: {e}")
            return []
    
    def _get_ozon_analytics_stocks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö."""
        try:
            self._rate_limit()
            
            url = f"{self.ozon_base_url}/v2/analytics/stock_on_warehouses"
            headers = {
                'Client-Id': self.ozon_client_id,
                'Api-Key': self.ozon_api_key,
                'Content-Type': 'application/json'
            }
            
            payload = {
                "limit": 1000,
                "offset": 0
            }
            
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            data = response.json()
            
            if not data.get('result') or not data['result'].get('rows'):
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º API")
                return []
            
            stocks = []
            for row in data['result']['rows']:
                stocks.append({
                    'product_id': 0,  # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç product_id
                    'offer_id': row.get('sku', ''),
                    'sku': row.get('sku', ''),
                    'warehouse_id': 0,
                    'warehouse_name': row.get('warehouse_name', 'Analytics'),
                    'present': row.get('free_to_sell_amount', 0),
                    'reserved': row.get('reserved_amount', 0),
                    'promised': row.get('promised_amount', 0),
                    'stock_type': 'Analytics'
                })
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(stocks)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API")
            return stocks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def _enrich_analytics_with_names(self, analytics_stocks: List[Dict]) -> List[Dict]:
        """
        –û–±–æ–≥–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.
        
        Args:
            analytics_stocks: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API
            
        Returns:
            –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
        """
        if not analytics_stocks:
            return []
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ {len(analytics_stocks)} –∑–∞–ø–∏—Å–µ–π –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ SKU
            skus = list(set(record.get('sku', '') for record in analytics_stocks if record.get('sku')))
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(skus)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SKU –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            sku_names = self.name_resolver.batch_resolve_names(skus)
            self.stats['names_resolved'] = len(sku_names)
            self.stats['names_failed'] = len(skus) - len(sku_names)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: {len(sku_names)} –∏–∑ {len(skus)}")
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø–∏—Å–∏
            enriched_records = []
            for record in analytics_stocks:
                sku = record.get('sku', '')
                enriched_record = record.copy()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                if sku in sku_names:
                    enriched_record['product_name'] = sku_names[sku]
                else:
                    # Fallback –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π
                    if sku.isdigit():
                        enriched_record['product_name'] = f"–¢–æ–≤–∞—Ä –∞—Ä—Ç–∏–∫—É–ª {sku}"
                    else:
                        enriched_record['product_name'] = sku
                
                enriched_records.append(enriched_record)
            
            logger.info(f"–û–±–æ–≥–∞—â–µ–Ω–æ {len(enriched_records)} –∑–∞–ø–∏—Å–µ–π –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏")
            return enriched_records
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å fallback –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            for record in analytics_stocks:
                sku = record.get('sku', '')
                if sku.isdigit():
                    record['product_name'] = f"–¢–æ–≤–∞—Ä –∞—Ä—Ç–∏–∫—É–ª {sku}"
                else:
                    record['product_name'] = sku
            return analytics_stocks
    
    def _merge_ozon_data(self, main_stocks: List[Dict], analytics_stocks: List[Dict]) -> List[InventoryRecord]:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API."""
        records = []
        today = date.today()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for stock in main_stocks:
            record = InventoryRecord(
                product_id=stock.get('product_id', 0),
                sku=stock.get('sku', ''),
                source='Ozon',
                warehouse_name=stock.get('warehouse_name', 'Main'),
                stock_type=stock.get('stock_type', 'FBO'),
                current_stock=stock.get('present', 0),
                reserved_stock=stock.get('reserved', 0),
                available_stock=max(0, stock.get('present', 0) - stock.get('reserved', 0)),
                quantity_present=stock.get('present', 0),
                quantity_reserved=stock.get('reserved', 0),
                snapshot_date=today,
                product_name=stock.get('product_name')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            )
            records.append(record)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        for stock in analytics_stocks:
            record = InventoryRecord(
                product_id=0,  # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–º–µ—é—Ç product_id
                sku=stock.get('sku', ''),
                source='Ozon_Analytics',
                warehouse_name=stock.get('warehouse_name', 'Analytics'),
                stock_type='Analytics',
                current_stock=stock.get('present', 0),
                reserved_stock=stock.get('reserved', 0),
                available_stock=max(0, stock.get('present', 0) - stock.get('reserved', 0)),
                quantity_present=stock.get('present', 0),
                quantity_reserved=stock.get('reserved', 0),
                snapshot_date=today,
                product_name=stock.get('product_name')  # –û–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            )
            records.append(record)
        
        return records
    
    def _save_inventory_records(self, records: List[InventoryRecord], source: str) -> Dict[str, int]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –≤ –ë–î."""
        if not records:
            return {'inserted': 0, 'updated': 0, 'failed': 0}
        
        cursor = self.connection.cursor()
        inserted = updated = failed = 0
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            cursor.execute(
                "DELETE FROM inventory_data WHERE source IN (%s, %s)",
                (source, f"{source}_Analytics")
            )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_query = """
                INSERT INTO inventory_data (
                    product_id, sku, source, warehouse_name, stock_type,
                    current_stock, reserved_stock, available_stock,
                    quantity_present, quantity_reserved, snapshot_date, last_sync_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
            """
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
            for record in records:
                try:
                    cursor.execute(insert_query, (
                        record.product_id,
                        record.sku,
                        record.source,
                        record.warehouse_name,
                        record.stock_type,
                        record.current_stock,
                        record.reserved_stock,
                        record.available_stock,
                        record.quantity_present,
                        record.quantity_reserved,
                        record.snapshot_date
                    ))
                    inserted += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if record.product_name and record.sku:
                        self._save_product_name(record.product_id, record.sku, record.product_name, record.source)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {record.sku}: {e}")
                    failed += 1
            
            self.connection.commit()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.connection.rollback()
            failed = len(records)
        finally:
            cursor.close()
        
        return {'inserted': inserted, 'updated': updated, 'failed': failed}
    
    def _save_product_name(self, product_id: int, sku: str, name: str, source: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É product_names."""
        try:
            cursor = self.connection.cursor()
            
            query = """
                INSERT INTO product_names (product_id, sku, product_name, source, created_at, updated_at)
                VALUES (%s, %s, %s, %s, NOW(), NOW())
                ON DUPLICATE KEY UPDATE
                product_name = VALUES(product_name),
                updated_at = NOW()
            """
            
            cursor.execute(query, (product_id, sku, name, source))
            cursor.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è SKU {sku}: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        if self.name_resolver:
            self.name_resolver.close()
        if self.connection:
            self.connection.close()

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞."""
    service = InventorySyncServiceWithNames()
    
    try:
        result = service.sync_ozon_inventory_with_names()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result}")
        
    finally:
        service.close()

if __name__ == "__main__":
    main()