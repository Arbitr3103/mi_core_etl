#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö metrics_daily.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç cogs_sum –∏ profit_sum –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ metrics_daily
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑ dim_products
- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
"""

import os
import sys
import logging
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def get_current_metrics_stats(cursor) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ metrics_daily."""
    cursor.execute("""
        SELECT 
            COUNT(*) as total_records,
            COUNT(cogs_sum) as records_with_cogs,
            COUNT(profit_sum) as records_with_profit,
            SUM(revenue_sum) as total_revenue,
            SUM(COALESCE(cogs_sum, 0)) as total_cogs,
            SUM(COALESCE(profit_sum, 0)) as total_profit
        FROM metrics_daily
    """)
    
    return cursor.fetchone()


def recalculate_margins_for_date(cursor, metric_date: str) -> bool:
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º client_id –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        cursor.execute("SELECT DISTINCT client_id FROM metrics_daily WHERE metric_date = %s", (metric_date,))
        clients = cursor.fetchall()
        
        for client_row in clients:
            client_id = client_row['client_id'] if isinstance(client_row, dict) else client_row[0]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ fact_orders —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é
            cursor.execute("""
                SELECT
                    COUNT(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.id END) AS orders_cnt,
                    SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN (fo.qty * fo.price) ELSE 0 END) AS revenue_sum,
                    SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN COALESCE(dp.cost_price, 0) ELSE 0 END) AS cogs_sum
                FROM fact_orders fo
                LEFT JOIN dim_products dp ON fo.sku = dp.sku_ozon OR fo.sku = dp.sku_wb
                WHERE fo.order_date = %s AND fo.client_id = %s
                GROUP BY fo.client_id
            """, (metric_date, client_id))
            
            result = cursor.fetchone()
            if result:
                if isinstance(result, dict):
                    orders_cnt = result['orders_cnt'] or 0
                    revenue_sum = result['revenue_sum'] or 0
                    cogs_sum = result['cogs_sum'] or 0
                else:
                    orders_cnt = result[0] or 0
                    revenue_sum = result[1] or 0
                    cogs_sum = result[2] or 0
                
                profit_sum = revenue_sum - cogs_sum
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ metrics_daily
                cursor.execute("""
                    UPDATE metrics_daily 
                    SET 
                        orders_cnt = %s,
                        revenue_sum = %s,
                        cogs_sum = %s,
                        profit_sum = %s
                    WHERE metric_date = %s AND client_id = %s
                """, (orders_cnt, revenue_sum, cogs_sum, profit_sum, metric_date, client_id))
                
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ {metric_date}, –∫–ª–∏–µ–Ω—Ç {client_id}: –≤—ã—Ä—É—á–∫–∞={revenue_sum}, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å={cogs_sum}, –ø—Ä–∏–±—ã–ª—å={profit_sum}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –¥–ª—è –¥–∞—Ç—ã {metric_date}: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è metrics_daily")
    
    connection = None
    cursor = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –ø–µ—Ä–µ—Å—á–µ—Ç–∞:")
        stats_before = get_current_metrics_stats(cursor)
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats_before['total_records']}")
        logger.info(f"–ó–∞–ø–∏—Å–µ–π —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {stats_before['records_with_cogs']}")
        logger.info(f"–ó–∞–ø–∏—Å–µ–π —Å –ø—Ä–∏–±—ã–ª—å—é: {stats_before['records_with_profit']}")
        logger.info(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats_before['total_revenue']:,.2f} —Ä—É–±.")
        logger.info(f"–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {stats_before['total_cogs']:,.2f} —Ä—É–±.")
        logger.info(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {stats_before['total_profit']:,.2f} —Ä—É–±.")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        cursor.execute("SELECT DISTINCT metric_date FROM metrics_daily ORDER BY metric_date")
        dates = cursor.fetchall()
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è {len(dates)} –¥–∞—Ç...")
        
        success_count = 0
        error_count = 0
        
        for date_row in dates:
            metric_date = date_row['metric_date']
            if recalculate_margins_for_date(cursor, metric_date):
                success_count += 1
            else:
                error_count += 1
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        connection.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –ø–µ—Ä–µ—Å—á–µ—Ç–∞:")
        stats_after = get_current_metrics_stats(cursor)
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats_after['total_records']}")
        logger.info(f"–ó–∞–ø–∏—Å–µ–π —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {stats_after['records_with_cogs']}")
        logger.info(f"–ó–∞–ø–∏—Å–µ–π —Å –ø—Ä–∏–±—ã–ª—å—é: {stats_after['records_with_profit']}")
        logger.info(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats_after['total_revenue']:,.2f} —Ä—É–±.")
        logger.info(f"–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {stats_after['total_cogs']:,.2f} —Ä—É–±.")
        logger.info(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {stats_after['total_profit']:,.2f} —Ä—É–±.")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        cogs_change = stats_after['total_cogs'] - stats_before['total_cogs']
        profit_change = stats_after['total_profit'] - stats_before['total_profit']
        
        logger.info("üìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø:")
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {cogs_change:+,.2f} —Ä—É–±.")
        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏: {profit_change:+,.2f} —Ä—É–±.")
        
        if stats_after['total_revenue'] > 0:
            margin_percent = (stats_after['total_profit'] / stats_after['total_revenue']) * 100
            logger.info(f"–û–±—â–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {margin_percent:.1f}%")
        
        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {error_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if connection:
            connection.rollback()
        return False
        
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()
    
    return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
