#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é —Å–∫–ª–∞–¥–∞.
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∞—Å–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é.
"""

import sys
import os
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db
from inventory_analyzer import InventoryAnalyzer, InventoryItem, ProductSettings
from sales_velocity_calculator import SalesVelocityCalculator, SalesMetrics, SalesTrend

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class PriorityLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"


@dataclass
class ReplenishmentRecommendation:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞."""
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    product_id: int
    sku: str
    product_name: str
    source: str
    
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_stock: int
    reserved_stock: int
    available_stock: int
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
    daily_sales_rate_7d: float
    daily_sales_rate_14d: float
    daily_sales_rate_30d: float
    
    # –ü—Ä–æ–≥–Ω–æ–∑—ã
    days_until_stockout: Optional[int]
    recommended_order_quantity: int
    recommended_order_value: Optional[float]
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
    priority_level: PriorityLevel
    urgency_score: float
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    last_sale_date: Optional[datetime]
    last_restock_date: Optional[datetime]
    sales_trend: SalesTrend
    inventory_turnover_days: Optional[int]
    days_since_last_sale: Optional[int]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞
    min_stock_level: int
    reorder_point: int
    lead_time_days: int
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    analysis_date: datetime
    confidence_level: float


class ReplenishmentRecommender:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é —Å–∫–ª–∞–¥–∞."""
    
    def __init__(self, connection=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
        
        Args:
            connection: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.connection = connection or connect_to_db()
        self.inventory_analyzer = InventoryAnalyzer(self.connection)
        self.sales_calculator = SalesVelocityCalculator(self.connection)
        self.settings = self.inventory_analyzer.settings
        
    def generate_recommendations(self, source: Optional[str] = None) -> List[ReplenishmentRecommendation]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
        """
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é{' –¥–ª—è ' + source if source else ''}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–ø–∞—Å–∞—Ö
            inventory_items = self.inventory_analyzer.get_current_stock(source=source)
            
            if not inventory_items:
                logger.warning("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–ø–∞—Å–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return []
            
            recommendations = []
            analysis_date = datetime.now()
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(inventory_items)} —Ç–æ–≤–∞—Ä–æ–≤...")
            
            for i, item in enumerate(inventory_items, 1):
                if i % 50 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ç–æ–≤–∞—Ä–æ–≤
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(inventory_items)} —Ç–æ–≤–∞—Ä–æ–≤")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞
                    settings = self.inventory_analyzer.get_product_settings(item.product_id)
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                    if not settings.is_active:
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
                    sales_metrics = self.sales_calculator.get_sales_metrics(item.product_id)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤
                    stockout_prediction = self.sales_calculator.calculate_days_until_stockout(
                        item.product_id, item.current_stock
                    )
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞
                    recommended_qty, order_value = self.calculate_recommended_quantity(
                        item, sales_metrics, settings
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç—å
                    priority, urgency_score = self.calculate_priority_and_urgency(
                        item, sales_metrics, stockout_prediction, settings
                    )
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å
                    turnover_days = self.calculate_inventory_turnover(sales_metrics, item.current_stock)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
                    days_since_last_sale = None
                    if sales_metrics.last_sale_date:
                        days_since_last_sale = (datetime.now().date() - sales_metrics.last_sale_date.date()).days
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                    recommendation = ReplenishmentRecommendation(
                        product_id=item.product_id,
                        sku=item.sku,
                        product_name=item.product_name,
                        source=item.source,
                        current_stock=item.current_stock,
                        reserved_stock=item.reserved_stock,
                        available_stock=item.available_stock,
                        daily_sales_rate_7d=sales_metrics.daily_sales_rate_7d,
                        daily_sales_rate_14d=sales_metrics.daily_sales_rate_14d,
                        daily_sales_rate_30d=sales_metrics.daily_sales_rate_30d,
                        days_until_stockout=stockout_prediction.days_until_stockout,
                        recommended_order_quantity=recommended_qty,
                        recommended_order_value=order_value,
                        priority_level=priority,
                        urgency_score=urgency_score,
                        last_sale_date=sales_metrics.last_sale_date,
                        last_restock_date=None,  # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
                        sales_trend=sales_metrics.sales_trend,
                        inventory_turnover_days=turnover_days,
                        days_since_last_sale=days_since_last_sale,
                        min_stock_level=settings.min_stock_level,
                        reorder_point=settings.reorder_point,
                        lead_time_days=settings.lead_time_days,
                        analysis_date=analysis_date,
                        confidence_level=stockout_prediction.confidence_level
                    )
                    
                    recommendations.append(recommendation)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.sku} (ID: {item.product_id}): {e}")
                    continue
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            recommendations = self.prioritize_recommendations(recommendations)
            
            return recommendations
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return []
    
    def calculate_recommended_quantity(self, item: InventoryItem, 
                                     sales_metrics: SalesMetrics, 
                                     settings: ProductSettings) -> Tuple[int, Optional[float]]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞.
        
        Args:
            item: –¢–æ–≤–∞—Ä –≤ –∑–∞–ø–∞—Å–∞—Ö
            sales_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞)
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂
            daily_rate = sales_metrics.daily_sales_rate_7d
            if daily_rate == 0:
                daily_rate = sales_metrics.daily_sales_rate_14d
            if daily_rate == 0:
                daily_rate = sales_metrics.daily_sales_rate_30d
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
            if daily_rate == 0:
                if settings.min_stock_level > 0:
                    recommended_qty = max(0, settings.min_stock_level - item.available_stock)
                else:
                    recommended_qty = 0
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏
                lead_time_demand = daily_rate * settings.lead_time_days
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å
                safety_stock = daily_rate * settings.safety_stock_days
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂
                trend_multiplier = 1.0
                if sales_metrics.sales_trend == SalesTrend.GROWING:
                    trend_multiplier = 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 20% –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö –ø—Ä–æ–¥–∞–∂
                elif sales_metrics.sales_trend == SalesTrend.DECLINING:
                    trend_multiplier = 0.8  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 20% –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö –ø—Ä–æ–¥–∞–∂
                
                # –û–±—â–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
                total_need = (lead_time_demand + safety_stock) * trend_multiplier
                
                # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å - —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                recommended_qty = max(0, int(total_need - item.available_stock))
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
                max_multiplier = self.settings.get('max_recommended_order_multiplier', 3.0)
                max_qty = int(daily_rate * 30 * max_multiplier)  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –º–µ—Å—è—Ü * –º–Ω–æ–∂–∏—Ç–µ–ª—å
                recommended_qty = min(recommended_qty, max_qty)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            order_value = None
            if recommended_qty > 0 and item.cost_price:
                order_value = recommended_qty * item.cost_price
            
            return recommended_qty, order_value
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item.sku}: {e}")
            return 0, None
    
    def calculate_priority_and_urgency(self, item: InventoryItem, 
                                     sales_metrics: SalesMetrics,
                                     stockout_prediction,
                                     settings: ProductSettings) -> Tuple[PriorityLevel, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –æ—Ü–µ–Ω–∫—É —Å—Ä–æ—á–Ω–æ—Å—Ç–∏.
        
        Args:
            item: –¢–æ–≤–∞—Ä –≤ –∑–∞–ø–∞—Å–∞—Ö
            sales_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
            stockout_prediction: –ü—Ä–æ–≥–Ω–æ–∑ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, –æ—Ü–µ–Ω–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏)
        """
        try:
            urgency_score = 0.0
            priority = PriorityLevel.LOW
            
            # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è
            days_until_stockout = stockout_prediction.days_until_stockout
            
            if days_until_stockout is not None:
                if days_until_stockout <= self.settings.get('critical_stockout_threshold', 3):
                    priority = PriorityLevel.CRITICAL
                    urgency_score += 40
                elif days_until_stockout <= self.settings.get('high_priority_threshold', 7):
                    priority = PriorityLevel.HIGH
                    urgency_score += 30
                elif days_until_stockout <= 14:
                    priority = PriorityLevel.MEDIUM
                    urgency_score += 20
                else:
                    priority = PriorityLevel.LOW
                    urgency_score += 10
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è
                if days_until_stockout > 0:
                    urgency_score += min(20, 100 / days_until_stockout)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂
            daily_rate = max(sales_metrics.daily_sales_rate_7d, 
                           sales_metrics.daily_sales_rate_14d,
                           sales_metrics.daily_sales_rate_30d)
            
            if daily_rate > 0:
                urgency_score += min(15, daily_rate * 2)  # –ú–∞–∫—Å–∏–º—É–º 15 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂
            if sales_metrics.sales_trend == SalesTrend.GROWING:
                urgency_score += 10
                # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö –ø—Ä–æ–¥–∞–∂
                if priority == PriorityLevel.LOW:
                    priority = PriorityLevel.MEDIUM
                elif priority == PriorityLevel.MEDIUM:
                    priority = PriorityLevel.HIGH
            elif sales_metrics.sales_trend == SalesTrend.DECLINING:
                urgency_score -= 5
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞
            if settings.reorder_point > 0 and item.available_stock <= settings.reorder_point:
                urgency_score += 15
                if priority == PriorityLevel.LOW:
                    priority = PriorityLevel.MEDIUM
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (–±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –≤–∞–∂–Ω–µ–µ)
            urgency_score += sales_metrics.sales_consistency * 10
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            urgency_score = min(100.0, max(0.0, urgency_score))
            
            return priority, round(urgency_score, 2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item.sku}: {e}")
            return PriorityLevel.LOW, 0.0
    
    def calculate_inventory_turnover(self, sales_metrics: SalesMetrics, current_stock: int) -> Optional[int]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤ –≤ –¥–Ω—è—Ö.
        
        Args:
            sales_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
            current_stock: –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
            
        Returns:
            –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –≤ –¥–Ω—è—Ö –∏–ª–∏ None
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ –∑–∞ 30 –¥–Ω–µ–π –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—É—é
            daily_rate = sales_metrics.daily_sales_rate_30d
            
            if daily_rate > 0 and current_stock > 0:
                turnover_days = int(current_stock / daily_rate)
                return turnover_days
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏: {e}")
            return None
    
    def prioritize_recommendations(self, recommendations: List[ReplenishmentRecommendation]) -> List[ReplenishmentRecommendation]:
        """
        –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏.
        
        Args:
            recommendations: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        Returns:
            –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            priority_order = {
                PriorityLevel.CRITICAL: 4,
                PriorityLevel.HIGH: 3,
                PriorityLevel.MEDIUM: 2,
                PriorityLevel.LOW: 1
            }
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –∑–∞—Ç–µ–º –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –ø–æ –¥–Ω—è–º –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è
            sorted_recommendations = sorted(
                recommendations,
                key=lambda r: (
                    priority_order.get(r.priority_level, 0),
                    r.urgency_score,
                    -(r.days_until_stockout or 999)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                ),
                reverse=True
            )
            
            logger.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É")
            return sorted_recommendations
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return recommendations
    
    def save_recommendations_to_db(self, recommendations: List[ReplenishmentRecommendation]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            recommendations: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not recommendations:
            logger.warning("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return True
        
        try:
            cursor = self.connection.cursor()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            cursor.execute("""
                DELETE FROM replenishment_recommendations 
                WHERE analysis_date = %s
            """, (today,))
            
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {cursor.rowcount} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞ {today}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_sql = """
                INSERT INTO replenishment_recommendations (
                    product_id, sku, product_name, source,
                    current_stock, reserved_stock, available_stock,
                    daily_sales_rate_7d, daily_sales_rate_14d, daily_sales_rate_30d,
                    days_until_stockout, recommended_order_quantity, recommended_order_value,
                    priority_level, urgency_score,
                    last_sale_date, sales_trend, inventory_turnover_days,
                    min_stock_level, reorder_point, lead_time_days,
                    analysis_date
                ) VALUES (
                    %s, %s, %s, %s,
                    %s, %s, %s,
                    %s, %s, %s,
                    %s, %s, %s,
                    %s, %s,
                    %s, %s, %s,
                    %s, %s, %s,
                    %s
                )
            """
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è batch insert
            batch_data = []
            for rec in recommendations:
                batch_data.append((
                    rec.product_id, rec.sku, rec.product_name, rec.source,
                    rec.current_stock, rec.reserved_stock, rec.available_stock,
                    rec.daily_sales_rate_7d, rec.daily_sales_rate_14d, rec.daily_sales_rate_30d,
                    rec.days_until_stockout, rec.recommended_order_quantity, rec.recommended_order_value,
                    rec.priority_level.value, rec.urgency_score,
                    rec.last_sale_date, rec.sales_trend.value, rec.inventory_turnover_days,
                    rec.min_stock_level, rec.reorder_point, rec.lead_time_days,
                    rec.analysis_date.date()
                ))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º batch insert
            cursor.executemany(insert_sql, batch_data)
            
            # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.connection.commit()
            cursor.close()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            self.connection.rollback()
            return False
    
    def get_critical_recommendations(self, limit: int = 20) -> List[ReplenishmentRecommendation]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            cursor.execute("""
                SELECT * FROM replenishment_recommendations
                WHERE priority_level IN ('CRITICAL', 'HIGH')
                    AND analysis_date = (
                        SELECT MAX(analysis_date) 
                        FROM replenishment_recommendations
                    )
                ORDER BY urgency_score DESC, days_until_stockout ASC
                LIMIT %s
            """, (limit,))
            
            results = cursor.fetchall()
            cursor.close()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = []
            for row in results:
                rec = ReplenishmentRecommendation(
                    product_id=row['product_id'],
                    sku=row['sku'],
                    product_name=row['product_name'],
                    source=row['source'],
                    current_stock=row['current_stock'],
                    reserved_stock=row['reserved_stock'],
                    available_stock=row['available_stock'],
                    daily_sales_rate_7d=float(row['daily_sales_rate_7d']),
                    daily_sales_rate_14d=float(row['daily_sales_rate_14d']),
                    daily_sales_rate_30d=float(row['daily_sales_rate_30d']),
                    days_until_stockout=row['days_until_stockout'],
                    recommended_order_quantity=row['recommended_order_quantity'],
                    recommended_order_value=float(row['recommended_order_value']) if row['recommended_order_value'] else None,
                    priority_level=PriorityLevel(row['priority_level']),
                    urgency_score=float(row['urgency_score']),
                    last_sale_date=row['last_sale_date'],
                    last_restock_date=row['last_restock_date'],
                    sales_trend=SalesTrend(row['sales_trend']),
                    inventory_turnover_days=row['inventory_turnover_days'],
                    min_stock_level=row['min_stock_level'],
                    reorder_point=row['reorder_point'],
                    lead_time_days=row['lead_time_days'],
                    analysis_date=row['analysis_date'],
                    confidence_level=0.0  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î
                )
                recommendations.append(rec)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return recommendations
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return []
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        if self.inventory_analyzer:
            self.inventory_analyzer.close()
        if self.sales_calculator:
            self.sales_calculator.close()
        if self.connection:
            self.connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é")
    
    recommender = None
    try:
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommender = ReplenishmentRecommender()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = recommender.generate_recommendations()
        
        if recommendations:
            print(f"\nüìã –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–û {len(recommendations)} –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
            print("=" * 80)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            critical_recs = [r for r in recommendations if r.priority_level in [PriorityLevel.CRITICAL, PriorityLevel.HIGH]]
            
            if critical_recs:
                print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(critical_recs)}):")
                for i, rec in enumerate(critical_recs[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"\n{i}. {rec.sku} - {rec.product_name[:40]}")
                    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.priority_level.value} (—Å—Ä–æ—á–Ω–æ—Å—Ç—å: {rec.urgency_score})")
                    print(f"   –û—Å—Ç–∞—Ç–æ–∫: {rec.available_stock} —à—Ç.")
                    print(f"   –î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è: {rec.days_until_stockout or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}")
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: {rec.recommended_order_quantity} —à—Ç.")
                    if rec.recommended_order_value:
                        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {rec.recommended_order_value:.2f} —Ä—É–±.")
                    print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂: {rec.daily_sales_rate_7d} —à—Ç/–¥–µ–Ω—å")
                    print(f"   –¢—Ä–µ–Ω–¥: {rec.sales_trend.value}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ë–î
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            if recommender.save_recommendations_to_db(recommendations):
                print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            priority_stats = {}
            for rec in recommendations:
                priority = rec.priority_level.value
                priority_stats[priority] = priority_stats.get(priority, 0) + 1
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú:")
            for priority, count in priority_stats.items():
                print(f"   {priority}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        else:
            print("‚ÑπÔ∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main(): {e}")
        
    finally:
        if recommender:
            recommender.close()


if __name__ == "__main__":
    main()