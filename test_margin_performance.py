#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import sys
import os
import time
import logging
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db
from run_aggregation import aggregate_daily_metrics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class PerformanceTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self):
        self.connection = None
        
    def setup_connection(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def analyze_data_volume(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö."""
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            logger.info("üìä –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö:")
            
            # –ê–Ω–∞–ª–∏–∑ fact_orders
            cursor.execute("SELECT COUNT(*) as count FROM fact_orders")
            orders_count = cursor.fetchone()['count']
            logger.info(f"   - fact_orders: {orders_count:,} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ fact_transactions
            cursor.execute("SELECT COUNT(*) as count FROM fact_transactions")
            transactions_count = cursor.fetchone()['count']
            logger.info(f"   - fact_transactions: {transactions_count:,} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ dim_products
            cursor.execute("SELECT COUNT(*) as count FROM dim_products")
            products_count = cursor.fetchone()['count']
            logger.info(f"   - dim_products: {products_count:,} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
            cursor.execute("""
                SELECT 
                    MIN(order_date) as min_date,
                    MAX(order_date) as max_date,
                    COUNT(DISTINCT order_date) as unique_dates
                FROM fact_orders
            """)
            date_info = cursor.fetchone()
            
            if date_info['min_date']:
                logger.info(f"   - –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {date_info['min_date']} - {date_info['max_date']}")
                logger.info(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {date_info['unique_dates']}")
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–∞—Ç—É
            cursor.execute("""
                SELECT 
                    order_date,
                    COUNT(*) as daily_orders
                FROM fact_orders
                GROUP BY order_date
                ORDER BY daily_orders DESC
                LIMIT 5
            """)
            
            top_dates = cursor.fetchall()
            logger.info("   - –¢–æ–ø-5 –¥–∞—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤:")
            for row in top_dates:
                logger.info(f"     {row['order_date']}: {row['daily_orders']:,} –∑–∞–∫–∞–∑–æ–≤")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        finally:
            cursor.close()
    
    def test_query_performance(self, test_date: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏."""
        if not self.connection:
            return False
            
        logger.info(f"‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞—Ç—ã: {test_date}")
        
        try:
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
            start_time = time.time()
            
            success = aggregate_daily_metrics(self.connection, test_date)
            
            end_time = time.time()
            execution_time = end_time - start_time
            
            if success:
                logger.info(f"‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                cursor = self.connection.cursor(dictionary=True)
                cursor.execute("""
                    SELECT COUNT(*) as count FROM metrics_daily 
                    WHERE metric_date = %s
                """, (test_date,))
                
                result_count = cursor.fetchone()['count']
                logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {result_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                cursor.execute("""
                    SELECT 
                        client_id,
                        orders_cnt,
                        revenue_sum,
                        profit_sum,
                        margin_percent
                    FROM metrics_daily 
                    WHERE metric_date = %s
                    LIMIT 3
                """, (test_date,))
                
                sample_results = cursor.fetchall()
                logger.info("üìã –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for row in sample_results:
                    logger.info(f"   –ö–ª–∏–µ–Ω—Ç {row['client_id']}: {row['orders_cnt']} –∑–∞–∫–∞–∑–æ–≤, "
                              f"–≤—ã—Ä—É—á–∫–∞ {row['revenue_sum']:.2f}, –ø—Ä–∏–±—ã–ª—å {row['profit_sum']:.2f}, "
                              f"–º–∞—Ä–∂–∞ {row['margin_percent']:.2f}%")
                
                cursor.close()
                return execution_time
            else:
                logger.error("‚ùå –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    def test_multiple_dates_performance(self, num_dates: int = 5):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∞—Ç–∞—Ö."""
        if not self.connection:
            return False
            
        logger.info(f"‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ {num_dates} –¥–∞—Ç–∞—Ö")
        
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            cursor.execute("""
                SELECT DISTINCT order_date 
                FROM fact_orders 
                ORDER BY order_date DESC 
                LIMIT %s
            """, (num_dates,))
            
            test_dates = [row[0].strftime('%Y-%m-%d') for row in cursor.fetchall()]
            cursor.close()
            
            if not test_dates:
                logger.warning("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            logger.info(f"üìÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç—ã: {', '.join(test_dates)}")
            
            total_time = 0
            successful_runs = 0
            
            for test_date in test_dates:
                execution_time = self.test_query_performance(test_date)
                
                if execution_time is not None:
                    total_time += execution_time
                    successful_runs += 1
                    logger.info(f"   {test_date}: {execution_time:.2f}s")
                else:
                    logger.error(f"   {test_date}: –û–®–ò–ë–ö–ê")
            
            if successful_runs > 0:
                avg_time = total_time / successful_runs
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
                logger.info(f"   - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤: {successful_runs}/{len(test_dates)}")
                logger.info(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
                logger.info(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–∞—Ç—É: {avg_time:.2f}s")
                
                # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if avg_time < 1.0:
                    logger.info("üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 1s –Ω–∞ –¥–∞—Ç—É)")
                elif avg_time < 5.0:
                    logger.info("‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 5s –Ω–∞ –¥–∞—Ç—É)")
                elif avg_time < 10.0:
                    logger.info("‚ö†Ô∏è  –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (< 10s –Ω–∞ –¥–∞—Ç—É)")
                else:
                    logger.warning("üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (> 10s –Ω–∞ –¥–∞—Ç—É)")
                    logger.warning("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
                
                return True
            else:
                logger.error("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞—Ç: {e}")
            return False
    
    def check_indexes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤."""
        if not self.connection:
            return False
            
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è fact_orders
            cursor.execute("SHOW INDEX FROM fact_orders")
            orders_indexes = cursor.fetchall()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è fact_transactions
            cursor.execute("SHOW INDEX FROM fact_transactions")
            transactions_indexes = cursor.fetchall()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è dim_products
            cursor.execute("SHOW INDEX FROM dim_products")
            products_indexes = cursor.fetchall()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
            recommended_indexes = {
                'fact_orders': ['idx_fact_orders_date_client', 'idx_fact_orders_product'],
                'fact_transactions': ['idx_fact_transactions_order', 'idx_fact_transactions_date_type'],
                'dim_products': ['idx_dim_products_cost']
            }
            
            logger.info("üìã –°—Ç–∞—Ç—É—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤:")
            
            for table, indexes in recommended_indexes.items():
                if table == 'fact_orders':
                    existing_indexes = [idx['Key_name'] for idx in orders_indexes]
                elif table == 'fact_transactions':
                    existing_indexes = [idx['Key_name'] for idx in transactions_indexes]
                else:
                    existing_indexes = [idx['Key_name'] for idx in products_indexes]
                
                logger.info(f"   {table}:")
                for idx_name in indexes:
                    status = "‚úÖ" if idx_name in existing_indexes else "‚ùå"
                    logger.info(f"     {status} {idx_name}")
            
            cursor.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            return False
    
    def run_performance_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("=" * 60)
        
        if not self.setup_connection():
            return False
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
            self.analyze_data_volume()
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
            self.check_indexes()
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∞—Ç–∞—Ö
            success = self.test_multiple_dates_performance()
            
            logger.info("=" * 60)
            if success:
                logger.info("üéâ –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            else:
                logger.error("‚ùå –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
            
            return success
            
        finally:
            if self.connection:
                self.connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    tester = PerformanceTester()
    success = tester.run_performance_tests()
    
    if success:
        exit(0)
    else:
        exit(1)


if __name__ == "__main__":
    main()