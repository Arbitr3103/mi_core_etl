-- ===================================================================
-- –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ß–ï–¢–ê –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–ò –î–õ–Ø –û–î–ù–û–ô –î–ê–¢–´
-- ===================================================================
-- –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ó–∞–º–µ–Ω–∏—Ç–µ '2024-09-20' –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏
-- ===================================================================

USE mi_core_db;

-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∞—Ç—É (–ò–ó–ú–ï–ù–ò–¢–ï –ù–ê –ê–ö–¢–£–ê–õ–¨–ù–£–Æ!)
SET @test_date = '2024-09-20';

SELECT CONCAT('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–ò –î–õ–Ø –î–ê–¢–´: ', @test_date) as test_info;

-- 1. –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•
SELECT '=== 1. –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï ===' as step;

SELECT 
    COUNT(*) as orders_count,
    SUM(qty * price) as total_revenue,
    COUNT(DISTINCT client_id) as clients_count,
    COUNT(DISTINCT product_id) as products_count
FROM fact_orders 
WHERE order_date = @test_date AND transaction_type = '–ø—Ä–æ–¥–∞–∂–∞';

-- –î–µ—Ç–∞–ª–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
SELECT 
    client_id,
    COUNT(*) as orders,
    SUM(qty * price) as revenue
FROM fact_orders 
WHERE order_date = @test_date AND transaction_type = '–ø—Ä–æ–¥–∞–∂–∞'
GROUP BY client_id;

-- 2. –ü–†–û–í–ï–†–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
SELECT '=== 2. –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===' as step;

SELECT 
    COUNT(*) as transactions_count,
    SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) as positive_amount,
    SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END) as negative_amount
FROM fact_transactions 
WHERE transaction_date = @test_date;

-- –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
SELECT 
    transaction_type,
    COUNT(*) as count,
    SUM(amount) as total_amount
FROM fact_transactions 
WHERE transaction_date = @test_date
GROUP BY transaction_type
ORDER BY count DESC;

-- 3. –ü–†–û–í–ï–†–ö–ê –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–ò
SELECT '=== 3. –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–¨ ===' as step;

SELECT 
    COUNT(DISTINCT fo.product_id) as total_products_in_orders,
    COUNT(DISTINCT CASE WHEN dp.cost_price IS NOT NULL THEN fo.product_id END) as products_with_cost,
    ROUND(
        COUNT(DISTINCT CASE WHEN dp.cost_price IS NOT NULL THEN fo.product_id END) * 100.0 / 
        COUNT(DISTINCT fo.product_id), 2
    ) as cost_coverage_percent
FROM fact_orders fo
LEFT JOIN dim_products dp ON fo.product_id = dp.id
WHERE fo.order_date = @test_date AND fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞';

-- 4. –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (–¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞)
SELECT '=== 4. –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===' as step;

DELETE FROM metrics_daily WHERE metric_date = @test_date;
SELECT '–°—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã' as cleanup_status;

-- 5. –†–£–ß–ù–û–ô –†–ê–°–ß–ï–¢ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
SELECT '=== 5. –†–£–ß–ù–û–ô –†–ê–°–ß–ï–¢ ===' as step;

SELECT
    fo.client_id,
    
    -- –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    COUNT(*) AS orders_cnt,
    SUM(fo.qty * fo.price) AS revenue_sum,
    
    -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
    SUM(COALESCE(dp.cost_price * fo.qty, 0)) AS cogs_sum,
    
    -- –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–±–µ–∑ —É—á–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
    (SUM(fo.qty * fo.price) - SUM(COALESCE(dp.cost_price * fo.qty, 0))) AS simple_profit,
    
    -- –ü—Ä–æ—Å—Ç–∞—è –º–∞—Ä–∂–∞
    CASE 
        WHEN SUM(fo.qty * fo.price) > 0 
        THEN ROUND(
            (SUM(fo.qty * fo.price) - SUM(COALESCE(dp.cost_price * fo.qty, 0))) * 100.0 / 
            SUM(fo.qty * fo.price), 2
        )
        ELSE NULL 
    END AS simple_margin_percent

FROM fact_orders fo
LEFT JOIN dim_products dp ON fo.product_id = dp.id
WHERE fo.order_date = @test_date AND fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞'
GROUP BY fo.client_id;

-- 6. –ü–û–õ–ù–´–ô –†–ê–°–ß–ï–¢ –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò (–∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ)
SELECT '=== 6. –ü–û–õ–ù–´–ô –†–ê–°–ß–ï–¢ –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò ===' as step;

-- –≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ run_aggregation.py
INSERT INTO metrics_daily (
    client_id, metric_date, orders_cnt, revenue_sum, returns_sum, 
    cogs_sum, commission_sum, shipping_sum, other_expenses_sum, 
    profit_sum, margin_percent
)
SELECT
    fo.client_id,
    @test_date AS metric_date,
    
    -- –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
    COUNT(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.id END) AS orders_cnt,
    SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN (fo.qty * fo.price) ELSE 0 END) AS revenue_sum,
    SUM(CASE WHEN fo.transaction_type = '–≤–æ–∑–≤—Ä–∞—Ç' THEN (fo.qty * fo.price) ELSE 0 END) AS returns_sum,
    
    -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (COGS)
    SUM(CASE 
        WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' AND dp.cost_price IS NOT NULL 
        THEN COALESCE(dp.cost_price * fo.qty, 0) 
        ELSE 0 
    END) AS cogs_sum,
    
    -- –ö–æ–º–∏—Å—Å–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥
    COALESCE(commission_data.commission_sum, 0) AS commission_sum,
    
    -- –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∞–≤–∫—É
    COALESCE(logistics_data.shipping_sum, 0) AS shipping_sum,
    
    -- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    COALESCE(other_data.other_expenses_sum, 0) AS other_expenses_sum,
    
    -- –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
    (
        SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í—ã—Ä—É—á–∫–∞
        SUM(CASE WHEN fo.transaction_type = '–≤–æ–∑–≤—Ä–∞—Ç' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í–æ–∑–≤—Ä–∞—Ç—ã
        SUM(CASE 
            WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' AND dp.cost_price IS NOT NULL 
            THEN COALESCE(dp.cost_price * fo.qty, 0) 
            ELSE 0 
        END) - -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        COALESCE(commission_data.commission_sum, 0) - -- –ö–æ–º–∏—Å—Å–∏–∏
        COALESCE(logistics_data.shipping_sum, 0) - -- –õ–æ–≥–∏—Å—Ç–∏–∫–∞
        COALESCE(other_data.other_expenses_sum, 0) -- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    ) AS profit_sum,
    
    -- –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    CASE 
        WHEN SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN (fo.qty * fo.price) ELSE 0 END) > 0 
        THEN (
            (
                SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í—ã—Ä—É—á–∫–∞
                SUM(CASE WHEN fo.transaction_type = '–≤–æ–∑–≤—Ä–∞—Ç' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í–æ–∑–≤—Ä–∞—Ç—ã
                SUM(CASE 
                    WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' AND dp.cost_price IS NOT NULL 
                    THEN COALESCE(dp.cost_price * fo.qty, 0) 
                    ELSE 0 
                END) - -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                COALESCE(commission_data.commission_sum, 0) - -- –ö–æ–º–∏—Å—Å–∏–∏
                COALESCE(logistics_data.shipping_sum, 0) - -- –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                COALESCE(other_data.other_expenses_sum, 0) -- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            ) / SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN (fo.qty * fo.price) ELSE 0 END)
        ) * 100
        ELSE NULL 
    END AS margin_percent

FROM fact_orders fo

-- JOIN —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
LEFT JOIN dim_products dp ON fo.product_id = dp.id

-- –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–π –∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞
LEFT JOIN (
    SELECT 
        ft.client_id,
        SUM(ABS(ft.amount)) AS commission_sum
    FROM fact_transactions ft
    WHERE ft.transaction_date = @test_date
        AND (
            ft.transaction_type LIKE '%–∫–æ–º–∏—Å—Å–∏—è%' OR
            ft.transaction_type LIKE '%—ç–∫–≤–∞–π—Ä–∏–Ω–≥%' OR
            ft.transaction_type LIKE '%commission%' OR
            ft.transaction_type LIKE '%fee%' OR
            ft.transaction_type LIKE '%OperationMarketplaceServiceItemFulfillment%'
        )
    GROUP BY ft.client_id
) commission_data ON fo.client_id = commission_data.client_id

-- –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
LEFT JOIN (
    SELECT 
        ft.client_id,
        SUM(ABS(ft.amount)) AS shipping_sum
    FROM fact_transactions ft
    WHERE ft.transaction_date = @test_date
        AND (
            ft.transaction_type LIKE '%–ª–æ–≥–∏—Å—Ç–∏–∫–∞%' OR
            ft.transaction_type LIKE '%–¥–æ—Å—Ç–∞–≤–∫–∞%' OR
            ft.transaction_type LIKE '%delivery%' OR
            ft.transaction_type LIKE '%shipping%' OR
            ft.transaction_type LIKE '%OperationMarketplaceServiceItemDeliveryToCustomer%'
        )
    GROUP BY ft.client_id
) logistics_data ON fo.client_id = logistics_data.client_id

-- –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
LEFT JOIN (
    SELECT 
        ft.client_id,
        SUM(ABS(ft.amount)) AS other_expenses_sum
    FROM fact_transactions ft
    WHERE ft.transaction_date = @test_date
        AND ft.transaction_type NOT LIKE '%–∫–æ–º–∏—Å—Å–∏—è%'
        AND ft.transaction_type NOT LIKE '%—ç–∫–≤–∞–π—Ä–∏–Ω–≥%'
        AND ft.transaction_type NOT LIKE '%commission%'
        AND ft.transaction_type NOT LIKE '%fee%'
        AND ft.transaction_type NOT LIKE '%–ª–æ–≥–∏—Å—Ç–∏–∫–∞%'
        AND ft.transaction_type NOT LIKE '%–¥–æ—Å—Ç–∞–≤–∫–∞%'
        AND ft.transaction_type NOT LIKE '%delivery%'
        AND ft.transaction_type NOT LIKE '%shipping%'
        AND ft.transaction_type NOT LIKE '%–≤–æ–∑–≤—Ä–∞—Ç%'
        AND ft.transaction_type NOT LIKE '%return%'
        AND ft.transaction_type NOT LIKE '%OperationMarketplaceServiceItemFulfillment%'
        AND ft.transaction_type NOT LIKE '%OperationMarketplaceServiceItemDeliveryToCustomer%'
        AND ft.transaction_type NOT LIKE '%OperationMarketplaceServiceItemReturn%'
        AND ft.amount < 0 -- –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    GROUP BY ft.client_id
) other_data ON fo.client_id = other_data.client_id

WHERE fo.order_date = @test_date
GROUP BY fo.client_id;

-- 7. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê
SELECT '=== 7. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê ===' as step;

SELECT 
    client_id,
    orders_cnt,
    ROUND(revenue_sum, 2) as revenue_sum,
    ROUND(cogs_sum, 2) as cogs_sum,
    ROUND(commission_sum, 2) as commission_sum,
    ROUND(shipping_sum, 2) as shipping_sum,
    ROUND(other_expenses_sum, 2) as other_expenses_sum,
    ROUND(profit_sum, 2) as profit_sum,
    ROUND(margin_percent, 2) as margin_percent
FROM metrics_daily 
WHERE metric_date = @test_date;

-- 8. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
SELECT '=== 8. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===' as step;

SELECT 
    COUNT(*) as clients_processed,
    SUM(orders_cnt) as total_orders,
    ROUND(SUM(revenue_sum), 2) as total_revenue,
    ROUND(SUM(profit_sum), 2) as total_profit,
    ROUND(SUM(profit_sum) * 100.0 / SUM(revenue_sum), 2) as overall_margin_percent
FROM metrics_daily 
WHERE metric_date = @test_date;

-- 9. –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò
SELECT '=== 9. –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò ===' as step;

SELECT 
    CASE 
        WHEN COUNT(*) = 0 THEN '‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ'
        WHEN AVG(margin_percent) < -100 OR AVG(margin_percent) > 100 THEN '‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ä–∂–∏'
        WHEN SUM(revenue_sum) = 0 THEN '‚ö†Ô∏è  –ù—É–ª–µ–≤–∞—è –≤—ã—Ä—É—á–∫–∞'
        ELSE '‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    END as validation_status
FROM metrics_daily 
WHERE metric_date = @test_date;

SELECT CONCAT('üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –î–õ–Ø –î–ê–¢–´: ', @test_date) as completion_message;