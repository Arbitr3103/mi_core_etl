#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å —Ä—É—á–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏.
"""

import sys
import os
import logging
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_HALF_UP

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MarginValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self):
        self.connection = None
        
    def setup_connection(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def get_manual_calculation(self, client_id: int, date: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        if not self.connection:
            return None
            
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
            cursor.execute("""
                SELECT 
                    fo.order_id,
                    fo.qty,
                    fo.price,
                    fo.transaction_type,
                    dp.cost_price
                FROM fact_orders fo
                LEFT JOIN dim_products dp ON fo.product_id = dp.id
                WHERE fo.client_id = %s 
                    AND fo.order_date = %s
                ORDER BY fo.order_id
            """, (client_id, date))
            
            orders = cursor.fetchall()
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
            cursor.execute("""
                SELECT 
                    transaction_type,
                    amount,
                    order_id
                FROM fact_transactions
                WHERE client_id = %s 
                    AND transaction_date = %s
                ORDER BY transaction_type
            """, (client_id, date))
            
            transactions = cursor.fetchall()
            
            cursor.close()
            
            # 3. –†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç
            manual_calc = {
                'orders_cnt': 0,
                'revenue_sum': Decimal('0'),
                'returns_sum': Decimal('0'),
                'cogs_sum': Decimal('0'),
                'commission_sum': Decimal('0'),
                'shipping_sum': Decimal('0'),
                'other_expenses_sum': Decimal('0'),
                'profit_sum': Decimal('0'),
                'margin_percent': None
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã
            for order in orders:
                if order['transaction_type'] == '–ø—Ä–æ–¥–∞–∂–∞':
                    manual_calc['orders_cnt'] += 1
                    revenue = Decimal(str(order['qty'])) * Decimal(str(order['price']))
                    manual_calc['revenue_sum'] += revenue
                    
                    if order['cost_price']:
                        cogs = Decimal(str(order['qty'])) * Decimal(str(order['cost_price']))
                        manual_calc['cogs_sum'] += cogs
                        
                elif order['transaction_type'] == '–≤–æ–∑–≤—Ä–∞—Ç':
                    returns = Decimal(str(order['qty'])) * Decimal(str(order['price']))
                    manual_calc['returns_sum'] += returns
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            for trans in transactions:
                amount = abs(Decimal(str(trans['amount'])))
                trans_type = trans['transaction_type'].lower()
                
                if any(keyword in trans_type for keyword in ['–∫–æ–º–∏—Å—Å–∏—è', '—ç–∫–≤–∞–π—Ä–∏–Ω–≥', 'commission', 'fee']):
                    manual_calc['commission_sum'] += amount
                elif any(keyword in trans_type for keyword in ['–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', 'delivery', 'shipping']):
                    manual_calc['shipping_sum'] += amount
                elif '–≤–æ–∑–≤—Ä–∞—Ç' not in trans_type and 'return' not in trans_type:
                    manual_calc['other_expenses_sum'] += amount
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
            manual_calc['profit_sum'] = (
                manual_calc['revenue_sum'] - 
                manual_calc['returns_sum'] - 
                manual_calc['cogs_sum'] - 
                manual_calc['commission_sum'] - 
                manual_calc['shipping_sum'] - 
                manual_calc['other_expenses_sum']
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if manual_calc['revenue_sum'] > 0:
                margin = (manual_calc['profit_sum'] / manual_calc['revenue_sum']) * 100
                manual_calc['margin_percent'] = margin.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
            
            return manual_calc
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return None
    
    def get_automated_calculation(self, client_id: int, date: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ metrics_daily."""
        if not self.connection:
            return None
            
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            cursor.execute("""
                SELECT 
                    orders_cnt,
                    revenue_sum,
                    returns_sum,
                    cogs_sum,
                    commission_sum,
                    shipping_sum,
                    other_expenses_sum,
                    profit_sum,
                    margin_percent
                FROM metrics_daily
                WHERE client_id = %s AND metric_date = %s
            """, (client_id, date))
            
            result = cursor.fetchone()
            cursor.close()
            
            if result:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Decimal –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                for key, value in result.items():
                    if value is not None and key != 'orders_cnt':
                        result[key] = Decimal(str(value))
                        
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: {e}")
            return None
    
    def compare_calculations(self, manual: dict, automated: dict, tolerance: Decimal = Decimal('0.01')):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç—ã."""
        if not manual or not automated:
            return False, []
        
        differences = []
        all_match = True
        
        for key in manual.keys():
            manual_val = manual[key]
            auto_val = automated.get(key)
            
            if manual_val is None and auto_val is None:
                continue
                
            if manual_val is None or auto_val is None:
                differences.append(f"{key}: manual={manual_val}, auto={auto_val} (–æ–¥–∏–Ω –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π None)")
                all_match = False
                continue
            
            if key == 'orders_cnt':
                if manual_val != auto_val:
                    differences.append(f"{key}: manual={manual_val}, auto={auto_val}")
                    all_match = False
            else:
                # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –¥–æ–ø—É—Å–∫–æ–º
                if isinstance(manual_val, Decimal) and isinstance(auto_val, Decimal):
                    diff = abs(manual_val - auto_val)
                    if diff > tolerance:
                        differences.append(f"{key}: manual={manual_val}, auto={auto_val}, diff={diff}")
                        all_match = False
                else:
                    if manual_val != auto_val:
                        differences.append(f"{key}: manual={manual_val}, auto={auto_val} (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã)")
                        all_match = False
        
        return all_match, differences
    
    def validate_date(self, date: str):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã."""
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞ –¥–∞—Ç—É: {date}")
        
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
            cursor.execute("""
                SELECT DISTINCT client_id 
                FROM metrics_daily 
                WHERE metric_date = %s
            """, (date,))
            
            client_ids = [row[0] for row in cursor.fetchall()]
            cursor.close()
            
            if not client_ids:
                logger.warning(f"‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ metrics_daily –∑–∞ –¥–∞—Ç—É {date}")
                return False
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(client_ids)}")
            
            validation_results = []
            
            for client_id in client_ids:
                logger.info(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç
                manual = self.get_manual_calculation(client_id, date)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
                automated = self.get_automated_calculation(client_id, date)
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
                match, differences = self.compare_calculations(manual, automated)
                
                validation_results.append({
                    'client_id': client_id,
                    'match': match,
                    'differences': differences,
                    'manual': manual,
                    'automated': automated
                })
                
                if match:
                    logger.info(f"     ‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id}: —Ä–∞—Å—á–µ—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                else:
                    logger.warning(f"     ‚ùå –ö–ª–∏–µ–Ω—Ç {client_id}: –Ω–∞–π–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
                    for diff in differences[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                        logger.warning(f"       - {diff}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            successful_validations = sum(1 for result in validation_results if result['match'])
            total_validations = len(validation_results)
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞ {date}:")
            logger.info(f"   - –£—Å–ø–µ—à–Ω—ã—Ö: {successful_validations}/{total_validations}")
            logger.info(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {(successful_validations/total_validations)*100:.1f}%")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º
            failed_validations = [result for result in validation_results if not result['match']]
            
            if failed_validations:
                logger.warning(f"‚ö†Ô∏è  –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π:")
                for result in failed_validations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –∫–ª–∏–µ–Ω—Ç–æ–≤
                    logger.warning(f"   –ö–ª–∏–µ–Ω—Ç {result['client_id']}:")
                    for diff in result['differences']:
                        logger.warning(f"     - {diff}")
            
            return successful_validations == total_validations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã {date}: {e}")
            return False
    
    def validate_recent_dates(self, num_dates: int = 3):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–∞—Ç."""
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {num_dates} –¥–∞—Ç")
        
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
            cursor.execute("""
                SELECT DISTINCT metric_date 
                FROM metrics_daily 
                ORDER BY metric_date DESC 
                LIMIT %s
            """, (num_dates,))
            
            dates = [row[0].strftime('%Y-%m-%d') for row in cursor.fetchall()]
            cursor.close()
            
            if not dates:
                logger.warning("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                return False
            
            logger.info(f"üìÖ –î–∞—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {', '.join(dates)}")
            
            all_successful = True
            
            for date in dates:
                success = self.validate_date(date)
                if not success:
                    all_successful = False
            
            logger.info("=" * 60)
            if all_successful:
                logger.info("üéâ –í–°–ï –í–ê–õ–ò–î–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
                logger.info("‚úÖ –†–∞—Å—á–µ—Ç—ã –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                logger.error("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –í –†–ê–°–ß–ï–¢–ê–•")
                logger.error("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏")
            
            return all_successful
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞—Ç: {e}")
            return False
    
    def run_validation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("=" * 60)
        
        if not self.setup_connection():
            return False
        
        try:
            success = self.validate_recent_dates()
            return success
            
        finally:
            if self.connection:
                self.connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    validator = MarginValidator()
    success = validator.run_validation()
    
    if success:
        exit(0)
    else:
        exit(1)


if __name__ == "__main__":
    main()