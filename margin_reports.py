#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –û—Ç—á–µ—Ç –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
- –û—Ç—á–µ—Ç –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
- –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
- –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø/—Ö—É–¥—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –º–∞—Ä–∂–µ
"""

import os
import sys
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def daily_margin_report(cursor, days: int = 30) -> None:
    """–û—Ç—á–µ—Ç –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π."""
    print(f"\nüìä –û–¢–ß–ï–¢ –ü–û –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–ò –ü–û –î–ù–Ø–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)")
    print("=" * 80)
    
    cursor.execute("""
        SELECT 
            metric_date,
            SUM(orders_cnt) as total_orders,
            SUM(revenue_sum) as total_revenue,
            SUM(COALESCE(cogs_sum, 0)) as total_cogs,
            SUM(COALESCE(profit_sum, 0)) as total_profit,
            CASE 
                WHEN SUM(revenue_sum) > 0 THEN 
                    ROUND((SUM(COALESCE(profit_sum, 0)) / SUM(revenue_sum)) * 100, 2)
                ELSE 0 
            END as margin_percent
        FROM metrics_daily 
        WHERE metric_date >= DATE_SUB(CURDATE(), INTERVAL %s DAY)
        GROUP BY metric_date
        ORDER BY metric_date DESC
    """, (days,))
    
    results = cursor.fetchall()
    
    if not results:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return
    
    print(f"{'–î–∞—Ç–∞':<12} {'–ó–∞–∫–∞–∑—ã':<8} {'–í—ã—Ä—É—á–∫–∞':<12} {'–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å':<15} {'–ü—Ä–∏–±—ã–ª—å':<12} {'–ú–∞—Ä–∂–∞ %':<8}")
    print("-" * 80)
    
    total_revenue = 0
    total_cogs = 0
    total_profit = 0
    
    for row in results:
        date_str = row['metric_date'].strftime('%Y-%m-%d')
        orders = row['total_orders']
        revenue = float(row['total_revenue'])
        cogs = float(row['total_cogs'])
        profit = float(row['total_profit'])
        margin = float(row['margin_percent'])
        
        total_revenue += revenue
        total_cogs += cogs
        total_profit += profit
        
        print(f"{date_str:<12} {orders:<8} {revenue:<12,.0f} {cogs:<15,.0f} {profit:<12,.0f} {margin:<8.1f}%")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    total_margin = (total_profit / total_revenue * 100) if total_revenue > 0 else 0
    print("-" * 80)
    print(f"{'–ò–¢–û–ì–û:':<12} {'':<8} {total_revenue:<12,.0f} {total_cogs:<15,.0f} {total_profit:<12,.0f} {total_margin:<8.1f}%")


def product_margin_report(cursor, limit: int = 20) -> None:
    """–û—Ç—á–µ—Ç –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º."""
    print(f"\nüè∑Ô∏è –¢–û–ü-{limit} –¢–û–í–ê–†–û–í –ü–û –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 100)
    
    cursor.execute("""
        SELECT 
            dp.sku_ozon,
            dp.product_name,
            dp.cost_price,
            SUM(fo.qty) as total_qty,
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) as total_revenue,
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * COALESCE(dp.cost_price, 0) ELSE 0 END) as total_cogs,
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) - 
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * COALESCE(dp.cost_price, 0) ELSE 0 END) as total_profit,
            CASE 
                WHEN SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) > 0 THEN
                    ROUND(((SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) - 
                           SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * COALESCE(dp.cost_price, 0) ELSE 0 END)) / 
                           SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END)) * 100, 2)
                ELSE 0
            END as margin_percent
        FROM fact_orders fo
        LEFT JOIN dim_products dp ON fo.sku = dp.sku_ozon OR fo.sku = dp.sku_wb
        WHERE fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞'
        GROUP BY dp.sku_ozon, dp.product_name, dp.cost_price
        HAVING total_revenue > 0
        ORDER BY margin_percent DESC, total_profit DESC
        LIMIT %s
    """, (limit,))
    
    results = cursor.fetchall()
    
    if not results:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
        return
    
    print(f"{'SKU':<20} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–ö–æ–ª-–≤–æ':<8} {'–í—ã—Ä—É—á–∫–∞':<10} {'–°–µ–±–µ—Å—Ç.':<10} {'–ü—Ä–∏–±—ã–ª—å':<10} {'–ú–∞—Ä–∂–∞ %':<8}")
    print("-" * 100)
    
    for row in results:
        sku = (row['sku_ozon'] or 'N/A')[:19]
        name = (row['product_name'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:29]
        qty = int(row['total_qty'])
        revenue = float(row['total_revenue'])
        cogs = float(row['total_cogs'])
        profit = float(row['total_profit'])
        margin = float(row['margin_percent'])
        
        print(f"{sku:<20} {name:<30} {qty:<8} {revenue:<10,.0f} {cogs:<10,.0f} {profit:<10,.0f} {margin:<8.1f}%")


def low_margin_products_report(cursor, margin_threshold: float = 10.0, limit: int = 10) -> None:
    """–û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å –Ω–∏–∑–∫–æ–π –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    print(f"\n‚ö†Ô∏è –¢–û–í–ê–†–´ –° –ù–ò–ó–ö–û–ô –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–¨–Æ (< {margin_threshold}%)")
    print("=" * 100)
    
    cursor.execute("""
        SELECT 
            dp.sku_ozon,
            dp.product_name,
            dp.cost_price,
            SUM(fo.qty) as total_qty,
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) as total_revenue,
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * COALESCE(dp.cost_price, 0) ELSE 0 END) as total_cogs,
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) - 
            SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * COALESCE(dp.cost_price, 0) ELSE 0 END) as total_profit,
            CASE 
                WHEN SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) > 0 THEN
                    ROUND(((SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END) - 
                           SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * COALESCE(dp.cost_price, 0) ELSE 0 END)) / 
                           SUM(CASE WHEN fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN fo.qty * fo.price ELSE 0 END)) * 100, 2)
                ELSE 0
            END as margin_percent
        FROM fact_orders fo
        LEFT JOIN dim_products dp ON fo.sku = dp.sku_ozon OR fo.sku = dp.sku_wb
        WHERE fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' AND dp.cost_price IS NOT NULL
        GROUP BY dp.sku_ozon, dp.product_name, dp.cost_price
        HAVING total_revenue > 1000 AND margin_percent < %s
        ORDER BY margin_percent ASC, total_revenue DESC
        LIMIT %s
    """, (margin_threshold, limit))
    
    results = cursor.fetchall()
    
    if not results:
        print(f"–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –Ω–∏–∂–µ {margin_threshold}% (—Å –≤—ã—Ä—É—á–∫–æ–π > 1000 —Ä—É–±.)")
        return
    
    print(f"{'SKU':<20} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–ö–æ–ª-–≤–æ':<8} {'–í—ã—Ä—É—á–∫–∞':<10} {'–°–µ–±–µ—Å—Ç.':<10} {'–ü—Ä–∏–±—ã–ª—å':<10} {'–ú–∞—Ä–∂–∞ %':<8}")
    print("-" * 100)
    
    for row in results:
        sku = (row['sku_ozon'] or 'N/A')[:19]
        name = (row['product_name'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:29]
        qty = int(row['total_qty'])
        revenue = float(row['total_revenue'])
        cogs = float(row['total_cogs'])
        profit = float(row['total_profit'])
        margin = float(row['margin_percent'])
        
        print(f"{sku:<20} {name:<30} {qty:<8} {revenue:<10,.0f} {cogs:<10,.0f} {profit:<10,.0f} {margin:<8.1f}%")


def summary_report(cursor) -> None:
    """–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    print(f"\nüìà –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("""
        SELECT 
            SUM(orders_cnt) as total_orders,
            SUM(revenue_sum) as total_revenue,
            SUM(COALESCE(cogs_sum, 0)) as total_cogs,
            SUM(COALESCE(profit_sum, 0)) as total_profit,
            COUNT(*) as total_days
        FROM metrics_daily
    """)
    
    summary = cursor.fetchone()
    
    if summary and summary['total_revenue']:
        total_orders = int(summary['total_orders'])
        total_revenue = float(summary['total_revenue'])
        total_cogs = float(summary['total_cogs'])
        total_profit = float(summary['total_profit'])
        total_days = int(summary['total_days'])
        margin_percent = (total_profit / total_revenue) * 100 if total_revenue > 0 else 0
        
        print(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Ä—É–±.")
        print(f"–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cogs:,.0f} —Ä—É–±.")
        print(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:,.0f} —Ä—É–±.")
        print(f"–û–±—â–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {margin_percent:.1f}%")
        print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,}")
        print(f"–î–Ω–µ–π –≤ –æ—Ç—á–µ—Ç–µ: {total_days}")
        print(f"–°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å: {total_revenue/total_days:,.0f} —Ä—É–±.")
        print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å: {total_profit/total_days:,.0f} —Ä—É–±.")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    cursor.execute("""
        SELECT 
            COUNT(DISTINCT dp.id) as products_with_cost,
            (SELECT COUNT(*) FROM dim_products) as total_products
        FROM dim_products dp
        WHERE dp.cost_price IS NOT NULL AND dp.cost_price > 0
    """)
    
    product_stats = cursor.fetchone()
    if product_stats:
        products_with_cost = int(product_stats['products_with_cost'])
        total_products = int(product_stats['total_products'])
        coverage_percent = (products_with_cost / total_products) * 100 if total_products > 0 else 0
        
        print(f"\n–ü–æ–∫—Ä—ã—Ç–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é:")
        print(f"–¢–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {products_with_cost}")
        print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {coverage_percent:.1f}%")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤."""
    print("üìä –°–ò–°–¢–ï–ú–ê –û–¢–ß–ï–¢–û–í –ü–û –ú–ê–†–ñ–ò–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    connection = None
    cursor = None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
        summary_report(cursor)
        daily_margin_report(cursor, days=14)
        product_margin_report(cursor, limit=15)
        low_margin_products_report(cursor, margin_threshold=15.0, limit=10)
        
        print(f"\n‚úÖ –û—Ç—á–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        return False
        
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()
    
    return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
