<?php
/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ getFunnelData() –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 */

require_once 'src/classes/OzonAnalyticsAPI.php';

echo "üîß –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –í–û–†–û–ù–ö–ò –ü–†–û–î–ê–ñ\n";
echo str_repeat("=", 60) . "\n\n";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
$ozonAPI = new OzonAnalyticsAPI('test_client_id', 'test_api_key');

echo "1Ô∏è‚É£ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n";

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç
$dateTests = [
    ['2024-01-01', '2024-01-31', true, '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç'],
    ['2024-01-31', '2024-01-01', false, '–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π'],
    ['2024-01-01', '2024-05-01', false, '–î–∏–∞–ø–∞–∑–æ–Ω –±–æ–ª—å—à–µ 90 –¥–Ω–µ–π'],
    ['invalid-date', '2024-01-31', false, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞'],
    ['2024-01-01', 'invalid-date', false, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞']
];

foreach ($dateTests as $test) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É
        $reflection = new ReflectionClass($ozonAPI);
        $validateMethod = $reflection->getMethod('validateDateRange');
        $validateMethod->setAccessible(true);
        
        $validateMethod->invoke($ozonAPI, $test[0], $test[1]);
        
        if ($test[2]) {
            echo "‚úÖ {$test[3]}: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n";
        } else {
            echo "‚ùå {$test[3]}: –û–∂–∏–¥–∞–ª–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –µ–≥–æ –Ω–µ –±—ã–ª–æ\n";
        }
        
    } catch (Exception $e) {
        if (!$test[2]) {
            echo "‚úÖ {$test[3]}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {$e->getMessage()}\n";
        } else {
            echo "‚ùå {$test[3]}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {$e->getMessage()}\n";
        }
    }
}

echo "\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏:\n";

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ API
$testResponses = [
    [
        'name' => '–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        'response' => [
            'data' => [
                [
                    'product_id' => '123456',
                    'campaign_id' => 'camp_001',
                    'views' => 1000,
                    'cart_additions' => 150,
                    'orders' => 30
                ]
            ]
        ],
        'expected_conversions' => [15.0, 20.0, 3.0] // view_to_cart, cart_to_order, overall
    ],
    [
        'name' => '–î–∞–Ω–Ω—ã–µ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏',
        'response' => [
            'data' => [
                [
                    'product_id' => '123456',
                    'views' => 0,
                    'cart_additions' => 0,
                    'orders' => 0
                ]
            ]
        ],
        'expected_conversions' => [0.0, 0.0, 0.0]
    ],
    [
        'name' => '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–∫–∞–∑—ã > –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É)',
        'response' => [
            'data' => [
                [
                    'product_id' => '123456',
                    'views' => 100,
                    'cart_additions' => 20,
                    'orders' => 50 // –ë–æ–ª—å—à–µ —á–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É
                ]
            ]
        ],
        'expected_corrections' => true
    ],
    [
        'name' => '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç',
        'response' => [
            'data' => []
        ],
        'expected_empty_record' => true
    ]
];

foreach ($testResponses as $testCase) {
    try {
        $reflection = new ReflectionClass($ozonAPI);
        $processMethod = $reflection->getMethod('processFunnelData');
        $processMethod->setAccessible(true);
        
        $result = $processMethod->invoke(
            $ozonAPI, 
            $testCase['response'], 
            '2024-01-01', 
            '2024-01-31', 
            ['product_id' => '123456']
        );
        
        echo "‚úÖ {$testCase['name']}: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ " . count($result) . " –∑–∞–ø–∏—Å–µ–π\n";
        
        if (!empty($result)) {
            $firstRecord = $result[0];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            if (isset($testCase['expected_conversions'])) {
                $conversions = [
                    $firstRecord['conversion_view_to_cart'],
                    $firstRecord['conversion_cart_to_order'],
                    $firstRecord['conversion_overall']
                ];
                
                if ($conversions === $testCase['expected_conversions']) {
                    echo "   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: " . implode('%, ', $conversions) . "%\n";
                } else {
                    echo "   ‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å " . implode('%, ', $testCase['expected_conversions']) . 
                         "%, –ø–æ–ª—É—á–µ–Ω–æ " . implode('%, ', $conversions) . "%\n";
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (isset($testCase['expected_corrections'])) {
                if ($firstRecord['orders'] <= $firstRecord['cart_additions']) {
                    echo "   ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã: –∑–∞–∫–∞–∑—ã = {$firstRecord['orders']}, –∫–æ—Ä–∑–∏–Ω–∞ = {$firstRecord['cart_additions']}\n";
                } else {
                    echo "   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã\n";
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –∑–∞–ø–∏—Å–∏
            if (isset($testCase['expected_empty_record'])) {
                if ($firstRecord['views'] === 0 && $firstRecord['cart_additions'] === 0 && $firstRecord['orders'] === 0) {
                    echo "   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n";
                } else {
                    echo "   ‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n";
                }
            }
        }
        
    } catch (Exception $e) {
        echo "‚ùå {$testCase['name']}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {$e->getMessage()}\n";
    }
}

echo "\n3Ô∏è‚É£ –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n";

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
$testAggregationData = [
    [
        'views' => 1000,
        'cart_additions' => 150,
        'orders' => 30,
        'conversion_view_to_cart' => 15.0,
        'conversion_cart_to_order' => 20.0,
        'conversion_overall' => 3.0
    ],
    [
        'views' => 500,
        'cart_additions' => 100,
        'orders' => 25,
        'conversion_view_to_cart' => 20.0,
        'conversion_cart_to_order' => 25.0,
        'conversion_overall' => 5.0
    ]
];

// –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ getFunnelData –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
try {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    $mockAPI = new class('test_client_id', 'test_api_key') extends OzonAnalyticsAPI {
        private $mockData;
        
        public function setMockData($data) {
            $this->mockData = $data;
        }
        
        public function getFunnelData($dateFrom, $dateTo, $filters = []) {
            return $this->mockData ?? [];
        }
    };
    
    $mockAPI->setMockData($testAggregationData);
    
    $aggregated = $mockAPI->getAggregatedFunnelData('2024-01-01', '2024-01-31');
    
    echo "‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n";
    echo "   - –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: " . $aggregated['total_views'] . "\n";
    echo "   - –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É: " . $aggregated['total_cart_additions'] . "\n";
    echo "   - –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: " . $aggregated['total_orders'] . "\n";
    echo "   - –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä—ã->–∫–æ—Ä–∑–∏–Ω–∞: " . $aggregated['avg_conversion_view_to_cart'] . "%\n";
    echo "   - –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –æ–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: " . $aggregated['calculated_conversion_overall'] . "%\n";
    echo "   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: " . $aggregated['records_count'] . "\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤
    $expectedTotalViews = 1500;
    $expectedTotalOrders = 55;
    $expectedOverallConversion = round(($expectedTotalOrders / $expectedTotalViews) * 100, 2);
    
    if ($aggregated['total_views'] === $expectedTotalViews && 
        $aggregated['total_orders'] === $expectedTotalOrders &&
        $aggregated['calculated_conversion_overall'] === $expectedOverallConversion) {
        echo "   ‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } else {
        echo "   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏\n";
    }
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: " . $e->getMessage() . "\n";
}

echo "\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π:\n";

$exceptionTests = [
    ['AUTHENTICATION_ERROR', 401, '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'],
    ['RATE_LIMIT_EXCEEDED', 429, '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'],
    ['INVALID_PARAMETERS', 400, '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'],
    ['API_UNAVAILABLE', 503, 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω']
];

foreach ($exceptionTests as $test) {
    try {
        $exception = new OzonAPIException($test[2], $test[1], $test[0]);
        
        echo "‚úÖ {$test[0]}:\n";
        echo "   - –°–æ–æ–±—â–µ–Ω–∏–µ: " . $exception->getMessage() . "\n";
        echo "   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è: " . ($exception->isCritical() ? '–î–∞' : '–ù–µ—Ç') . "\n";
        echo "   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: " . $exception->getRecommendation() . "\n";
        
    } catch (Exception $e) {
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è {$test[0]}: " . $e->getMessage() . "\n";
    }
}

echo "\n" . str_repeat("=", 60) . "\n";
echo "üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n\n";

echo "‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞:\n";
echo "   - –ú–µ—Ç–æ–¥ getFunnelData() —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n";
echo "   - –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ –≤–æ—Ä–æ–Ω–∫–∏\n";
echo "   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É ozon_funnel_data\n";
echo "   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º, —Ç–æ–≤–∞—Ä–∞–º –∏ –∫–∞–º–ø–∞–Ω–∏—è–º\n";
echo "   - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n";
echo "   - –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n";
echo "   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π\n\n";

echo "üéØ –ó–ê–î–ê–ß–ê 3 –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!\n";
echo str_repeat("=", 60) . "\n";

?>