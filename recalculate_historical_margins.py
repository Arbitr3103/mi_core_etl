#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import sys
import os
import logging
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db
from run_aggregation import aggregate_daily_metrics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class HistoricalMarginRecalculator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self):
        self.connection = None
        
    def setup_connection(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def get_dates_for_recalculation(self, start_date: str = None, end_date: str = None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞."""
        if not self.connection:
            return []
            
        try:
            cursor = self.connection.cursor()
            
            if start_date and end_date:
                # –ü–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                cursor.execute("""
                    SELECT DISTINCT metric_date 
                    FROM metrics_daily 
                    WHERE metric_date BETWEEN %s AND %s
                    ORDER BY metric_date
                """, (start_date, end_date))
            else:
                # –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("""
                    SELECT DISTINCT metric_date 
                    FROM metrics_daily 
                    ORDER BY metric_date
                """)
            
            dates = [row[0].strftime('%Y-%m-%d') for row in cursor.fetchall()]
            cursor.close()
            
            return dates
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {e}")
            return []
    
    def backup_existing_data(self, backup_table_name: str = "metrics_daily_backup"):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü–∞ –±—ç–∫–∞–ø–∞
            cursor.execute(f"""
                SELECT COUNT(*) 
                FROM information_schema.tables 
                WHERE table_schema = DATABASE() 
                AND table_name = '{backup_table_name}'
            """)
            
            table_exists = cursor.fetchone()[0] > 0
            
            if table_exists:
                logger.info(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {backup_table_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                cursor.execute(f"SELECT COUNT(*) FROM {backup_table_name}")
                backup_count = cursor.fetchone()[0]
                logger.info(f"   –ó–∞–ø–∏—Å–µ–π –≤ –±—ç–∫–∞–ø–µ: {backup_count}")
            else:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                cursor.execute(f"""
                    CREATE TABLE {backup_table_name} AS 
                    SELECT * FROM metrics_daily
                """)
                
                cursor.execute(f"SELECT COUNT(*) FROM {backup_table_name}")
                backup_count = cursor.fetchone()[0]
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_table_name}")
                logger.info(f"   –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {backup_count}")
            
            cursor.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def check_schema_readiness(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã –ë–î –∫ –Ω–æ–≤–æ–º—É —Ä–∞—Å—á–µ—Ç—É –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ margin_percent
            cursor.execute("""
                SELECT COLUMN_NAME 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = DATABASE() 
                    AND TABLE_NAME = 'metrics_daily' 
                    AND COLUMN_NAME = 'margin_percent'
            """)
            
            has_margin_percent = cursor.fetchone() is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
            cursor.execute("SHOW INDEX FROM fact_orders WHERE Key_name = 'idx_fact_orders_date_client'")
            has_orders_index = cursor.fetchone() is not None
            
            cursor.execute("SHOW INDEX FROM fact_transactions WHERE Key_name = 'idx_fact_transactions_order'")
            has_transactions_index = cursor.fetchone() is not None
            
            cursor.close()
            
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã:")
            logger.info(f"   - –ö–æ–ª–æ–Ω–∫–∞ margin_percent: {'‚úÖ' if has_margin_percent else '‚ùå'}")
            logger.info(f"   - –ò–Ω–¥–µ–∫—Å fact_orders: {'‚úÖ' if has_orders_index else '‚ùå'}")
            logger.info(f"   - –ò–Ω–¥–µ–∫—Å fact_transactions: {'‚úÖ' if has_transactions_index else '‚ùå'}")
            
            if not has_margin_percent:
                logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ margin_percent –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                logger.error("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: mysql -u root -p mi_core_db < add_margin_percent_column.sql")
                return False
            
            if not has_orders_index or not has_transactions_index:
                logger.warning("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã")
                logger.warning("   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–Ω–∏–∂–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã: {e}")
            return False
    
    def recalculate_date_range(self, dates: list, batch_size: int = 10):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–∞—Ç."""
        if not dates:
            logger.warning("‚ö†Ô∏è  –ù–µ—Ç –¥–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
            return True
            
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è {len(dates)} –¥–∞—Ç")
        logger.info(f"   –ü–µ—Ä–∏–æ–¥: {dates[0]} - {dates[-1]}")
        
        successful_recalculations = 0
        failed_recalculations = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã –±–∞—Ç—á–∞–º–∏
        for i in range(0, len(dates), batch_size):
            batch = dates[i:i + batch_size]
            
            logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i//batch_size + 1}: {len(batch)} –¥–∞—Ç")
            
            for date in batch:
                try:
                    logger.info(f"   –ü–µ—Ä–µ—Å—á–µ—Ç {date}...")
                    
                    start_time = datetime.now()
                    success = aggregate_daily_metrics(self.connection, date)
                    end_time = datetime.now()
                    
                    execution_time = (end_time - start_time).total_seconds()
                    
                    if success:
                        successful_recalculations += 1
                        logger.info(f"     ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {execution_time:.2f}s")
                    else:
                        failed_recalculations += 1
                        logger.error(f"     ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
                        
                except Exception as e:
                    failed_recalculations += 1
                    logger.error(f"     ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ {date}: {e}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if i + batch_size < len(dates):
                logger.info("   ‚è∏Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
                import time
                time.sleep(2)
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞:")
        logger.info(f"   - –£—Å–ø–µ—à–Ω–æ: {successful_recalculations}")
        logger.info(f"   - –° –æ—à–∏–±–∫–∞–º–∏: {failed_recalculations}")
        logger.info(f"   - –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_recalculations/(successful_recalculations+failed_recalculations))*100:.1f}%")
        
        return failed_recalculations == 0
    
    def validate_recalculation_results(self, sample_dates: list = None):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞."""
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            if not sample_dates:
                # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                cursor.execute("""
                    SELECT DISTINCT metric_date 
                    FROM metrics_daily 
                    WHERE margin_percent IS NOT NULL
                    ORDER BY RAND() 
                    LIMIT 3
                """)
                sample_dates = [row['metric_date'].strftime('%Y-%m-%d') for row in cursor.fetchall()]
            
            logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
            logger.info(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –¥–∞—Ç—ã: {', '.join(sample_dates)}")
            
            validation_passed = True
            
            for date in sample_dates:
                cursor.execute("""
                    SELECT 
                        COUNT(*) as total_records,
                        COUNT(CASE WHEN margin_percent IS NOT NULL THEN 1 END) as records_with_margin,
                        AVG(margin_percent) as avg_margin,
                        SUM(revenue_sum) as total_revenue,
                        SUM(profit_sum) as total_profit
                    FROM metrics_daily 
                    WHERE metric_date = %s
                """, (date,))
                
                result = cursor.fetchone()
                
                logger.info(f"   {date}:")
                logger.info(f"     - –ó–∞–ø–∏—Å–µ–π: {result['total_records']}")
                logger.info(f"     - –° –º–∞—Ä–∂–æ–π: {result['records_with_margin']}")
                logger.info(f"     - –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: {result['avg_margin']:.2f}%" if result['avg_margin'] else "     - –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: N/A")
                logger.info(f"     - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {result['total_revenue']:.2f}" if result['total_revenue'] else "     - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: 0")
                logger.info(f"     - –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {result['total_profit']:.2f}" if result['total_profit'] else "     - –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: 0")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
                if result['total_records'] == 0:
                    logger.warning(f"     ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}")
                elif result['records_with_margin'] == 0:
                    logger.warning(f"     ‚ö†Ô∏è  –ù–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –º–∞—Ä–∂–∏ –∑–∞ {date}")
                    validation_passed = False
                elif result['avg_margin'] and (result['avg_margin'] < -100 or result['avg_margin'] > 100):
                    logger.warning(f"     ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞: {result['avg_margin']:.2f}%")
                    validation_passed = False
                else:
                    logger.info(f"     ‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            cursor.close()
            
            if validation_passed:
                logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            
            return validation_passed
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def run_full_recalculation(self, start_date: str = None, end_date: str = None, 
                              create_backup: bool = True, batch_size: int = 10):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Å—á–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("=" * 60)
        
        if not self.setup_connection():
            return False
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã
            if not self.check_schema_readiness():
                return False
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if create_backup:
                if not self.backup_existing_data():
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
                    return False
            
            # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            dates = self.get_dates_for_recalculation(start_date, end_date)
            
            if not dates:
                logger.warning("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
                return True
            
            # 4. –ü–µ—Ä–µ—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            success = self.recalculate_date_range(dates, batch_size)
            
            if not success:
                logger.error("‚ùå –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
                return False
            
            # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            validation_success = self.validate_recalculation_results()
            
            logger.info("=" * 60)
            if success and validation_success:
                logger.info("üéâ –ü–ï–†–ï–°–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
                logger.info("‚úÖ –í—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            else:
                logger.error("‚ùå –ü–ï–†–ï–°–ß–ï–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò")
                logger.error("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
            
            return success and validation_success
            
        finally:
            if self.connection:
                self.connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–µ—Ä–µ—Å—á–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏')
    parser.add_argument('--start-date', help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    parser.add_argument('--end-date', help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)')
    parser.add_argument('--no-backup', action='store_true', help='–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
    parser.add_argument('--batch-size', type=int, default=10, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    args = parser.parse_args()
    
    recalculator = HistoricalMarginRecalculator()
    success = recalculator.run_full_recalculation(
        start_date=args.start_date,
        end_date=args.end_date,
        create_backup=not args.no_backup,
        batch_size=args.batch_size
    )
    
    if success:
        exit(0)
    else:
        exit(1)


if __name__ == "__main__":
    main()