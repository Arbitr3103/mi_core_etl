#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Ozon
–ü–µ—Ä–∏–æ–¥: 29.09.2025 - 05.10.2025

–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:
- API –∑–∞–ø—Ä–æ—Å—ã –∫ Ozon
- –û–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
- –í–∞–ª–∏–¥–∞—Ü–∏—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î
"""

import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any

class OzonAPISimulator:
    def __init__(self):
        self.ozon_config = {
            'client_id': 'test_client_id',
            'api_key': 'test_api_key',
            'base_url': 'https://api-seller.ozon.ru'
        }
        
        self.processed_data = {
            'funnel': [],
            'demographics': [],
            'campaigns': []
        }
        
    def log(self, message: str, level: str = 'INFO'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        colors = {
            'INFO': '\033[0m',      # Default
            'SUCCESS': '\033[32m',  # Green
            'WARNING': '\033[33m',  # Yellow
            'ERROR': '\033[31m'     # Red
        }
        
        color = colors.get(level, colors['INFO'])
        reset = '\033[0m'
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"{color}[{timestamp}] {message}{reset}")
    
    def simulate_ozon_api_call(self, endpoint: str, data: Dict) -> Dict:
        """–ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ API Ozon"""
        self.log(f"üîÑ API –∑–∞–ø—Ä–æ—Å: {endpoint}", 'INFO')
        self.log(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {data}", 'INFO')
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
        time.sleep(0.3)
        
        if endpoint == '/v1/analytics/funnel':
            return self.generate_realistic_funnel_data(data)
        elif endpoint == '/v1/analytics/demographics':
            return self.generate_realistic_demographics_data(data)
        elif endpoint == '/v1/analytics/campaigns':
            return self.generate_realistic_campaigns_data(data)
        else:
            return {'error': 'Unknown endpoint'}
    
    def generate_realistic_funnel_data(self, request_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        self.log("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂...", 'INFO')
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        products_data = [
            {
                'product_id': 'ELECTRONICS_SMARTPHONE_001',
                'campaign_id': 'PROMO_ELECTRONICS_Q4',
                'views': 15420,
                'cart_additions': 1850,  # ~12% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                'orders': 463           # ~25% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            },
            {
                'product_id': 'HOME_KITCHEN_APPLIANCE_002',
                'campaign_id': 'PROMO_HOME_AUTUMN',
                'views': 8750,
                'cart_additions': 1225,  # ~14% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                'orders': 294           # ~24% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            },
            {
                'product_id': 'FASHION_WINTER_JACKET_003',
                'campaign_id': 'PROMO_FASHION_WINTER',
                'views': 12300,
                'cart_additions': 1476,  # ~12% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                'orders': 369           # ~25% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            },
            {
                'product_id': 'BOOKS_BESTSELLER_004',
                'campaign_id': 'PROMO_BOOKS_EDUCATION',
                'views': 5680,
                'cart_additions': 852,   # ~15% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                'orders': 213           # ~25% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            },
            {
                'product_id': 'SPORTS_FITNESS_EQUIPMENT_005',
                'campaign_id': 'PROMO_SPORTS_HEALTH',
                'views': 9240,
                'cart_additions': 1109,  # ~12% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
                'orders': 277           # ~25% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            }
        ]
        
        return {
            'success': True,
            'data': products_data,
            'metadata': {
                'total_products': len(products_data),
                'date_range': f"{request_data['date_from']} - {request_data['date_to']}",
                'api_version': 'v1'
            }
        }
    
    def generate_realistic_demographics_data(self, request_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...", 'INFO')
        
        demographics_data = [
            # –ú–æ—Å–∫–≤–∞
            {
                'age_group': '25-34',
                'gender': 'male',
                'region': 'Moscow',
                'orders_count': 342,
                'revenue': 171000.00
            },
            {
                'age_group': '25-34',
                'gender': 'female',
                'region': 'Moscow',
                'orders_count': 398,
                'revenue': 199000.00
            },
            {
                'age_group': '35-44',
                'gender': 'male',
                'region': 'Moscow',
                'orders_count': 287,
                'revenue': 143500.00
            },
            {
                'age_group': '35-44',
                'gender': 'female',
                'region': 'Moscow',
                'orders_count': 324,
                'revenue': 162000.00
            },
            
            # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
            {
                'age_group': '25-34',
                'gender': 'male',
                'region': 'Saint Petersburg',
                'orders_count': 198,
                'revenue': 99000.00
            },
            {
                'age_group': '25-34',
                'gender': 'female',
                'region': 'Saint Petersburg',
                'orders_count': 234,
                'revenue': 117000.00
            },
            {
                'age_group': '35-44',
                'gender': 'male',
                'region': 'Saint Petersburg',
                'orders_count': 167,
                'revenue': 83500.00
            },
            {
                'age_group': '35-44',
                'gender': 'female',
                'region': 'Saint Petersburg',
                'orders_count': 189,
                'revenue': 94500.00
            },
            
            # –î—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
            {
                'age_group': '25-34',
                'gender': 'male',
                'region': 'Novosibirsk',
                'orders_count': 89,
                'revenue': 44500.00
            },
            {
                'age_group': '35-44',
                'gender': 'female',
                'region': 'Yekaterinburg',
                'orders_count': 76,
                'revenue': 38000.00
            },
            {
                'age_group': '45-54',
                'gender': 'male',
                'region': 'Kazan',
                'orders_count': 54,
                'revenue': 27000.00
            },
            {
                'age_group': '18-24',
                'gender': 'female',
                'region': 'Rostov-on-Don',
                'orders_count': 43,
                'revenue': 21500.00
            }
        ]
        
        return {
            'success': True,
            'data': demographics_data,
            'metadata': {
                'total_segments': len(demographics_data),
                'regions_count': len(set(item['region'] for item in demographics_data)),
                'date_range': f"{request_data['date_from']} - {request_data['date_to']}"
            }
        }
    
    def generate_realistic_campaigns_data(self, request_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
        self.log("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π...", 'INFO')
        
        campaigns_data = [
            {
                'campaign_id': 'PROMO_ELECTRONICS_Q4',
                'campaign_name': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ - –û—Å–µ–Ω–Ω–∏–µ —Å–∫–∏–¥–∫–∏',
                'impressions': 245000,
                'clicks': 12250,      # CTR 5%
                'spend': 24500.00,    # CPC 2.00
                'orders': 463,        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è 3.78%
                'revenue': 92600.00   # ROAS 3.78
            },
            {
                'campaign_id': 'PROMO_HOME_AUTUMN',
                'campaign_name': '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ - –£—é—Ç–Ω–∞—è –æ—Å–µ–Ω—å',
                'impressions': 180000,
                'clicks': 9000,       # CTR 5%
                'spend': 18000.00,    # CPC 2.00
                'orders': 294,        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è 3.27%
                'revenue': 58800.00   # ROAS 3.27
            },
            {
                'campaign_id': 'PROMO_FASHION_WINTER',
                'campaign_name': '–ú–æ–¥–∞ - –ó–∏–º–Ω—è—è –∫–æ–ª–ª–µ–∫—Ü–∏—è',
                'impressions': 320000,
                'clicks': 16000,      # CTR 5%
                'spend': 32000.00,    # CPC 2.00
                'orders': 369,        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è 2.31%
                'revenue': 73800.00   # ROAS 2.31
            },
            {
                'campaign_id': 'PROMO_BOOKS_EDUCATION',
                'campaign_name': '–ö–Ω–∏–≥–∏ - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ',
                'impressions': 95000,
                'clicks': 4750,       # CTR 5%
                'spend': 9500.00,     # CPC 2.00
                'orders': 213,        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è 4.48%
                'revenue': 21300.00   # ROAS 2.24
            },
            {
                'campaign_id': 'PROMO_SPORTS_HEALTH',
                'campaign_name': '–°–ø–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ - –ê–∫—Ç–∏–≤–Ω–∞—è –æ—Å–µ–Ω—å',
                'impressions': 155000,
                'clicks': 7750,       # CTR 5%
                'spend': 15500.00,    # CPC 2.00
                'orders': 277,        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è 3.57%
                'revenue': 55400.00   # ROAS 3.57
            }
        ]
        
        return {
            'success': True,
            'data': campaigns_data,
            'metadata': {
                'total_campaigns': len(campaigns_data),
                'date_range': f"{request_data['date_from']} - {request_data['date_to']}",
                'total_spend': sum(item['spend'] for item in campaigns_data),
                'total_revenue': sum(item['revenue'] for item in campaigns_data)
            }
        }
    
    def process_funnel_data(self, api_response: Dict, date_from: str, date_to: str) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        processed_data = []
        
        self.log("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂...", 'INFO')
        
        for item in api_response.get('data', []):
            views = max(0, int(item.get('views', 0)))
            cart_additions = max(0, int(item.get('cart_additions', 0)))
            orders = max(0, int(item.get('orders', 0)))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            original_cart = cart_additions
            original_orders = orders
            
            if cart_additions > views and views > 0:
                cart_additions = views
                self.log(f"‚ö†Ô∏è  –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è {item.get('product_id')}: {original_cart} ‚Üí {cart_additions}", 'WARNING')
            
            if orders > cart_additions and cart_additions > 0:
                orders = cart_additions
                self.log(f"‚ö†Ô∏è  –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–∫–∞–∑—ã –¥–ª—è {item.get('product_id')}: {original_orders} ‚Üí {orders}", 'WARNING')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            conv_view_to_cart = round((cart_additions / views) * 100, 2) if views > 0 else 0.0
            conv_cart_to_order = round((orders / cart_additions) * 100, 2) if cart_additions > 0 else 0.0
            conv_overall = round((orders / views) * 100, 2) if views > 0 else 0.0
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –º–∞–∫—Å–∏–º—É–º–æ–º 100%
            conv_view_to_cart = min(100.0, conv_view_to_cart)
            conv_cart_to_order = min(100.0, conv_cart_to_order)
            conv_overall = min(100.0, conv_overall)
            
            processed_record = {
                'date_from': date_from,
                'date_to': date_to,
                'product_id': item.get('product_id'),
                'campaign_id': item.get('campaign_id'),
                'views': views,
                'cart_additions': cart_additions,
                'orders': orders,
                'conversion_view_to_cart': conv_view_to_cart,
                'conversion_cart_to_order': conv_cart_to_order,
                'conversion_overall': conv_overall,
                'cached_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            processed_data.append(processed_record)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            self.log(f"   üì¶ {item.get('product_id')}: {views:,} ‚Üí {cart_additions:,} ‚Üí {orders:,} (–∫–æ–Ω–≤–µ—Ä—Å–∏—è: {conv_overall:.2f}%)", 'INFO')
        
        return processed_data
    
    def process_demographics_data(self, api_response: Dict, date_from: str, date_to: str) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        processed_data = []
        
        self.log("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...", 'INFO')
        
        for item in api_response.get('data', []):
            orders_count = max(0, int(item.get('orders_count', 0)))
            revenue = max(0.0, float(item.get('revenue', 0.0)))
            
            processed_record = {
                'date_from': date_from,
                'date_to': date_to,
                'age_group': item.get('age_group'),
                'gender': item.get('gender'),
                'region': item.get('region'),
                'orders_count': orders_count,
                'revenue': revenue,
                'cached_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            processed_data.append(processed_record)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
            avg_order_value = revenue / orders_count if orders_count > 0 else 0
            
            self.log(f"   üë§ {item.get('age_group')}, {item.get('gender')}, {item.get('region')}: {orders_count:,} –∑–∞–∫–∞–∑–æ–≤, {revenue:,.0f} —Ä—É–±. (—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:.0f} —Ä—É–±.)", 'INFO')
        
        return processed_data
    
    def process_campaigns_data(self, api_response: Dict, date_from: str, date_to: str) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
        processed_data = []
        
        self.log("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π...", 'INFO')
        
        for item in api_response.get('data', []):
            impressions = int(item.get('impressions', 0))
            clicks = int(item.get('clicks', 0))
            spend = float(item.get('spend', 0.0))
            orders = int(item.get('orders', 0))
            revenue = float(item.get('revenue', 0.0))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            ctr = round((clicks / impressions) * 100, 2) if impressions > 0 else 0.0
            cpc = round(spend / clicks, 2) if clicks > 0 else 0.0
            roas = round(revenue / spend, 2) if spend > 0 else 0.0
            
            processed_record = {
                'campaign_id': item.get('campaign_id'),
                'campaign_name': item.get('campaign_name'),
                'date_from': date_from,
                'date_to': date_to,
                'impressions': impressions,
                'clicks': clicks,
                'spend': spend,
                'orders': orders,
                'revenue': revenue,
                'ctr': ctr,
                'cpc': cpc,
                'roas': roas,
                'cached_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            processed_data.append(processed_record)
            
            self.log(f"   üìä {item.get('campaign_name')}: {impressions:,} –ø–æ–∫–∞–∑–æ–≤ ‚Üí {clicks:,} –∫–ª–∏–∫–æ–≤ ‚Üí {orders:,} –∑–∞–∫–∞–∑–æ–≤", 'INFO')
            self.log(f"      CTR: {ctr:.2f}%, CPC: {cpc:.2f} —Ä—É–±., ROAS: {roas:.2f}", 'INFO')
        
        return processed_data
    
    def validate_processed_data(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", 'INFO')
        
        validation_errors = 0
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏
        for record in self.processed_data['funnel']:
            if record['cart_additions'] > record['views']:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É > –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è {record['product_id']}", 'ERROR')
                validation_errors += 1
            
            if record['orders'] > record['cart_additions']:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏: –∑–∞–∫–∞–∑—ã > –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è {record['product_id']}", 'ERROR')
                validation_errors += 1
            
            if record['conversion_overall'] > 100:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏: –æ–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è > 100% –¥–ª—è {record['product_id']}", 'ERROR')
                validation_errors += 1
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        for record in self.processed_data['demographics']:
            if record['orders_count'] < 0 or record['revenue'] < 0:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {record['age_group']}, {record['gender']}, {record['region']}", 'ERROR')
                validation_errors += 1
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–π
        for record in self.processed_data['campaigns']:
            if record['clicks'] > record['impressions']:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: –∫–ª–∏–∫–∏ > –ø–æ–∫–∞–∑–æ–≤ –¥–ª—è {record['campaign_id']}", 'ERROR')
                validation_errors += 1
            
            if record['ctr'] > 100:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: CTR > 100% –¥–ª—è {record['campaign_id']}", 'ERROR')
                validation_errors += 1
        
        if validation_errors == 0:
            self.log("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é", 'SUCCESS')
            return True
        else:
            self.log(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {validation_errors} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 'ERROR')
            return False
    
    def generate_sql_queries(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        self.log("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î...", 'INFO')
        
        sql_queries = []
        
        # SQL –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂
        if self.processed_data['funnel']:
            funnel_sql = """
INSERT INTO ozon_funnel_data 
(date_from, date_to, product_id, campaign_id, views, cart_additions, orders,
 conversion_view_to_cart, conversion_cart_to_order, conversion_overall, cached_at)
VALUES """
            
            values = []
            for record in self.processed_data['funnel']:
                values.append(f"('{record['date_from']}', '{record['date_to']}', '{record['product_id']}', "
                            f"'{record['campaign_id']}', {record['views']}, {record['cart_additions']}, "
                            f"{record['orders']}, {record['conversion_view_to_cart']}, "
                            f"{record['conversion_cart_to_order']}, {record['conversion_overall']}, "
                            f"'{record['cached_at']}')")
            
            funnel_sql += ",\n".join(values)
            funnel_sql += "\nON DUPLICATE KEY UPDATE views = VALUES(views), cart_additions = VALUES(cart_additions), orders = VALUES(orders);"
            sql_queries.append(("–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂", funnel_sql))
        
        # SQL –¥–ª—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏
        if self.processed_data['demographics']:
            demo_sql = """
INSERT INTO ozon_demographics 
(date_from, date_to, age_group, gender, region, orders_count, revenue, cached_at)
VALUES """
            
            values = []
            for record in self.processed_data['demographics']:
                values.append(f"('{record['date_from']}', '{record['date_to']}', '{record['age_group']}', "
                            f"'{record['gender']}', '{record['region']}', {record['orders_count']}, "
                            f"{record['revenue']}, '{record['cached_at']}')")
            
            demo_sql += ",\n".join(values)
            demo_sql += "\nON DUPLICATE KEY UPDATE orders_count = VALUES(orders_count), revenue = VALUES(revenue);"
            sql_queries.append(("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", demo_sql))
        
        # SQL –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–π
        if self.processed_data['campaigns']:
            campaigns_sql = """
INSERT INTO ozon_campaigns 
(campaign_id, campaign_name, date_from, date_to, impressions, clicks, spend,
 orders, revenue, ctr, cpc, roas, cached_at)
VALUES """
            
            values = []
            for record in self.processed_data['campaigns']:
                values.append(f"('{record['campaign_id']}', '{record['campaign_name']}', "
                            f"'{record['date_from']}', '{record['date_to']}', {record['impressions']}, "
                            f"{record['clicks']}, {record['spend']}, {record['orders']}, "
                            f"{record['revenue']}, {record['ctr']}, {record['cpc']}, "
                            f"{record['roas']}, '{record['cached_at']}')")
            
            campaigns_sql += ",\n".join(values)
            campaigns_sql += "\nON DUPLICATE KEY UPDATE impressions = VALUES(impressions), clicks = VALUES(clicks), spend = VALUES(spend);"
            sql_queries.append(("–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", campaigns_sql))
        
        return sql_queries
    
    def print_data_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        self.log("\nüìä –°–í–û–î–ö–ê –ü–û –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ú –î–ê–ù–ù–´–ú", 'INFO')
        self.log("=" * 50, 'INFO')
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ
        if self.processed_data['funnel']:
            total_views = sum(r['views'] for r in self.processed_data['funnel'])
            total_cart = sum(r['cart_additions'] for r in self.processed_data['funnel'])
            total_orders = sum(r['orders'] for r in self.processed_data['funnel'])
            avg_conversion = sum(r['conversion_overall'] for r in self.processed_data['funnel']) / len(self.processed_data['funnel'])
            
            self.log(f"üõí –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ ({len(self.processed_data['funnel'])} —Ç–æ–≤–∞—Ä–æ–≤):", 'INFO')
            self.log(f"   - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {total_views:,}", 'INFO')
            self.log(f"   - –í –∫–æ—Ä–∑–∏–Ω—É: {total_cart:,} ({(total_cart/total_views*100):.2f}%)", 'INFO')
            self.log(f"   - –ó–∞–∫–∞–∑—ã: {total_orders:,} ({(total_orders/total_views*100):.2f}%)", 'INFO')
            self.log(f"   - –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {avg_conversion:.2f}%", 'INFO')
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏
        if self.processed_data['demographics']:
            total_demo_orders = sum(r['orders_count'] for r in self.processed_data['demographics'])
            total_revenue = sum(r['revenue'] for r in self.processed_data['demographics'])
            avg_order_value = total_revenue / total_demo_orders if total_demo_orders > 0 else 0
            regions = set(r['region'] for r in self.processed_data['demographics'])
            
            self.log(f"\nüë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ({len(self.processed_data['demographics'])} —Å–µ–≥–º–µ–Ω—Ç–æ–≤):", 'INFO')
            self.log(f"   - –ó–∞–∫–∞–∑—ã: {total_demo_orders:,}", 'INFO')
            self.log(f"   - –í—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Ä—É–±.", 'INFO')
            self.log(f"   - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order_value:.0f} —Ä—É–±.", 'INFO')
            self.log(f"   - –†–µ–≥–∏–æ–Ω—ã: {len(regions)} ({', '.join(sorted(regions))})", 'INFO')
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        if self.processed_data['campaigns']:
            total_impressions = sum(r['impressions'] for r in self.processed_data['campaigns'])
            total_clicks = sum(r['clicks'] for r in self.processed_data['campaigns'])
            total_spend = sum(r['spend'] for r in self.processed_data['campaigns'])
            total_campaign_revenue = sum(r['revenue'] for r in self.processed_data['campaigns'])
            avg_ctr = sum(r['ctr'] for r in self.processed_data['campaigns']) / len(self.processed_data['campaigns'])
            avg_roas = sum(r['roas'] for r in self.processed_data['campaigns']) / len(self.processed_data['campaigns'])
            
            self.log(f"\nüìà –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ ({len(self.processed_data['campaigns'])} –∫–∞–º–ø–∞–Ω–∏–π):", 'INFO')
            self.log(f"   - –ü–æ–∫–∞–∑—ã: {total_impressions:,}", 'INFO')
            self.log(f"   - –ö–ª–∏–∫–∏: {total_clicks:,} (CTR: {(total_clicks/total_impressions*100):.2f}%)", 'INFO')
            self.log(f"   - –†–∞—Å—Ö–æ–¥—ã: {total_spend:,.0f} —Ä—É–±.", 'INFO')
            self.log(f"   - –î–æ—Ö–æ–¥—ã: {total_campaign_revenue:,.0f} —Ä—É–±.", 'INFO')
            self.log(f"   - –°—Ä–µ–¥–Ω–∏–π CTR: {avg_ctr:.2f}%", 'INFO')
            self.log(f"   - –°—Ä–µ–¥–Ω–∏–π ROAS: {avg_roas:.2f}", 'INFO')
    
    def run_simulation(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.log("üöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• OZON ANALYTICS", 'INFO')
        self.log("–ü–µ—Ä–∏–æ–¥: 29.09.2025 - 05.10.2025", 'INFO')
        self.log("=" * 60, 'INFO')
        
        date_from = '2025-09-29'
        date_to = '2025-10-05'
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API (–∏–º–∏—Ç–∞—Ü–∏—è)
        self.log("\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Ozon...", 'INFO')
        
        # –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂
        self.log("\nüìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂:", 'INFO')
        funnel_response = self.simulate_ozon_api_call('/v1/analytics/funnel', {
            'date_from': date_from,
            'date_to': date_to
        })
        
        if funnel_response.get('success'):
            self.processed_data['funnel'] = self.process_funnel_data(funnel_response, date_from, date_to)
        
        # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.log("\nüë• –ó–∞–ø—Ä–æ—Å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", 'INFO')
        demo_response = self.simulate_ozon_api_call('/v1/analytics/demographics', {
            'date_from': date_from,
            'date_to': date_to
        })
        
        if demo_response.get('success'):
            self.processed_data['demographics'] = self.process_demographics_data(demo_response, date_from, date_to)
        
        # –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
        self.log("\nüìà –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π:", 'INFO')
        campaigns_response = self.simulate_ozon_api_call('/v1/analytics/campaigns', {
            'date_from': date_from,
            'date_to': date_to
        })
        
        if campaigns_response.get('success'):
            self.processed_data['campaigns'] = self.process_campaigns_data(campaigns_response, date_from, date_to)
        
        # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.log("\n2Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", 'INFO')
        validation_success = self.validate_processed_data()
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
        self.log("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤...", 'INFO')
        sql_queries = self.generate_sql_queries()
        
        for query_name, query in sql_queries:
            self.log(f"‚úÖ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è '{query_name}' –≥–æ—Ç–æ–≤ ({len(query)} —Å–∏–º–≤–æ–ª–æ–≤)", 'SUCCESS')
        
        # 4. –°–≤–æ–¥–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
        self.print_data_summary()
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª
        self.log("\n4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª...", 'INFO')
        with open('ozon_data_insert_queries.sql', 'w', encoding='utf-8') as f:
            f.write("-- SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Ozon Analytics\n")
            f.write(f"-- –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}\n")
            f.write(f"-- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            for query_name, query in sql_queries:
                f.write(f"-- {query_name}\n")
                f.write(query)
                f.write("\n\n")
        
        self.log("‚úÖ SQL –∑–∞–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'ozon_data_insert_queries.sql'", 'SUCCESS')
        
        self.log("\n" + "=" * 60, 'INFO')
        if validation_success:
            self.log("üéâ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", 'SUCCESS')
            self.log("–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –ë–î.", 'SUCCESS')
        else:
            self.log("‚ùå –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò!", 'ERROR')
            self.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.", 'ERROR')
        
        return validation_success

if __name__ == "__main__":
    simulator = OzonAPISimulator()
    success = simulator.run_simulation()
    exit(0 if success else 1)