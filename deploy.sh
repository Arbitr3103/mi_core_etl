#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
# –ê–≤—Ç–æ—Ä: –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p logs
    mkdir -p reports
    mkdir -p ssl
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -f .env ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env..."
        cat > .env << EOF
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
MYSQL_ROOT_PASSWORD=replenishment_root_password_$(date +%s)
MYSQL_PASSWORD=replenishment_password_$(date +%s)
MYSQL_USER=replenishment_user
MYSQL_DATABASE=replenishment_db

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
APP_ENV=production
DEBUG=false
LOG_LEVEL=INFO

# API
API_HOST=0.0.0.0
API_PORT=8000

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECRET_KEY=$(openssl rand -hex 32)
EOF
        print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
    else
        print_warning "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
build_images() {
    print_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    docker-compose build --no-cache
    
    print_success "Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose down --remove-orphans
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    docker-compose up -d
    
    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ MySQL
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ MySQL..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if docker-compose exec -T mysql mysqladmin ping -h localhost --silent; then
            break
        fi
        sleep 2
        timeout=$((timeout-2))
    done
    
    if [ $timeout -le 0 ]; then
        print_error "MySQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
        exit 1
    fi
    
    print_success "MySQL –∑–∞–ø—É—â–µ–Ω"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if curl -f http://localhost:8000/api/health &> /dev/null; then
            break
        fi
        sleep 2
        timeout=$((timeout-2))
    done
    
    if [ $timeout -le 0 ]; then
        print_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
        exit 1
    fi
    
    print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
initialize_data() {
    print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö..."
    
    # –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # docker-compose exec replenishment_app python3 replenishment_orchestrator.py --mode quick
    
    print_success "–î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
show_deployment_info() {
    print_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    echo
    print_info "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
    echo "  üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000"
    echo "  üîç API –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:8000/api/health"
    echo "  üìä API —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: http://localhost:8000/api/recommendations"
    echo "  üö® API –∞–ª–µ—Ä—Ç–æ–≤: http://localhost:8000/api/alerts"
    echo
    print_info "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    echo "  üìù –õ–æ–≥–∏: ./logs/"
    echo "  üìä –û—Ç—á–µ—Ç—ã: ./reports/"
    echo
    print_info "üê≥ Docker –∫–æ–º–∞–Ω–¥—ã:"
    echo "  üìä –°—Ç–∞—Ç—É—Å: docker-compose ps"
    echo "  üìù –õ–æ–≥–∏: docker-compose logs -f"
    echo "  ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
    echo "  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo
    print_info "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "  üìã –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: docker-compose exec replenishment_app python3 replenishment_orchestrator.py --mode full"
    echo "  ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: docker-compose exec replenishment_app python3 replenishment_orchestrator.py --mode quick"
    echo "  üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞: docker-compose exec replenishment_app python3 replenishment_orchestrator.py --mode export --export-file report.csv"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞"
    echo "=" * 50
    
    check_dependencies
    create_directories
    setup_environment
    build_images
    start_services
    check_health
    initialize_data
    show_deployment_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-deploy}" in
    "deploy")
        main
        ;;
    "stop")
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose down
        print_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        ;;
    "restart")
        print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose restart
        print_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
        ;;
    "logs")
        docker-compose logs -f
        ;;
    "status")
        docker-compose ps
        ;;
    "clean")
        print_warning "–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö..."
        read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            docker-compose down -v --remove-orphans
            docker system prune -f
            print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        else
            print_info "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        fi
        ;;
    "help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  deploy   - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
        echo "  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        echo "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  clean    - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –¥–∞–Ω–Ω—ã–µ"
        echo "  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac