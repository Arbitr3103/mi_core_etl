#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ Ozon.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import request_products_report, get_report_by_code, get_products_from_api

def test_request_products_report():
    """–¢–µ—Å—Ç –≠—Ç–∞–ø–∞ 1: –ó–∞–∫–∞–∑ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º."""
    print("=== –¢–µ—Å—Ç –≠—Ç–∞–ø–∞ 1: –ó–∞–∫–∞–∑ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º ===")
    
    try:
        report_code = request_products_report()
        print(f"‚úÖ –û—Ç—á–µ—Ç –∑–∞–∫–∞–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"–ö–æ–¥ –æ—Ç—á–µ—Ç–∞: {report_code}")
        return report_code
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def test_get_report_by_code(report_code):
    """–¢–µ—Å—Ç –≠—Ç–∞–ø–∞ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print(f"\n=== –¢–µ—Å—Ç –≠—Ç–∞–ø–∞ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ {report_code} ===")
    
    if not report_code:
        print("‚ùå –ù–µ—Ç –∫–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return None
    
    try:
        csv_content = get_report_by_code(report_code)
        print(f"‚úÖ –û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"–†–∞–∑–º–µ—Ä CSV: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("\n–ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ CSV:")
        print("-" * 50)
        print(csv_content[:1000])
        print("-" * 50)
        return csv_content
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def test_full_products_api():
    """–¢–µ—Å—Ç –≠—Ç–∞–ø–∞ 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API."""
    print("\n=== –¢–µ—Å—Ç –≠—Ç–∞–ø–∞ 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ ===")
    
    try:
        products = get_products_from_api()
        print(f"‚úÖ –¢–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if products:
            print("\n–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
            sample_product = products[0]
            for key, value in sample_product.items():
                print(f"  {key}: {value}")
        
        return products
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return None

def run_all_new_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ Ozon\n")
    
    # –¢–µ—Å—Ç 1: –ó–∞–∫–∞–∑ –æ—Ç—á–µ—Ç–∞
    report_code = test_request_products_report()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª)
    csv_content = None
    if report_code:
        csv_content = test_get_report_by_code(report_code)
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤)
    products = test_full_products_api()
    
    if products:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    run_all_new_tests()
