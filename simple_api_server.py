#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π http.server –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import sys
import os
import json
import logging
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from replenishment_recommender import ReplenishmentRecommender
from alert_manager import AlertManager
from reporting_engine import ReportingEngine
from replenishment_orchestrator import ReplenishmentOrchestrator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ReplenishmentAPIHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è API —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞)
    recommender = None
    alert_manager = None
    reporting_engine = None
    orchestrator = None
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤."""
        try:
            parsed_url = urlparse(self.path)
            path = parsed_url.path
            query_params = parse_qs(parsed_url.query)
            
            if path == '/':
                self._serve_web_interface()
            elif path == '/api/health':
                self._handle_health_check()
            elif path == '/api/recommendations':
                self._handle_get_recommendations(query_params)
            elif path == '/api/alerts':
                self._handle_get_alerts(query_params)
            elif path == '/api/reports/comprehensive':
                self._handle_get_comprehensive_report(query_params)
            elif path.startswith('/api/recommendations/'):
                product_id = path.split('/')[-1]
                self._handle_get_product_recommendation(product_id)
            else:
                self._send_error(404, '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GET –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_error(500, str(e))
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤."""
        try:
            parsed_url = urlparse(self.path)
            path = parsed_url.path
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            post_data = self.rfile.read(content_length).decode('utf-8') if content_length > 0 else '{}'
            
            try:
                request_data = json.loads(post_data)
            except json.JSONDecodeError:
                request_data = {}
            
            if path == '/api/analysis/run':
                self._handle_run_analysis(request_data)
            elif path.startswith('/api/alerts/') and path.endswith('/acknowledge'):
                alert_id = path.split('/')[-2]
                self._handle_acknowledge_alert(alert_id, request_data)
            else:
                self._send_error(404, '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self._send_error(500, str(e))
    
    def _serve_web_interface(self):
        """–û—Ç–¥–∞—á–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        html_content = """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                         color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                .card { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; 
                       box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .btn { background: #007bff; color: white; padding: 10px 20px; border: none; 
                      border-radius: 5px; cursor: pointer; margin: 5px; }
                .btn:hover { background: #0056b3; }
                .btn-success { background: #28a745; }
                .btn-warning { background: #ffc107; color: #212529; }
                .metrics { display: flex; flex-wrap: wrap; gap: 20px; }
                .metric { background: #f8f9fa; padding: 15px; border-radius: 5px; min-width: 150px; }
                .metric-value { font-size: 24px; font-weight: bold; color: #007bff; }
                .table { width: 100%; border-collapse: collapse; margin-top: 10px; }
                .table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                .table th { background-color: #f8f9fa; }
                .critical { color: #dc3545; font-weight: bold; }
                .high { color: #fd7e14; font-weight: bold; }
                .loading { display: none; text-align: center; padding: 20px; }
                .error { color: #dc3545; background: #f8d7da; padding: 10px; border-radius: 5px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üì¶ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞</h1>
                    <p>–ü—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏</p>
                </div>
                
                <div class="card">
                    <h2>üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
                    <button class="btn" onclick="testAPI()">üîç –¢–µ—Å—Ç API</button>
                    <button class="btn btn-success" onclick="checkHealth()">‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</button>
                    <button class="btn btn-warning" onclick="runQuickAnalysis()">‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑</button>
                </div>
                
                <div id="loading" class="loading">
                    <h3>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</h3>
                </div>
                
                <div id="error" class="error" style="display: none;"></div>
                
                <div id="content"></div>
            </div>
            
            <script>
                function showLoading() {
                    document.getElementById('loading').style.display = 'block';
                    document.getElementById('content').innerHTML = '';
                    document.getElementById('error').style.display = 'none';
                }
                
                function hideLoading() {
                    document.getElementById('loading').style.display = 'none';
                }
                
                function showError(message) {
                    document.getElementById('error').innerHTML = message;
                    document.getElementById('error').style.display = 'block';
                    hideLoading();
                }
                
                async function testAPI() {
                    showLoading();
                    try {
                        const response = await fetch('/api/health');
                        const data = await response.json();
                        
                        let html = '<div class="card"><h2>üîç –¢–µ—Å—Ç API</h2>';
                        html += '<h3>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>';
                        html += '<div class="metrics">';
                        html += `<div class="metric"><div class="metric-value">${data.status}</div><div>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å</div></div>`;
                        html += '</div>';
                        
                        if (data.components) {
                            html += '<h3>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h3><ul>';
                            for (const [component, status] of Object.entries(data.components)) {
                                const statusIcon = status ? '‚úÖ' : '‚ùå';
                                html += `<li>${statusIcon} ${component}: ${status ? 'OK' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</li>`;
                            }
                            html += '</ul>';
                        }
                        
                        html += `<p><small>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${data.timestamp}</small></p>`;
                        html += '</div>';
                        
                        document.getElementById('content').innerHTML = html;
                        
                    } catch (error) {
                        showError('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: ' + error.message);
                    }
                    hideLoading();
                }
                
                async function checkHealth() {
                    showLoading();
                    try {
                        const response = await fetch('/api/health');
                        const data = await response.json();
                        
                        let html = '<div class="card"><h2>‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã</h2>';
                        
                        const statusColor = data.status === 'healthy' ? '#28a745' : 
                                          data.status === 'degraded' ? '#ffc107' : '#dc3545';
                        
                        html += `<div class="metric" style="background-color: ${statusColor}; color: white;">`;
                        html += `<div class="metric-value">${data.status.toUpperCase()}</div>`;
                        html += '<div>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</div></div>';
                        
                        html += '<h3>–î–µ—Ç–∞–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</h3>';
                        html += '<table class="table"><thead><tr><th>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç</th><th>–°—Ç–∞—Ç—É—Å</th></tr></thead><tbody>';
                        
                        if (data.components) {
                            for (const [component, status] of Object.entries(data.components)) {
                                const statusText = status ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                                const statusClass = status ? 'text-success' : 'text-danger';
                                html += `<tr><td>${component}</td><td class="${statusClass}">${statusText}</td></tr>`;
                            }
                        }
                        
                        html += '</tbody></table>';
                        html += '</div>';
                        
                        document.getElementById('content').innerHTML = html;
                        
                    } catch (error) {
                        showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ' + error.message);
                    }
                    hideLoading();
                }
                
                async function runQuickAnalysis() {
                    showLoading();
                    try {
                        const response = await fetch('/api/analysis/run', { 
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({})
                        });
                        const data = await response.json();
                        
                        let html = '<div class="card"><h2>‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</h2>';
                        
                        if (data.error) {
                            html += `<div class="error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
                        } else {
                            html += '<div class="metrics">';
                            html += `<div class="metric"><div class="metric-value">${data.execution_time || 0}</div><div>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫)</div></div>`;
                            html += `<div class="metric"><div class="metric-value">${data.critical_recommendations || 0}</div><div>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤</div></div>`;
                            html += `<div class="metric"><div class="metric-value">${data.critical_alerts || 0}</div><div>–ê–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ</div></div>`;
                            html += '</div>';
                            html += `<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${data.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>`;
                        }
                        
                        html += '</div>';
                        document.getElementById('content').innerHTML = html;
                        
                    } catch (error) {
                        showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + error.message);
                    }
                    hideLoading();
                }
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                window.onload = function() {
                    checkHealth();
                };
            </script>
        </body>
        </html>
        """
        
        self._send_response(200, html_content, 'text/html; charset=utf-8')
    
    def _handle_health_check(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
        try:
            status = {
                'status': 'healthy',
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'components': {
                    'recommender': self.recommender is not None,
                    'alert_manager': self.alert_manager is not None,
                    'reporting_engine': self.reporting_engine is not None,
                    'orchestrator': self.orchestrator is not None
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            try:
                if self.recommender and hasattr(self.recommender, 'connection'):
                    status['components']['database'] = True
                else:
                    status['components']['database'] = False
            except:
                status['components']['database'] = False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            all_healthy = all(status['components'].values())
            status['status'] = 'healthy' if all_healthy else 'degraded'
            
            self._send_json_response(200, status)
            
        except Exception as e:
            self._send_json_response(500, {
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
    
    def _handle_get_recommendations(self, query_params):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        try:
            limit = int(query_params.get('limit', [50])[0])
            
            if not self.recommender:
                self._send_json_response(500, {'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'})
                return
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations_data = [
                {
                    'product_id': 1,
                    'sku': 'DEMO-001',
                    'product_name': '–î–µ–º–æ —Ç–æ–≤–∞—Ä 1',
                    'source': 'demo',
                    'current_stock': 5,
                    'available_stock': 3,
                    'recommended_order_quantity': 50,
                    'recommended_order_value': 25000.0,
                    'priority_level': 'CRITICAL',
                    'urgency_score': 95.0,
                    'days_until_stockout': 2,
                    'daily_sales_rate_7d': 2.5,
                    'sales_trend': 'STABLE',
                    'analysis_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                },
                {
                    'product_id': 2,
                    'sku': 'DEMO-002',
                    'product_name': '–î–µ–º–æ —Ç–æ–≤–∞—Ä 2',
                    'source': 'demo',
                    'current_stock': 15,
                    'available_stock': 12,
                    'recommended_order_quantity': 30,
                    'recommended_order_value': 15000.0,
                    'priority_level': 'HIGH',
                    'urgency_score': 75.0,
                    'days_until_stockout': 5,
                    'daily_sales_rate_7d': 2.0,
                    'sales_trend': 'GROWING',
                    'analysis_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
            ]
            
            response = {
                'recommendations': recommendations_data[:limit],
                'total_count': len(recommendations_data),
                'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            self._send_json_response(200, response)
            
        except Exception as e:
            self._send_json_response(500, {'error': str(e)})
    
    def _handle_get_alerts(self, query_params):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤."""
        try:
            limit = int(query_params.get('limit', [50])[0])
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
            alerts_data = [
                {
                    'id': 1,
                    'sku': 'DEMO-001',
                    'product_name': '–î–µ–º–æ —Ç–æ–≤–∞—Ä 1',
                    'alert_type': 'STOCKOUT_CRITICAL',
                    'alert_level': 'CRITICAL',
                    'message': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ DEMO-001',
                    'current_stock': 5,
                    'days_until_stockout': 2,
                    'recommended_action': '–°—Ä–æ—á–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å 50 —à—Ç',
                    'status': 'NEW',
                    'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
            ]
            
            response = {
                'alerts': alerts_data[:limit],
                'total_count': len(alerts_data),
                'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            self._send_json_response(200, response)
            
        except Exception as e:
            self._send_json_response(500, {'error': str(e)})
    
    def _handle_get_comprehensive_report(self, query_params):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report = {
                'report_metadata': {
                    'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'source_filter': '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏',
                    'report_type': '–î–µ–º–æ –æ—Ç—á–µ—Ç'
                },
                'inventory_metrics': {
                    'total_products': 100,
                    'total_inventory_value': 500000.0,
                    'low_stock_products': 15,
                    'zero_stock_products': 5,
                    'overstocked_products': 10,
                    'avg_inventory_turnover_days': 45.5,
                    'total_recommended_orders': 25,
                    'total_recommended_value': 150000.0
                },
                'sales_metrics': {
                    'total_sales_volume_30d': 1500,
                    'total_sales_value_30d': 750000.0,
                    'avg_daily_sales': 50.0,
                    'fast_moving_products': 20,
                    'slow_moving_products': 30,
                    'no_sales_products': 10
                }
            }
            
            self._send_json_response(200, report)
            
        except Exception as e:
            self._send_json_response(500, {'error': str(e)})
    
    def _handle_get_product_recommendation(self, product_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞."""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            if product_id == '1':
                rec_data = {
                    'product_id': 1,
                    'sku': 'DEMO-001',
                    'product_name': '–î–µ–º–æ —Ç–æ–≤–∞—Ä 1',
                    'source': 'demo',
                    'current_stock': 5,
                    'available_stock': 3,
                    'recommended_order_quantity': 50,
                    'priority_level': 'CRITICAL',
                    'urgency_score': 95.0,
                    'analysis_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                self._send_json_response(200, rec_data)
            else:
                self._send_json_response(404, {'error': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'})
                
        except Exception as e:
            self._send_json_response(500, {'error': str(e)})
    
    def _handle_run_analysis(self, request_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            result = {
                'execution_time': 0.5,
                'critical_recommendations': 5,
                'critical_alerts': 3,
                'status': 'SUCCESS'
            }
            
            self._send_json_response(200, result)
            
        except Exception as e:
            self._send_json_response(500, {'error': str(e)})
    
    def _handle_acknowledge_alert(self, alert_id, request_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
        try:
            acknowledged_by = request_data.get('acknowledged_by', 'API User')
            
            response = {
                'message': '–ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                'alert_id': int(alert_id),
                'acknowledged_by': acknowledged_by,
                'acknowledged_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            self._send_json_response(200, response)
            
        except Exception as e:
            self._send_json_response(500, {'error': str(e)})
    
    def _send_response(self, status_code, content, content_type='application/json'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞."""
        self.send_response(status_code)
        self.send_header('Content-Type', content_type)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(content.encode('utf-8'))
    
    def _send_json_response(self, status_code, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞."""
        json_content = json.dumps(data, ensure_ascii=False, indent=2)
        self._send_response(status_code, json_content, 'application/json')
    
    def _send_error(self, status_code, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏."""
        error_data = {'error': message, 'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        self._send_json_response(status_code, error_data)
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS."""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
        logger.info(f"{self.address_string()} - {format % args}")


def init_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        ReplenishmentAPIHandler.recommender = ReplenishmentRecommender()
        ReplenishmentAPIHandler.alert_manager = AlertManager()
        ReplenishmentAPIHandler.reporting_engine = ReportingEngine()
        ReplenishmentAPIHandler.orchestrator = ReplenishmentOrchestrator()
        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        logger.info("‚ö†Ô∏è  API –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞."""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û API –°–ï–†–í–ï–†–ê –°–ò–°–¢–ï–ú–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–õ–ê–î–ê")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    components_ok = init_components()
    
    if not components_ok:
        print("‚ö†Ô∏è  –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    host = '0.0.0.0'
    port = 8000
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        server = HTTPServer((host, port), ReplenishmentAPIHandler)
        
        print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{port}")
        print(f"   –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{port}")
        print(f"   API –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:{port}/api/health")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: http://localhost:{port}/api/recommendations")
        print(f"   –ê–ª–µ—Ä—Ç—ã: http://localhost:{port}/api/alerts")
        print("\n‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        server.serve_forever()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        try:
            server.server_close()
        except:
            pass


if __name__ == "__main__":
    main()