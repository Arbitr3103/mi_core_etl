#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
- –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
- –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ê–Ω–∞–ª–∏–∑ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import time
import json
import argparse
from datetime import datetime
from typing import Dict, List, Any, Optional
import logging
import subprocess
import psutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from load_test_inventory_sync import LoadTester, LoadTestConfig, save_test_report, print_test_summary
    from performance_benchmark import PerformanceBenchmark, save_benchmark_report, print_benchmark_summary
    from stress_test_inventory_sync import StressTester, StressTestConfig, save_stress_test_report, print_stress_test_summary
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class ComprehensiveTestRunner:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    
    def __init__(self, output_dir: str = "test_results"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        self.load_test_report: Optional[Dict[str, Any]] = None
        self.benchmark_report: Optional[Dict[str, Any]] = None
        self.stress_test_report: Optional[Dict[str, Any]] = None
        
    def check_system_requirements(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        cpu_count = psutil.cpu_count()
        memory_gb = psutil.virtual_memory().total / 1024 / 1024 / 1024
        disk_free_gb = psutil.disk_usage('.').free / 1024 / 1024 / 1024
        
        requirements = {
            'system_info': {
                'cpu_count': cpu_count,
                'memory_gb': memory_gb,
                'disk_free_gb': disk_free_gb,
                'platform': sys.platform
            },
            'requirements_met': True,
            'warnings': [],
            'recommendations': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if cpu_count < 4:
            requirements['warnings'].append(f"–ú–∞–ª–æ CPU —è–¥–µ—Ä: {cpu_count} < 4 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö")
            requirements['recommendations'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 4 CPU —è–¥—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if memory_gb < 8:
            requirements['warnings'].append(f"–ú–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: {memory_gb:.1f} –ì–ë < 8 –ì–ë —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö")
            requirements['recommendations'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 8 –ì–ë RAM –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if disk_free_gb < 2:
            requirements['warnings'].append(f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {disk_free_gb:.1f} –ì–ë < 2 –ì–ë —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö")
            requirements['recommendations'].append("–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –ì–ë –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
            requirements['requirements_met'] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Python –º–æ–¥—É–ª–µ–π
        required_modules = ['psutil', 'asyncio', 'concurrent.futures', 'multiprocessing']
        missing_modules = []
        
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            requirements['warnings'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
            requirements['requirements_met'] = False
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        if requirements['requirements_met']:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        
        for warning in requirements['warnings']:
            logger.warning(f"‚ö†Ô∏è {warning}")
        
        return requirements
    
    def run_load_tests(self, config: Optional[LoadTestConfig] = None) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        if config is None:
            config = LoadTestConfig(
                small_dataset_size=1000,
                medium_dataset_size=5000,
                large_dataset_size=20000,  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                xlarge_dataset_size=50000,
                max_workers=4,
                batch_sizes=[100, 500, 1000, 2000],
                max_memory_mb=1024,
                max_cpu_percent=85.0,
                min_throughput_per_second=50.0
            )
        
        tester = LoadTester(config)
        
        try:
            report = tester.run_full_load_test_suite()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            filename = self.output_dir / f"load_test_report_{self.timestamp}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
            raise
        finally:
            tester.cleanup()
    
    def run_performance_benchmark(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        benchmark = PerformanceBenchmark()
        
        try:
            report = benchmark.run_comprehensive_benchmark()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            filename = self.output_dir / f"benchmark_report_{self.timestamp}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            raise
        finally:
            benchmark.cleanup()
    
    def run_stress_tests(self, config: Optional[StressTestConfig] = None) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤...")
        
        if config is None:
            config = StressTestConfig(
                max_dataset_size=25000,  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                concurrent_processes=4,
                test_duration_minutes=3,  # –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
                memory_pressure_mb=512,  # 512 –ú–ë
                error_injection_rate=0.05,
                network_failure_rate=0.02,
                memory_leak_simulation=True,
                max_memory_mb=1024,
                max_cpu_percent=90.0
            )
        
        tester = StressTester(config)
        
        try:
            report = tester.run_comprehensive_stress_test()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            filename = self.output_dir / f"stress_test_report_{self.timestamp}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤: {e}")
            raise
        finally:
            tester.cleanup()
    
    def analyze_combined_results(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        analysis = {
            'overall_assessment': 'unknown',
            'performance_grade': 'unknown',
            'stability_grade': 'unknown',
            'scalability_grade': 'unknown',
            'key_findings': [],
            'critical_issues': [],
            'optimization_opportunities': [],
            'production_readiness': 'unknown'
        }
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if self.load_test_report:
            load_analysis = self.load_test_report.get('performance_analysis', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            throughput_issues = []
            memory_issues = []
            
            for test_type, stats in load_analysis.items():
                avg_throughput = stats.get('throughput', {}).get('avg', 0)
                max_memory = stats.get('memory_usage', {}).get('max_mb', 0)
                
                if avg_throughput < 100:  # –ú–µ–Ω–µ–µ 100 –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫
                    throughput_issues.append(f"{test_type}: {avg_throughput:.1f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
                
                if max_memory > 1024:  # –ë–æ–ª–µ–µ 1 –ì–ë
                    memory_issues.append(f"{test_type}: {max_memory:.1f} –ú–ë")
            
            if throughput_issues:
                analysis['critical_issues'].extend([
                    "–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
                    *[f"  - {issue}" for issue in throughput_issues]
                ])
                analysis['performance_grade'] = 'poor'
            else:
                analysis['performance_grade'] = 'good'
            
            if memory_issues:
                analysis['optimization_opportunities'].extend([
                    "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏:",
                    *[f"  - {issue}" for issue in memory_issues]
                ])
        
        # –ê–Ω–∞–ª–∏–∑ –±–µ–Ω—á–º–∞—Ä–∫–∞
        if self.benchmark_report:
            benchmark_analysis = self.benchmark_report.get('performance_analysis', {})
            optimal_configs = self.benchmark_report.get('optimal_configurations', {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
            scalability_factors = []
            for test_type, stats in benchmark_analysis.items():
                scalability_factor = stats.get('scalability_factor', 1.0)
                scalability_factors.append(scalability_factor)
            
            if scalability_factors:
                avg_scalability = sum(scalability_factors) / len(scalability_factors)
                if avg_scalability > 0.8:
                    analysis['scalability_grade'] = 'good'
                elif avg_scalability > 0.6:
                    analysis['scalability_grade'] = 'fair'
                else:
                    analysis['scalability_grade'] = 'poor'
                    analysis['critical_issues'].append(
                        f"–ü–ª–æ—Ö–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {avg_scalability:.2f}"
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if optimal_configs:
                analysis['key_findings'].append("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã:")
                for config_type, config_data in optimal_configs.items():
                    analysis['key_findings'].append(f"  - {config_type}: {config_data}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤
        if self.stress_test_report:
            stress_analysis = self.stress_test_report.get('stability_analysis', {})
            
            overall_stability = stress_analysis.get('overall_stability', 'unknown')
            critical_issues = stress_analysis.get('critical_issues', [])
            
            if overall_stability == 'stable':
                analysis['stability_grade'] = 'good'
            elif overall_stability == 'degraded':
                analysis['stability_grade'] = 'fair'
            else:
                analysis['stability_grade'] = 'poor'
            
            if critical_issues:
                analysis['critical_issues'].extend([
                    "–ü—Ä–æ–±–ª–µ–º—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:",
                    *[f"  - {issue}" for issue in critical_issues]
                ])
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        grades = [
            analysis['performance_grade'],
            analysis['stability_grade'],
            analysis['scalability_grade']
        ]
        
        if all(grade == 'good' for grade in grades if grade != 'unknown'):
            analysis['overall_assessment'] = 'excellent'
            analysis['production_readiness'] = 'ready'
        elif any(grade == 'poor' for grade in grades):
            analysis['overall_assessment'] = 'needs_improvement'
            analysis['production_readiness'] = 'not_ready'
        else:
            analysis['overall_assessment'] = 'acceptable'
            analysis['production_readiness'] = 'ready_with_monitoring'
        
        return analysis
    
    def generate_comprehensive_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        system_check = self.check_system_requirements()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        combined_analysis = self.analyze_combined_results()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        comprehensive_report = {
            'report_metadata': {
                'generated_at': datetime.now().isoformat(),
                'test_timestamp': self.timestamp,
                'report_version': '1.0',
                'system_info': system_check['system_info']
            },
            'system_requirements_check': system_check,
            'test_results': {
                'load_tests': self.load_test_report,
                'performance_benchmark': self.benchmark_report,
                'stress_tests': self.stress_test_report
            },
            'combined_analysis': combined_analysis,
            'executive_summary': self._generate_executive_summary(combined_analysis),
            'detailed_recommendations': self._generate_detailed_recommendations(combined_analysis)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        filename = self.output_dir / f"comprehensive_report_{self.timestamp}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(comprehensive_report, f, indent=2, ensure_ascii=False, default=str)
        
        logger.info(f"üìÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
        self._generate_html_report(comprehensive_report)
        
        return comprehensive_report
    
    def _generate_executive_summary(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞."""
        return {
            'overall_assessment': analysis['overall_assessment'],
            'production_readiness': analysis['production_readiness'],
            'key_metrics': {
                'performance_grade': analysis['performance_grade'],
                'stability_grade': analysis['stability_grade'],
                'scalability_grade': analysis['scalability_grade']
            },
            'critical_actions_required': len(analysis['critical_issues']) > 0,
            'estimated_capacity': self._estimate_system_capacity(),
            'risk_level': self._assess_risk_level(analysis)
        }
    
    def _estimate_system_capacity(self) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
        capacity = {
            'max_records_per_hour': 'unknown',
            'concurrent_users': 'unknown',
            'recommended_batch_size': 'unknown'
        }
        
        if self.benchmark_report:
            optimal_configs = self.benchmark_report.get('optimal_configurations', {})
            
            if 'batch_size' in optimal_configs:
                batch_config = optimal_configs['batch_size']
                throughput = batch_config.get('throughput', 0)
                capacity['max_records_per_hour'] = int(throughput * 3600)
                capacity['recommended_batch_size'] = batch_config.get('size', 1000)
        
        return capacity
    
    def _assess_risk_level(self, analysis: Dict[str, Any]) -> str:
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞."""
        if analysis['production_readiness'] == 'not_ready':
            return 'high'
        elif analysis['production_readiness'] == 'ready_with_monitoring':
            return 'medium'
        else:
            return 'low'
    
    def _generate_detailed_recommendations(self, analysis: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if analysis['performance_grade'] == 'poor':
            recommendations.extend([
                "–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ - –ö–†–ò–¢–ò–ß–ù–û:",
                "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                "- –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–µ–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
                "- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –º–æ—â–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                "- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if analysis['stability_grade'] == 'poor':
            recommendations.extend([
                "–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ - –ö–†–ò–¢–ò–ß–ù–û:",
                "- –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                "- –î–æ–±–∞–≤–∏—Ç—å circuit breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤",
                "- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å graceful degradation –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ",
                "- –£—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
        if analysis['scalability_grade'] == 'poor':
            recommendations.extend([
                "–ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–¨ - –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø:",
                "- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è",
                "- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π",
                "- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —à–∞—Ä–¥–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö",
                "- –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
            ])
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            "–û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:",
            "- –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å capacity planning –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—Å—Ç–∞ –Ω–∞–≥—Ä—É–∑–∫–∏",
            "- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"
        ])
        
        return recommendations
    
    def _generate_html_report(self, report: Dict[str, Any]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞."""
        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - {self.timestamp}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}
        .section {{ margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }}
        .grade-good {{ color: green; font-weight: bold; }}
        .grade-fair {{ color: orange; font-weight: bold; }}
        .grade-poor {{ color: red; font-weight: bold; }}
        .critical {{ background-color: #ffe6e6; padding: 10px; border-left: 4px solid red; }}
        .success {{ background-color: #e6ffe6; padding: 10px; border-left: 4px solid green; }}
        table {{ width: 100%; border-collapse: collapse; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>–û—Ç—á–µ—Ç –æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤</h1>
        <p><strong>–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</strong> {report['report_metadata']['generated_at']}</p>
        <p><strong>–°–∏—Å—Ç–µ–º–∞:</strong> {report['report_metadata']['system_info']['cpu_count']} CPU, 
           {report['report_metadata']['system_info']['memory_gb']:.1f} –ì–ë RAM</p>
    </div>
    
    <div class="section">
        <h2>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ</h2>
        <table>
            <tr><th>–ú–µ—Ç—Ä–∏–∫–∞</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>
            <tr><td>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</td><td class="grade-{report['combined_analysis']['overall_assessment']}">{report['combined_analysis']['overall_assessment']}</td></tr>
            <tr><td>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É</td><td>{report['combined_analysis']['production_readiness']}</td></tr>
            <tr><td>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</td><td class="grade-{report['combined_analysis']['performance_grade']}">{report['combined_analysis']['performance_grade']}</td></tr>
            <tr><td>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</td><td class="grade-{report['combined_analysis']['stability_grade']}">{report['combined_analysis']['stability_grade']}</td></tr>
            <tr><td>–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å</td><td class="grade-{report['combined_analysis']['scalability_grade']}">{report['combined_analysis']['scalability_grade']}</td></tr>
        </table>
    </div>
    
    <div class="section">
        <h2>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏</h2>
        <ul>
        {"".join(f"<li>{finding}</li>" for finding in report['combined_analysis']['key_findings'])}
        </ul>
    </div>
    
    <div class="section">
        <h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
        <ul>
        {"".join(f"<li>{rec}</li>" for rec in report['detailed_recommendations'])}
        </ul>
    </div>
</body>
</html>
        """
        
        html_filename = self.output_dir / f"comprehensive_report_{self.timestamp}.html"
        with open(html_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {html_filename}")
    
    def run_all_tests(self, 
                     load_config: Optional[LoadTestConfig] = None,
                     stress_config: Optional[StressTestConfig] = None) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            system_check = self.check_system_requirements()
            if not system_check['requirements_met']:
                logger.error("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                return {'error': 'System requirements not met', 'details': system_check}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
            logger.info("=" * 60)
            logger.info("–≠–¢–ê–ü 1: –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
            logger.info("=" * 60)
            self.load_test_report = self.run_load_tests(load_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            logger.info("=" * 60)
            logger.info("–≠–¢–ê–ü 2: –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
            logger.info("=" * 60)
            self.benchmark_report = self.run_performance_benchmark()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã
            logger.info("=" * 60)
            logger.info("–≠–¢–ê–ü 3: –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
            logger.info("=" * 60)
            self.stress_test_report = self.run_stress_tests(stress_config)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
            logger.info("=" * 60)
            logger.info("–≠–¢–ê–ü 4: –ê–ù–ê–õ–ò–ó –ò –û–¢–ß–ï–¢–ù–û–°–¢–¨")
            logger.info("=" * 60)
            comprehensive_report = self.generate_comprehensive_report()
            
            end_time = datetime.now()
            total_duration = (end_time - start_time).total_seconds() / 60
            
            logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_duration:.1f} –º–∏–Ω—É—Ç")
            
            return comprehensive_report
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise


def print_comprehensive_summary(report: Dict[str, Any]):
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    print("\n" + "="*80)
    print("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –û –ù–ê–ì–†–£–ó–û–ß–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("="*80)
    
    if 'error' in report:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {report['error']}")
        return
    
    # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    executive_summary = report.get('executive_summary', {})
    print(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {executive_summary.get('overall_assessment', 'unknown').upper()}")
    print(f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: {executive_summary.get('production_readiness', 'unknown').upper()}")
    
    # –û—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    key_metrics = executive_summary.get('key_metrics', {})
    print(f"\n–û—Ü–µ–Ω–∫–∏:")
    print(f"  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {key_metrics.get('performance_grade', 'unknown').upper()}")
    print(f"  –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {key_metrics.get('stability_grade', 'unknown').upper()}")
    print(f"  –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å: {key_metrics.get('scalability_grade', 'unknown').upper()}")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    combined_analysis = report.get('combined_analysis', {})
    critical_issues = combined_analysis.get('critical_issues', [])
    
    if critical_issues:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(critical_issues)}):")
        for issue in critical_issues[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  - {issue}")
        if len(critical_issues) > 5:
            print(f"  ... –∏ –µ—â–µ {len(critical_issues) - 5} –ø—Ä–æ–±–ª–µ–º")
    else:
        print(f"\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = report.get('detailed_recommendations', [])
    if recommendations:
        print(f"\n–¢–û–ü-5 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        for rec in recommendations[:5]:
            print(f"  - {rec}")
    
    print("\n" + "="*80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--output-dir', default='test_results', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--quick', action='store_true', help='–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏')
    parser.add_argument('--load-only', action='store_true', help='–¢–æ–ª—å–∫–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã')
    parser.add_argument('--benchmark-only', action='store_true', help='–¢–æ–ª—å–∫–æ –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    parser.add_argument('--stress-only', action='store_true', help='–¢–æ–ª—å–∫–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    runner = ComprehensiveTestRunner(args.output_dir)
    
    try:
        if args.quick:
            # –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            load_config = LoadTestConfig(
                small_dataset_size=500,
                medium_dataset_size=2000,
                large_dataset_size=5000,
                xlarge_dataset_size=10000,
                batch_sizes=[100, 500, 1000],
                max_memory_mb=512,
                test_duration_minutes=5
            )
            
            stress_config = StressTestConfig(
                max_dataset_size=5000,
                concurrent_processes=2,
                test_duration_minutes=1,
                memory_pressure_mb=256,
                max_memory_mb=512
            )
        else:
            load_config = None
            stress_config = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if args.load_only:
            report = runner.run_load_tests(load_config)
            print_test_summary(report)
        elif args.benchmark_only:
            report = runner.run_performance_benchmark()
            print_benchmark_summary(report)
        elif args.stress_only:
            report = runner.run_stress_tests(stress_config)
            print_stress_test_summary(report)
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            report = runner.run_all_tests(load_config, stress_config)
            print_comprehensive_summary(report)
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except KeyboardInterrupt:
        logger.info("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()