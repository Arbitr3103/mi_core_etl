"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ cost_price.xlsx –≤ –ø–∞–ø–∫–µ uploads/
- –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel (–∫–æ–ª–æ–Ω–∫–∏: barcode, cost_price)
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã dim_products –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
- –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–∞—Ç–æ–π
- –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞

–ê–≤—Ç–æ—Ä: ETL —Å–∏—Å—Ç–µ–º–∞ mi_core
"""

import os
import sys
import logging
import pandas as pd
import shutil
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
UPLOADS_DIR = os.path.join(BASE_DIR, "uploads")
ARCHIVE_DIR = os.path.join(BASE_DIR, "uploads", "archive")
COST_FILE_NAME = "cost_price.xlsx"
EXPECTED_COLUMNS = ['barcode', 'cost_price']


def ensure_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    Path(UPLOADS_DIR).mkdir(parents=True, exist_ok=True)
    Path(ARCHIVE_DIR).mkdir(parents=True, exist_ok=True)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {UPLOADS_DIR}, {ARCHIVE_DIR}")


def find_cost_file() -> Optional[str]:
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª cost_price.xlsx –≤ –ø–∞–ø–∫–µ uploads.
    
    Returns:
        Optional[str]: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    cost_file_path = os.path.join(UPLOADS_DIR, COST_FILE_NAME)
    
    if os.path.exists(cost_file_path):
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {cost_file_path}")
        return cost_file_path
    else:
        logger.info(f"üìÅ –§–∞–π–ª {COST_FILE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {UPLOADS_DIR}")
        return None


def validate_excel_structure(df: pd.DataFrame) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞.
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Excel
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    missing_columns = set(EXPECTED_COLUMNS) - set(df.columns)
    if missing_columns:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        logger.error(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if df.empty:
        logger.error("‚ùå Excel —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    null_barcodes = df['barcode'].isnull().sum()
    null_prices = df['cost_price'].isnull().sum()
    
    if null_barcodes > 0:
        logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {null_barcodes} –ø—É—Å—Ç—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ (–±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
    
    if null_prices > 0:
        logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {null_prices} –ø—É—Å—Ç—ã—Ö —Ü–µ–Ω (–±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã)")
    
    logger.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(df)}")
    return True


def read_cost_file(file_path: str) -> Optional[pd.DataFrame]:
    """
    –ß–∏—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é.
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        Optional[pd.DataFrame]: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        logger.info(f"üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª: {file_path}")
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(file_path)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not validate_excel_structure(df):
            return None
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        df_clean = df.dropna(subset=['barcode', 'cost_price'])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        df_clean['barcode'] = df_clean['barcode'].astype(str).str.strip()
        df_clean['cost_price'] = pd.to_numeric(df_clean['cost_price'], errors='coerce')
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        df_clean = df_clean.dropna(subset=['cost_price'])
        df_clean = df_clean[df_clean['cost_price'] > 0]
        
        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω. –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(df_clean)}")
        return df_clean
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None


def update_product_costs(df: pd.DataFrame) -> Tuple[int, int]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ (barcode, cost_price)
        
    Returns:
        Tuple[int, int]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö)
    """
    connection = None
    cursor = None
    updated_count = 0
    not_found_count = 0
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = connect_to_db()
        cursor = connection.cursor()
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è {len(df)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        for index, row in df.iterrows():
            barcode = row['barcode']
            cost_price = row['cost_price']
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
                sql = "UPDATE dim_products SET cost_price = %s, updated_at = CURRENT_TIMESTAMP WHERE barcode = %s"
                cursor.execute(sql, (cost_price, barcode))
                
                if cursor.rowcount > 0:
                    updated_count += 1
                    logger.debug(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä {barcode}: {cost_price}")
                else:
                    not_found_count += 1
                    logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º {barcode} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {barcode}: {e}")
                not_found_count += 1
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        connection.commit()
        
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_count}")
        return updated_count, not_found_count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
        if connection:
            connection.rollback()
        return 0, len(df)
        
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()


def archive_processed_file(file_path: str) -> bool:
    """
    –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞—Ç—ã.
    
    Args:
        file_path: –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        bool: True –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_name = os.path.basename(file_path)
        name_without_ext = os.path.splitext(file_name)[0]
        extension = os.path.splitext(file_name)[1]
        
        archive_filename = f"{name_without_ext}_{timestamp}{extension}"
        archive_path = os.path.join(ARCHIVE_DIR, archive_filename)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤
        shutil.move(file_path, archive_path)
        
        logger.info(f"üì¶ –§–∞–π–ª –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {archive_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        ensure_directories()
        
        # –ò—â–µ–º —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_file_path = find_cost_file()
        if not cost_file_path:
            logger.info("üìÇ –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            return
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
        df = read_cost_file(cost_file_path)
        if df is None or df.empty:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ë–î
        updated_count, not_found_count = update_product_costs(df)
        
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã, –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª
        if updated_count > 0:
            if archive_processed_file(cost_file_path):
                logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
        else:
            logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –§–∞–π–ª –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"üìä –ò–¢–û–ì–û: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {not_found_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
