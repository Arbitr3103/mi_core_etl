#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã v4 API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import os
import sys
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from inventory_sync_service_v4 import InventorySyncServiceV4
    import config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_real_v4_data():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ v4 API."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º v4 API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ v4 API
        result = service.get_ozon_stocks_v4(limit=5)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result['items'])}")
        print(f"   –í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ: {result.get('total', 0)}")
        print(f"   –ï—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ: {result['has_next']}")
        print(f"   Cursor: {result.get('cursor', 'N/A')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        stock_records = service.process_ozon_v4_stocks(result['items'])
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stock_records)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for i, record in enumerate(stock_records[:3]):
            print(f"\nüì¶ –¢–æ–≤–∞—Ä {i+1}:")
            print(f"   Offer ID: {record.offer_id}")
            print(f"   Product ID: {record.product_id}")
            print(f"   SKU: {record.sku}")
            print(f"   Warehouse: {record.warehouse_name} (ID: {record.warehouse_id})")
            print(f"   Type: {record.stock_type}")
            print(f"   Present: {record.present}")
            print(f"   Reserved: {record.reserved}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ inventory records
        inventory_records = service.convert_to_inventory_records(stock_records)
        
        print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ inventory –∑–∞–ø–∏—Å–µ–π: {len(inventory_records)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        if inventory_records:
            record = inventory_records[0]
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä inventory –∑–∞–ø–∏—Å–∏:")
            print(f"   Product ID: {record.product_id}")
            print(f"   SKU: {record.sku}")
            print(f"   Source: {record.source}")
            print(f"   Warehouse: {record.warehouse_name}")
            print(f"   Stock Type: {record.stock_type}")
            print(f"   Current Stock: {record.current_stock}")
            print(f"   Reserved Stock: {record.reserved_stock}")
            print(f"   Available Stock: {record.available_stock}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        service.close_database_connection()

def test_analytics_data():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Analytics API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        result = service.get_ozon_analytics_stocks(limit=5)
        analytics_stocks = result["analytics_stocks"]
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(analytics_stocks)}")
        print(f"   –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {result['total_count']}")
        print(f"   –ï—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ: {result['has_next']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for i, record in enumerate(analytics_stocks[:3]):
            print(f"\nüìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {i+1}:")
            print(f"   SKU: {record.offer_id}")
            print(f"   Warehouse: {record.warehouse_name} (ID: {record.warehouse_id})")
            print(f"   Free to sell: {record.free_to_sell_amount}")
            print(f"   Promised: {record.promised_amount}")
            print(f"   Reserved: {record.reserved_amount}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        service.close_database_connection()

def test_combined_mapping():
    """–¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüó∫Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        main_result = service.get_ozon_stocks_v4(limit=3)
        main_stocks = service.process_ozon_v4_stocks(main_result['items'])
        
        analytics_result = service.get_ozon_analytics_stocks(limit=10)
        analytics_stocks = analytics_result["analytics_stocks"]
        
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(main_stocks)}")
        print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(analytics_stocks)}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        stock_mapping = service.create_stock_mapping(main_stocks, analytics_stocks)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥: {len(stock_mapping)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥
        main_only = sum(1 for v in stock_mapping.values() if not v["has_analytics_data"])
        analytics_only = sum(1 for v in stock_mapping.values() if v["main_present"] == 0 and v["has_analytics_data"])
        both_sources = sum(1 for v in stock_mapping.values() if v["main_present"] > 0 and v["has_analytics_data"])
        
        print(f"   üìä –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π API: {main_only}")
        print(f"   üìä –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API: {analytics_only}")
        print(f"   üìä –û–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {both_sources}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        for key, data in list(stock_mapping.items())[:1]:
            print(f"\nüîó –ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:")
            print(f"   Offer ID: {data['offer_id']}")
            print(f"   Warehouse: {data['warehouse_name']}")
            print(f"   –û—Å–Ω–æ–≤–Ω–æ–π API - Present: {data['main_present']}, Reserved: {data['main_reserved']}")
            print(f"   –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - Free to sell: {data['analytics_free_to_sell']}, Reserved: {data['analytics_reserved']}")
            print(f"   –ï—Å—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {data['has_analytics_data']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        service.close_database_connection()

if __name__ == "__main__":
    print("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç v4 API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 50)
    
    tests = [
        test_real_v4_data,
        test_analytics_data,
        test_combined_mapping
    ]
    
    results = []
    for test_func in tests:
        try:
            success = test_func()
            results.append(success)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    print("\n" + "=" * 50)
    print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {sum(results)}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if all(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! v4 API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏.")