<?php
/**
 * Comprehensive Warehouse Status Report with Recommendations
 * Part of task 2.5: –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å–∫–ª–∞–¥–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
 */

include 'config/database_postgresql.php';

try {
    // Get database connection
    $pdo = getDatabaseConnection();
    
    if (!$pdo) {
        throw new Exception("Failed to establish database connection");
    }
    
    echo "=== –û–¢–ß–ï–¢ –ü–û –°–û–°–¢–û–Ø–ù–ò–Æ –°–ö–õ–ê–î–û–í –° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò ===\n";
    echo "–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: " . date('Y-m-d H:i:s') . "\n\n";
    
    // Define the total stock calculation formula
    $total_stock_formula = "
        COALESCE(i.quantity_present, 0) + 
        COALESCE(i.quantity_reserved, 0) + 
        COALESCE(i.preparing_for_sale, 0) + 
        COALESCE(i.in_supply_requests, 0) + 
        COALESCE(i.in_transit, 0) + 
        COALESCE(i.in_inspection, 0) + 
        COALESCE(i.returning_from_customers, 0) + 
        COALESCE(i.expiring_soon, 0) + 
        COALESCE(i.defective, 0) + 
        COALESCE(i.excess_from_supply, 0) + 
        COALESCE(i.awaiting_upd, 0) + 
        COALESCE(i.preparing_for_removal, 0)
    ";
    
    // 1. Executive Summary
    echo "1. –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï\n";
    echo str_repeat("=", 50) . "\n";
    
    $stmt = $pdo->prepare("
        SELECT 
            COUNT(DISTINCT i.warehouse_name) as total_warehouses,
            COUNT(DISTINCT i.product_id) as unique_products,
            COUNT(*) as total_inventory_records,
            SUM($total_stock_formula) as total_stock_value,
            COUNT(DISTINCT wsm.product_id) as products_with_sales,
            COALESCE(SUM(wsm.sales_last_28_days), 0) as total_sales_28d,
            COALESCE(AVG(wsm.daily_sales_avg), 0) as avg_daily_sales_rate,
            
            -- Critical metrics
            COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 7 THEN 1 END) as critical_products,
            COUNT(CASE WHEN ($total_stock_formula) BETWEEN wsm.daily_sales_avg * 7 AND wsm.daily_sales_avg * 30 THEN 1 END) as attention_products,
            COUNT(CASE WHEN ($total_stock_formula) > wsm.daily_sales_avg * 60 THEN 1 END) as excess_products,
            
            -- Financial impact
            SUM(GREATEST(0, ROUND(wsm.daily_sales_avg * 60, 0) - ($total_stock_formula))) as total_replenishment_need,
            SUM(GREATEST(0, ROUND(wsm.daily_sales_avg * 60, 0) - ($total_stock_formula))) * 1000 as estimated_investment_needed
            
        FROM inventory i
        LEFT JOIN warehouse_sales_metrics wsm ON i.product_id = wsm.product_id 
            AND i.warehouse_name = wsm.warehouse_name
    ");
    $stmt->execute();
    $summary = $stmt->fetch(PDO::FETCH_ASSOC);
    
    echo "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
    echo "   ‚Ä¢ –°–∫–ª–∞–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {$summary['total_warehouses']}\n";
    echo "   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {$summary['unique_products']}\n";
    echo "   ‚Ä¢ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: " . number_format($summary['total_stock_value']) . " –µ–¥–∏–Ω–∏—Ü\n";
    echo "   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 28 –¥–Ω–µ–π: {$summary['total_sales_28d']} –µ–¥–∏–Ω–∏—Ü\n";
    echo "   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏: " . number_format($summary['avg_daily_sales_rate'], 2) . " –µ–¥–∏–Ω–∏—Ü\n\n";
    
    echo "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n";
    echo "   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Ç—Ä–µ–±—É—é—â–∏–µ —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {$summary['critical_products']}\n";
    echo "   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è: {$summary['attention_products']}\n";
    echo "   ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å –∏–∑–±—ã—Ç–æ—á–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {$summary['excess_products']}\n\n";
    
    echo "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n";
    echo "   ‚Ä¢ –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: " . number_format($summary['total_replenishment_need']) . " –µ–¥–∏–Ω–∏—Ü\n";
    echo "   ‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: " . number_format($summary['estimated_investment_needed'] / 1000000, 2) . " –º–ª–Ω —Ä—É–±–ª–µ–π\n\n";
    
    // 2. Detailed warehouse analysis with sales data
    echo "2. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ö–õ–ê–î–û–í\n";
    echo str_repeat("=", 50) . "\n";
    
    $stmt = $pdo->prepare("
        SELECT 
            i.warehouse_name,
            COUNT(DISTINCT i.product_id) as total_products,
            SUM($total_stock_formula) as total_stock,
            COUNT(CASE WHEN ($total_stock_formula) > 0 THEN 1 END) as active_products,
            COUNT(CASE WHEN ($total_stock_formula) = 0 THEN 1 END) as inactive_products,
            
            -- Sales metrics
            COUNT(DISTINCT wsm.product_id) as products_with_sales,
            COALESCE(SUM(wsm.sales_last_28_days), 0) as sales_28d,
            COALESCE(AVG(wsm.daily_sales_avg), 0) as avg_daily_sales,
            
            -- Stock sufficiency
            CASE 
                WHEN AVG(wsm.daily_sales_avg) > 0 THEN 
                    ROUND(SUM($total_stock_formula) / AVG(wsm.daily_sales_avg), 1)
                ELSE NULL
            END as days_of_stock,
            
            CASE 
                WHEN AVG(wsm.daily_sales_avg) > 0 THEN 
                    ROUND(SUM($total_stock_formula) / AVG(wsm.daily_sales_avg) / 30.0, 2)
                ELSE NULL
            END as months_of_stock,
            
            -- Replenishment needs
            COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 7 THEN 1 END) as urgent_replenishment,
            COUNT(CASE WHEN ($total_stock_formula) BETWEEN wsm.daily_sales_avg * 7 AND wsm.daily_sales_avg * 30 THEN 1 END) as planned_replenishment,
            SUM(GREATEST(0, ROUND(wsm.daily_sales_avg * 60, 0) - ($total_stock_formula))) as recommended_order_qty,
            
            -- Warehouse status
            CASE 
                WHEN COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 7 THEN 1 END) > 0 THEN '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô'
                WHEN COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 14 THEN 1 END) > 2 THEN '–¢–†–ï–ë–£–ï–¢_–í–ù–ò–ú–ê–ù–ò–Ø'
                WHEN COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 30 THEN 1 END) > 3 THEN '–ú–û–ù–ò–¢–û–†–ò–ù–ì'
                ELSE '–°–¢–ê–ë–ò–õ–¨–ù–´–ô'
            END as warehouse_status
            
        FROM inventory i
        LEFT JOIN warehouse_sales_metrics wsm ON i.product_id = wsm.product_id 
            AND i.warehouse_name = wsm.warehouse_name
        GROUP BY i.warehouse_name
        ORDER BY 
            CASE 
                WHEN COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 7 THEN 1 END) > 0 THEN 1
                WHEN COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 14 THEN 1 END) > 2 THEN 2
                WHEN COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 30 THEN 1 END) > 3 THEN 3
                ELSE 4
            END,
            COALESCE(SUM(wsm.sales_last_28_days), 0) DESC
    ");
    $stmt->execute();
    $warehouses = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    foreach ($warehouses as $wh) {
        echo "üì¶ –°–ö–õ–ê–î: {$wh['warehouse_name']}\n";
        echo "   –°—Ç–∞—Ç—É—Å: {$wh['warehouse_status']}\n";
        echo "   –¢–æ–≤–∞—Ä–æ–≤: {$wh['total_products']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {$wh['active_products']}, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {$wh['inactive_products']})\n";
        echo "   –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: " . number_format($wh['total_stock']) . " –µ–¥–∏–Ω–∏—Ü\n";
        echo "   –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ 28 –¥–Ω–µ–π: {$wh['sales_28d']} –µ–¥–∏–Ω–∏—Ü\n";
        echo "   –ó–∞–ø–∞—Å –Ω–∞: " . ($wh['days_of_stock'] ? $wh['days_of_stock'] . " –¥–Ω–µ–π (" . $wh['months_of_stock'] . " –º–µ—Å)" : "N/A") . "\n";
        echo "   –°—Ä–æ—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {$wh['urgent_replenishment']} —Ç–æ–≤–∞—Ä–æ–≤\n";
        echo "   –ü–ª–∞–Ω–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {$wh['planned_replenishment']} —Ç–æ–≤–∞—Ä–æ–≤\n";
        echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑: " . number_format($wh['recommended_order_qty']) . " –µ–¥–∏–Ω–∏—Ü\n";
        echo "\n";
    }
    
    // 3. Top products requiring urgent replenishment by warehouse
    echo "3. –¢–û–ü-10 –¢–û–í–ê–†–û–í –¢–†–ï–ë–£–Æ–©–ò–• –°–†–û–ß–ù–û–ì–û –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ü–û –°–ö–õ–ê–î–ê–ú\n";
    echo str_repeat("=", 70) . "\n";
    
    foreach ($warehouses as $wh) {
        $warehouse_name = $wh['warehouse_name'];
        
        $stmt = $pdo->prepare("
            SELECT 
                i.product_id,
                ($total_stock_formula) as current_stock,
                wsm.daily_sales_avg,
                wsm.sales_last_28_days,
                
                -- Days until stockout
                CASE 
                    WHEN wsm.daily_sales_avg > 0 THEN 
                        FLOOR(($total_stock_formula) / wsm.daily_sales_avg)
                    ELSE NULL
                END as days_until_stockout,
                
                -- Recommended order
                GREATEST(0, ROUND(wsm.daily_sales_avg * 60, 0) - ($total_stock_formula)) as recommended_qty,
                
                -- Priority score
                CASE 
                    WHEN wsm.daily_sales_avg = 0 THEN 0
                    WHEN ($total_stock_formula) < wsm.daily_sales_avg * 7 THEN 100
                    WHEN ($total_stock_formula) < wsm.daily_sales_avg * 14 THEN 80
                    WHEN ($total_stock_formula) < wsm.daily_sales_avg * 30 THEN 60
                    ELSE 20
                END as priority_score
                
            FROM inventory i
            INNER JOIN warehouse_sales_metrics wsm ON i.product_id = wsm.product_id 
                AND i.warehouse_name = wsm.warehouse_name
            WHERE i.warehouse_name = ? AND wsm.daily_sales_avg > 0
            ORDER BY priority_score DESC, wsm.daily_sales_avg DESC
            LIMIT 10
        ");
        $stmt->execute([$warehouse_name]);
        $urgent_products = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        if (!empty($urgent_products)) {
            echo "üè™ {$warehouse_name}:\n";
            printf("   %-8s %-12s %-10s %-10s %-12s %-12s %-10s\n", 
                "PROD_ID", "CURR_STOCK", "DAILY_AVG", "SALES_28D", "DAYS_LEFT", "REC_QTY", "PRIORITY");
            echo "   " . str_repeat("-", 75) . "\n";
            
            foreach ($urgent_products as $prod) {
                printf("   %-8s %-12s %-10s %-10s %-12s %-12s %-10s\n",
                    $prod['product_id'],
                    $prod['current_stock'],
                    number_format($prod['daily_sales_avg'], 2),
                    $prod['sales_last_28_days'],
                    $prod['days_until_stockout'] ?: 'N/A',
                    $prod['recommended_qty'],
                    $prod['priority_score']
                );
            }
            echo "\n";
        }
    }
    
    // 4. Specific recommendations for each warehouse
    echo "4. –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –ò –°–†–û–ö–ê–ú –ü–û–ü–û–õ–ù–ï–ù–ò–Ø\n";
    echo str_repeat("=", 70) . "\n";
    
    foreach ($warehouses as $wh) {
        $warehouse_name = $wh['warehouse_name'];
        
        echo "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –°–ö–õ–ê–î–ê: {$warehouse_name}\n";
        echo "   –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {$wh['warehouse_status']}\n";
        
        // Immediate actions needed
        if ($wh['urgent_replenishment'] > 0) {
            echo "   üö® –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n";
            echo "      ‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å {$wh['urgent_replenishment']} —Ç–æ–≤–∞—Ä–æ–≤\n";
            echo "      ‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∫–∏: 7-14 –¥–Ω–µ–π\n";
        }
        
        // Planned actions
        if ($wh['planned_replenishment'] > 0) {
            echo "   üìã –ü–õ–ê–ù–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n";
            echo "      ‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –≤ –ø–ª–∞–Ω –∑–∞–∫—É–ø–æ–∫ {$wh['planned_replenishment']} —Ç–æ–≤–∞—Ä–æ–≤\n";
            echo "      ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ä–æ–∫ –∑–∞–∫–∞–∑–∞: –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞\n";
        }
        
        // Order recommendations
        if ($wh['recommended_order_qty'] > 0) {
            $order_value = $wh['recommended_order_qty'] * 1000; // Assuming 1000 rubles per unit
            echo "   üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
            echo "      ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –∑–∞–∫–∞–∑—É: " . number_format($wh['recommended_order_qty']) . " –µ–¥–∏–Ω–∏—Ü\n";
            echo "      ‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: " . number_format($order_value / 1000000, 2) . " –º–ª–Ω —Ä—É–±–ª–µ–π\n";
            echo "      ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: " . ($wh['urgent_replenishment'] > 0 ? "–í–´–°–û–ö–ò–ô" : "–°–†–ï–î–ù–ò–ô") . "\n";
        }
        
        // Performance metrics
        if ($wh['months_of_stock']) {
            echo "   üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:\n";
            echo "      ‚Ä¢ –¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å: {$wh['months_of_stock']} –º–µ—Å—è—Ü–µ–≤\n";
            echo "      ‚Ä¢ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å: " . ($wh['months_of_stock'] > 0 ? round(12 / $wh['months_of_stock'], 1) : 'N/A') . " —Ä–∞–∑ –≤ –≥–æ–¥\n";
            
            if ($wh['months_of_stock'] > 3) {
                echo "      ‚Ä¢ ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤\n";
            }
        }
        
        echo "\n";
    }
    
    // 5. Summary table with key metrics for all warehouses
    echo "5. –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –° –ö–õ–Æ–ß–ï–í–´–ú–ò –ú–ï–¢–†–ò–ö–ê–ú–ò\n";
    echo str_repeat("=", 70) . "\n";
    
    printf("%-20s %-8s %-10s %-10s %-8s %-12s %-12s %-12s\n", 
        "–°–ö–õ–ê–î", "–¢–û–í–ê–†–´", "–û–°–¢–ê–¢–ö–ò", "–ü–†–û–î–ê–ñ–ò", "–ú–ï–°–Ø–¶–´", "–°–†–û–ß–ù–û", "–ü–õ–ê–ù–û–í–û–ï", "–°–£–ú–ú–ê_–ú–õ–ù");
    echo str_repeat("-", 110) . "\n";
    
    $total_stock_all = 0;
    $total_sales_all = 0;
    $total_urgent_all = 0;
    $total_planned_all = 0;
    $total_investment_all = 0;
    
    foreach ($warehouses as $wh) {
        $investment = $wh['recommended_order_qty'] * 1000 / 1000000;
        
        printf("%-20s %-8s %-10s %-10s %-8s %-12s %-12s %-12s\n",
            substr($wh['warehouse_name'], 0, 19),
            $wh['total_products'],
            number_format($wh['total_stock']),
            $wh['sales_28d'],
            $wh['months_of_stock'] ?: 'N/A',
            $wh['urgent_replenishment'],
            $wh['planned_replenishment'],
            number_format($investment, 2) . 'M'
        );
        
        $total_stock_all += $wh['total_stock'];
        $total_sales_all += $wh['sales_28d'];
        $total_urgent_all += $wh['urgent_replenishment'];
        $total_planned_all += $wh['planned_replenishment'];
        $total_investment_all += $investment;
    }
    
    echo str_repeat("-", 110) . "\n";
    printf("%-20s %-8s %-10s %-10s %-8s %-12s %-12s %-12s\n",
        "–ò–¢–û–ì–û",
        count($warehouses),
        number_format($total_stock_all),
        $total_sales_all,
        "-",
        $total_urgent_all,
        $total_planned_all,
        number_format($total_investment_all, 2) . 'M'
    );
    
    // 6. Total procurement budget calculation
    echo "\n\n6. –†–ê–°–ß–ï–¢ –û–ë–©–ï–ô –°–£–ú–ú–´ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–• –ó–ê–ö–£–ü–û–ö\n";
    echo str_repeat("=", 50) . "\n";
    
    $stmt = $pdo->prepare("
        SELECT 
            SUM(GREATEST(0, ROUND(wsm.daily_sales_avg * 60, 0) - ($total_stock_formula))) as total_units_needed,
            COUNT(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 7 THEN 1 END) as urgent_items,
            COUNT(CASE WHEN ($total_stock_formula) BETWEEN wsm.daily_sales_avg * 7 AND wsm.daily_sales_avg * 30 THEN 1 END) as planned_items,
            
            -- Budget breakdown
            SUM(CASE WHEN ($total_stock_formula) < wsm.daily_sales_avg * 7 THEN 
                GREATEST(0, ROUND(wsm.daily_sales_avg * 60, 0) - ($total_stock_formula)) 
                ELSE 0 END) as urgent_units,
            SUM(CASE WHEN ($total_stock_formula) BETWEEN wsm.daily_sales_avg * 7 AND wsm.daily_sales_avg * 30 THEN 
                GREATEST(0, ROUND(wsm.daily_sales_avg * 60, 0) - ($total_stock_formula)) 
                ELSE 0 END) as planned_units
            
        FROM inventory i
        INNER JOIN warehouse_sales_metrics wsm ON i.product_id = wsm.product_id 
            AND i.warehouse_name = wsm.warehouse_name
        WHERE wsm.daily_sales_avg > 0
    ");
    $stmt->execute();
    $budget = $stmt->fetch(PDO::FETCH_ASSOC);
    
    $urgent_budget = $budget['urgent_units'] * 1000;
    $planned_budget = $budget['planned_units'] * 1000;
    $total_budget = $budget['total_units_needed'] * 1000;
    
    echo "üíº –ë–Æ–î–ñ–ï–¢ –ù–ê –ó–ê–ö–£–ü–ö–ò:\n";
    echo "   ‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏: " . number_format($budget['urgent_units']) . " –µ–¥–∏–Ω–∏—Ü = " . number_format($urgent_budget / 1000000, 2) . " –º–ª–Ω —Ä—É–±\n";
    echo "   ‚Ä¢ –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫—É–ø–∫–∏: " . number_format($budget['planned_units']) . " –µ–¥–∏–Ω–∏—Ü = " . number_format($planned_budget / 1000000, 2) . " –º–ª–Ω —Ä—É–±\n";
    echo "   ‚Ä¢ –û–ë–©–ò–ô –ë–Æ–î–ñ–ï–¢: " . number_format($budget['total_units_needed']) . " –µ–¥–∏–Ω–∏—Ü = " . number_format($total_budget / 1000000, 2) . " –º–ª–Ω —Ä—É–±\n\n";
    
    echo "üìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –§–ò–ù–ê–ù–°–ò–†–û–í–ê–ù–ò–Æ:\n";
    if ($budget['urgent_items'] > 0) {
        echo "   ‚Ä¢ –í—ã–¥–µ–ª–∏—Ç—å " . number_format($urgent_budget / 1000000, 2) . " –º–ª–Ω —Ä—É–± –Ω–∞ —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏\n";
    }
    echo "   ‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å " . number_format($planned_budget / 1000000, 2) . " –º–ª–Ω —Ä—É–± –Ω–∞ –ø–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫—É–ø–∫–∏\n";
    echo "   ‚Ä¢ –û–±—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 2-3 –º–µ—Å—è—Ü–∞\n";
    
    echo "\n" . str_repeat("=", 70) . "\n";
    echo "–û–¢–ß–ï–¢ –°–§–û–†–ú–ò–†–û–í–ê–ù: " . date('Y-m-d H:i:s') . "\n";
    echo "–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —á–µ—Ä–µ–∑: 7 –¥–Ω–µ–π\n";
    echo str_repeat("=", 70) . "\n";
    
    echo "\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–î–ê–ß–ò 2.5:\n";
    echo "1. ‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É –≤–∫–ª—é—á–∞—è –ø—Ä–æ–¥–∞–∂–∏\n";
    echo "2. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ–±—É—é—â–∏—Ö —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥—É\n";
    echo "3. ‚úÖ –í–∫–ª—é—á–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ —Å—Ä–æ–∫–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n";
    echo "4. ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º\n";
    echo "5. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∑–∞–∫—É–ø–æ–∫ –ø–æ —Å–∫–ª–∞–¥–∞–º\n";
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    exit(1);
}
?>