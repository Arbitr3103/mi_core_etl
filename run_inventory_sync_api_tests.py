#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤.

–í–∫–ª—é—á–∞–µ—Ç:
- Integration —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö endpoints
- –¢–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API endpoints
- –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import unittest
import sys
import os
import time
import subprocess
import signal
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
    from test_inventory_sync_api import TestInventorySyncAPI, TestInventorySyncAPIClass
    from test_inventory_sync_api_integration import (
        TestInventorySyncAPIIntegration,
        TestInventorySyncAPIWebInterface,
        TestInventorySyncAPISecurity,
        TestInventorySyncAPIPerformance
    )
    from test_inventory_sync_api_security import (
        TestAPISecurityVulnerabilities,
        TestAPIInputValidation,
        TestAPIAuthenticationSecurity,
        TestAPIRateLimitingSecurity,
        TestAPIErrorHandlingSecurity
    )
    from test_inventory_sync_web_interface import (
        TestWebInterfaceBasic,
        TestWebInterfaceInteractive,
        TestWebInterfaceAccessibility,
        TestWebInterfacePerformance
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)


class APITestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤ API."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è test runner."""
        self.api_process = None
        self.base_url = "http://localhost:5001"
        self.test_results = {}
    
    def start_api_server(self):
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.api_process = subprocess.Popen(
                [sys.executable, 'start_inventory_sync_api.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            self._wait_for_server()
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
        
        return True
    
    def stop_api_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞."""
        if self.api_process:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
            self.api_process.terminate()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            try:
                self.api_process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                self.api_process.kill()
                self.api_process.wait()
            
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _wait_for_server(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
        import requests
        
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                response = requests.get(f"{self.base_url}/api/sync/health", timeout=2)
                if response.status_code == 200:
                    return
            except requests.exceptions.RequestException:
                pass
            
            time.sleep(1)
        
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞")
    
    def run_unit_tests(self):
        """–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤."""
        print("\n" + "=" * 80)
        print("üß™ –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤")
        print("=" * 80)
        
        test_suite = unittest.TestSuite()
        test_suite.addTest(unittest.makeSuite(TestInventorySyncAPI))
        test_suite.addTest(unittest.makeSuite(TestInventorySyncAPIClass))
        
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(test_suite)
        
        self.test_results['unit'] = {
            'total': result.testsRun,
            'failures': len(result.failures),
            'errors': len(result.errors),
            'success': result.wasSuccessful()
        }
        
        return result.wasSuccessful()
    
    def run_integration_tests(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("\n" + "=" * 80)
        print("üîó –ó–∞–ø—É—Å–∫ Integration —Ç–µ—Å—Ç–æ–≤")
        print("=" * 80)
        
        test_suite = unittest.TestSuite()
        test_suite.addTest(unittest.makeSuite(TestInventorySyncAPIIntegration))
        test_suite.addTest(unittest.makeSuite(TestInventorySyncAPIWebInterface))
        test_suite.addTest(unittest.makeSuite(TestInventorySyncAPISecurity))
        test_suite.addTest(unittest.makeSuite(TestInventorySyncAPIPerformance))
        
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(test_suite)
        
        self.test_results['integration'] = {
            'total': result.testsRun,
            'failures': len(result.failures),
            'errors': len(result.errors),
            'success': result.wasSuccessful()
        }
        
        return result.wasSuccessful()
    
    def run_security_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        print("\n" + "=" * 80)
        print("üîí –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("=" * 80)
        
        test_suite = unittest.TestSuite()
        test_suite.addTest(unittest.makeSuite(TestAPISecurityVulnerabilities))
        test_suite.addTest(unittest.makeSuite(TestAPIInputValidation))
        test_suite.addTest(unittest.makeSuite(TestAPIAuthenticationSecurity))
        test_suite.addTest(unittest.makeSuite(TestAPIRateLimitingSecurity))
        test_suite.addTest(unittest.makeSuite(TestAPIErrorHandlingSecurity))
        
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(test_suite)
        
        self.test_results['security'] = {
            'total': result.testsRun,
            'failures': len(result.failures),
            'errors': len(result.errors),
            'success': result.wasSuccessful()
        }
        
        return result.wasSuccessful()
    
    def run_web_interface_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        print("\n" + "=" * 80)
        print("üåê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("=" * 80)
        
        test_suite = unittest.TestSuite()
        test_suite.addTest(unittest.makeSuite(TestWebInterfaceBasic))
        test_suite.addTest(unittest.makeSuite(TestWebInterfaceInteractive))
        test_suite.addTest(unittest.makeSuite(TestWebInterfaceAccessibility))
        test_suite.addTest(unittest.makeSuite(TestWebInterfacePerformance))
        
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(test_suite)
        
        self.test_results['web_interface'] = {
            'total': result.testsRun,
            'failures': len(result.failures),
            'errors': len(result.errors),
            'success': result.wasSuccessful()
        }
        
        return result.wasSuccessful()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API")
        print("=" * 80)
        
        total_tests = 0
        total_failures = 0
        total_errors = 0
        all_success = True
        
        for test_type, results in self.test_results.items():
            total_tests += results['total']
            total_failures += results['failures']
            total_errors += results['errors']
            
            if not results['success']:
                all_success = False
            
            status_icon = "‚úÖ" if results['success'] else "‚ùå"
            print(f"{status_icon} {test_type.upper()}: {results['total']} —Ç–µ—Å—Ç–æ–≤, "
                  f"{results['failures']} –Ω–µ—É–¥–∞—á, {results['errors']} –æ—à–∏–±–æ–∫")
        
        print("\n" + "-" * 80)
        print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {total_tests - total_failures - total_errors}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_failures}")
        print(f"   –û—à–∏–±–æ–∫: {total_errors}")
        
        if all_success:
            print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•")
        
        print("=" * 80)
        
        return all_success
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        start_time = datetime.now()
        
        print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô –û–°–¢–ê–¢–ö–û–í")
        print("=" * 80)
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
            if not self.start_api_server():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Ç–µ—Å—Ç–æ–≤
            success = True
            
            # Unit —Ç–µ—Å—Ç—ã (–Ω–µ —Ç—Ä–µ–±—É—é—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)
            if not self.run_unit_tests():
                success = False
            
            # Integration —Ç–µ—Å—Ç—ã
            if not self.run_integration_tests():
                success = False
            
            # –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if not self.run_security_tests():
                success = False
            
            # –¢–µ—Å—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if not self.run_web_interface_tests():
                success = False
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            final_success = self.print_summary()
            
            end_time = datetime.now()
            duration = end_time - start_time
            
            print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
            
            return final_success and success
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False
        finally:
            # –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.stop_api_server()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    test_type = sys.argv[1] if len(sys.argv) > 1 else 'all'
    
    runner = APITestRunner()
    
    try:
        if test_type == 'unit':
            success = runner.run_unit_tests()
        elif test_type == 'integration':
            if runner.start_api_server():
                success = runner.run_integration_tests()
                runner.stop_api_server()
            else:
                success = False
        elif test_type == 'security':
            if runner.start_api_server():
                success = runner.run_security_tests()
                runner.stop_api_server()
            else:
                success = False
        elif test_type == 'web':
            if runner.start_api_server():
                success = runner.run_web_interface_tests()
                runner.stop_api_server()
            else:
                success = False
        elif test_type == 'all':
            success = runner.run_all_tests()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: {test_type}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: unit, integration, security, web, all")
            success = False
        
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        runner.stop_api_server()
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        runner.stop_api_server()
        sys.exit(1)


if __name__ == '__main__':
    main()