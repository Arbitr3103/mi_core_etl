#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã.
"""

import os
import sys
import time
import logging
import schedule
import subprocess
from datetime import datetime, timedelta
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('replenishment_scheduler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ReplenishmentScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.script_path = os.path.join(os.path.dirname(__file__), 'replenishment_orchestrator.py')
        self.last_full_analysis = None
        self.last_quick_check = None
        
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            result = subprocess.run([
                sys.executable, self.script_path,
                '--mode', 'full'
            ], capture_output=True, text=True, timeout=3600)  # –¢–∞–π–º–∞—É—Ç 1 —á–∞—Å
            
            if result.returncode == 0:
                logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                self.last_full_analysis = datetime.now()
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._export_daily_report()
                
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logger.error("‚è∞ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (1 —á–∞—Å)")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def run_quick_check(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤."""
        logger.info("‚ö° –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–π –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            result = subprocess.run([
                sys.executable, self.script_path,
                '--mode', 'quick'
            ], capture_output=True, text=True, timeout=300)  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
            
            if result.returncode == 0:
                logger.info("‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                self.last_quick_check = datetime.now()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            logger.error("‚è∞ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    def _export_daily_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
            json_filename = f"replenishment_report_{today}.json"
            result = subprocess.run([
                sys.executable, self.script_path,
                '--mode', 'export',
                '--export-file', json_filename,
                '--export-format', 'json'
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                logger.info(f"üìÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {json_filename}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            csv_filename = f"replenishment_report_{today}.csv"
            result = subprocess.run([
                sys.executable, self.script_path,
                '--mode', 'export',
                '--export-file', csv_filename,
                '--export-format', 'csv'
            ], capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                logger.info(f"üìä CSV –æ—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {csv_filename}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def cleanup_old_reports(self, days_to_keep: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤."""
        try:
            current_dir = os.path.dirname(__file__)
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            
            deleted_count = 0
            for filename in os.listdir(current_dir):
                if filename.startswith('replenishment_report_') and filename.endswith(('.json', '.csv')):
                    file_path = os.path.join(current_dir, filename)
                    file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                    
                    if file_time < cutoff_date:
                        os.remove(file_path)
                        deleted_count += 1
                        logger.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç: {filename}")
            
            if deleted_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
        logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á")
        
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞
        schedule.every().day.at("06:00").do(self.run_full_analysis)
        logger.info("   üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00")
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        schedule.every().day.at("08:00").do(self.run_quick_check)
        schedule.every().day.at("12:00").do(self.run_quick_check)
        schedule.every().day.at("16:00").do(self.run_quick_check)
        schedule.every().day.at("20:00").do(self.run_quick_check)
        logger.info("   ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (08:00, 12:00, 16:00, 20:00)")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00 –Ω–æ—á–∏
        schedule.every().sunday.at("02:00").do(self.cleanup_old_reports)
        logger.info("   üßπ –û—á–∏—Å—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00")
        
        logger.info("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        logger.info("üéØ –ó–ê–ü–£–°–ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–õ–ê–î–ê")
        logger.info("=" * 60)
        
        self.setup_schedule()
        
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
        logger.info("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def run_manual_task(self, task: str):
        """
        –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é.
        
        Args:
            task: –¢–∏–ø –∑–∞–¥–∞—á–∏ ('full', 'quick', 'export', 'cleanup')
        """
        logger.info(f"üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: {task}")
        
        if task == 'full':
            self.run_full_analysis()
        elif task == 'quick':
            self.run_quick_check()
        elif task == 'export':
            self._export_daily_report()
        elif task == 'cleanup':
            self.cleanup_old_reports()
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}")
    
    def get_status(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        next_jobs = []
        for job in schedule.jobs:
            next_jobs.append({
                'job': str(job.job_func.__name__),
                'next_run': job.next_run.strftime('%Y-%m-%d %H:%M:%S') if job.next_run else '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
            })
        
        status = {
            'scheduler_running': True,
            'last_full_analysis': self.last_full_analysis.strftime('%Y-%m-%d %H:%M:%S') if self.last_full_analysis else '–ù–∏–∫–æ–≥–¥–∞',
            'last_quick_check': self.last_quick_check.strftime('%Y-%m-%d %H:%M:%S') if self.last_quick_check else '–ù–∏–∫–æ–≥–¥–∞',
            'scheduled_jobs': len(schedule.jobs),
            'next_jobs': next_jobs
        }
        
        return status


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞')
    parser.add_argument('--mode', choices=['schedule', 'manual', 'status'], default='schedule',
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--task', choices=['full', 'quick', 'export', 'cleanup'],
                       help='–ó–∞–¥–∞—á–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞')
    
    args = parser.parse_args()
    
    scheduler = ReplenishmentScheduler()
    
    try:
        if args.mode == 'schedule':
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler.run_scheduler()
            
        elif args.mode == 'manual':
            # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
            if not args.task:
                print("‚ùå –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É (--task)")
                return
            
            scheduler.run_manual_task(args.task)
            
        elif args.mode == 'status':
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
            status = scheduler.get_status()
            
            print("\nüìä –°–¢–ê–¢–£–° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:")
            print("=" * 50)
            print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if status['scheduler_running'] else '‚ùå'}")
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {status['last_full_analysis']}")
            print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {status['last_quick_check']}")
            print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {status['scheduled_jobs']}")
            
            if status['next_jobs']:
                print(f"\nüìÖ –ë–õ–ò–ñ–ê–ô–®–ò–ï –ó–ê–î–ê–ß–ò:")
                for job in status['next_jobs']:
                    print(f"   {job['job']}: {job['next_run']}")
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()