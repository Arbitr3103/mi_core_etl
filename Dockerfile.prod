# Multi-stage production Dockerfile for MDM System

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY public/ ./public/

# Build application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S mdm -u 1001 -G nodejs

WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=mdm:nodejs /app/dist ./dist
COPY --from=builder --chown=mdm:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=mdm:nodejs /app/package*.json ./

# Copy production configuration
COPY --chown=mdm:nodejs config/production.json ./config/
COPY --chown=mdm:nodejs migrations/ ./migrations/

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/temp && \
    chown -R mdm:nodejs /app/logs /app/uploads /app/temp

# Set environment variables
ENV NODE_ENV=production
ENV PORT=8080

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Switch to non-root user
USER mdm

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["node", "dist/server.js"]