#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã MySQL –¥–∞–º–ø–∞ –æ—Ç BaseBuy.ru.
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞.
"""

import os
import sys
import requests
import zipfile
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class BaseBuyDumpAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–º–ø–∞ BaseBuy."""
    
    def __init__(self):
        self.mysql_url = "https://yadi.sk/d/8wvOhKEXtQDYEg"
        self.csv_url = "https://yadi.sk/d/IaStb5-Kl_96Iw"
        # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä–∞—è –ª–µ–∂–∏—Ç –†–Ø–î–û–ú —Å –ø—Ä–æ–µ–∫—Ç–æ–º, –∞ –Ω–µ –í–ù–£–¢–†–ò
        project_dir = os.path.dirname(os.path.abspath(__file__))
        data_dir = os.path.join(os.path.dirname(project_dir), 'project_data')
        self.download_dir = os.path.join(data_dir, "basebuy_data")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        os.makedirs(self.download_dir, exist_ok=True)
    
    def download_files(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–∞–º–ø–∞."""
        logger.info("üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ BaseBuy...")
        
        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏
        logger.warning("‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
        logger.info(f"MySQL –¥–∞–º–ø: {self.mysql_url}")
        logger.info(f"CSV —Ñ–∞–π–ª—ã: {self.csv_url}")
        
        print("""
üîó –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –°–ö–ê–ß–ò–í–ê–ù–ò–Æ:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∞–º:
   MySQL: https://yadi.sk/d/8wvOhKEXtQDYEg
   CSV: https://yadi.sk/d/IaStb5-Kl_96Iw

2. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É: ../project_data/basebuy_data/

3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ: python3 analyze_basebuy_dump.py --analyze

–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã, 
–æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ URL.
        """)
    
    def analyze_mysql_dump(self, dump_file):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É MySQL –¥–∞–º–ø–∞."""
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º MySQL –¥–∞–º–ø: {dump_file}")
        
        try:
            with open(dump_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—â–µ–º CREATE TABLE statements
            tables = {}
            lines = content.split('\n')
            current_table = None
            
            for line in lines:
                line = line.strip()
                
                # –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                if line.startswith('CREATE TABLE'):
                    table_name = line.split('`')[1] if '`' in line else line.split()[2]
                    current_table = table_name
                    tables[current_table] = {'columns': [], 'indexes': []}
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
                
                # –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
                elif current_table and line.startswith('`') and 'KEY' not in line:
                    column_def = line.split('`')[1] if '`' in line else line.split()[0]
                    column_type = line.split('`')[2].strip() if '`' in line else ''
                    tables[current_table]['columns'].append({
                        'name': column_def,
                        'definition': line
                    })
                
                # –ò–Ω–¥–µ–∫—Å—ã
                elif current_table and ('KEY' in line or 'INDEX' in line):
                    tables[current_table]['indexes'].append(line)
                
                # –ö–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
                elif line.startswith(');') or line.startswith(') ENGINE'):
                    current_table = None
            
            return tables
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–º–ø–∞: {e}")
            return {}
    
    def analyze_csv_files(self, csv_dir):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª—ã."""
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª—ã –≤: {csv_dir}")
        
        csv_files = {}
        
        try:
            for filename in os.listdir(csv_dir):
                if filename.endswith('.csv'):
                    filepath = os.path.join(csv_dir, filename)
                    
                    with open(filepath, 'r', encoding='utf-8') as f:
                        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                        lines = [f.readline().strip() for _ in range(5)]
                    
                    headers = lines[0].split(',') if lines else []
                    
                    csv_files[filename] = {
                        'headers': headers,
                        'sample_lines': lines[1:4] if len(lines) > 1 else []
                    }
                    
                    logger.info(f"CSV —Ñ–∞–π–ª: {filename}, –∫–æ–ª–æ–Ω–∫–∏: {len(headers)}")
            
            return csv_files
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ CSV: {e}")
            return {}
    
    def create_mapping_template(self, tables_info):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –º–∞–ø–ø–∏–Ω–≥–∞ –º–µ–∂–¥—É BaseBuy –∏ –Ω–∞—à–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏."""
        logger.info("üó∫Ô∏è –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –º–∞–ø–ø–∏–Ω–≥–∞...")
        
        mapping_template = """
# –ú–ê–ü–ü–ò–ù–ì –î–ê–ù–ù–´–• BASEBUY -> MI_CORE_DB
# –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–º–ø–∞

## –ù–∞—à–∏ —Ü–µ–ª–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:
# - regions (id, name)
# - brands (id, name, region_id)  
# - car_models (id, name, brand_id)
# - car_specifications (id, car_model_id, year_start, year_end, pcd, dia, fastener_type, fastener_params)

## –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã BaseBuy:
"""
        
        for table_name, table_info in tables_info.items():
            mapping_template += f"\n### –¢–∞–±–ª–∏—Ü–∞: {table_name}\n"
            mapping_template += "–ö–æ–ª–æ–Ω–∫–∏:\n"
            
            for column in table_info['columns']:
                mapping_template += f"  - {column['name']}: {column['definition']}\n"
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –º–∞–ø–ø–∏–Ω–≥
            if 'region' in table_name.lower() or '–æ–±–ª–∞—Å—Ç—å' in table_name.lower():
                mapping_template += f"\nüéØ –í–û–ó–ú–û–ñ–ù–´–ô –ú–ê–ü–ü–ò–ù–ì -> regions:\n"
                mapping_template += f"  {table_name}.??? -> regions.name\n"
            
            elif 'brand' in table_name.lower() or '–º–∞—Ä–∫' in table_name.lower():
                mapping_template += f"\nüéØ –í–û–ó–ú–û–ñ–ù–´–ô –ú–ê–ü–ü–ò–ù–ì -> brands:\n"
                mapping_template += f"  {table_name}.??? -> brands.name\n"
                mapping_template += f"  {table_name}.??? -> brands.region_id\n"
            
            elif 'model' in table_name.lower() or '–º–æ–¥–µ–ª' in table_name.lower():
                mapping_template += f"\nüéØ –í–û–ó–ú–û–ñ–ù–´–ô –ú–ê–ü–ü–ò–ù–ì -> car_models:\n"
                mapping_template += f"  {table_name}.??? -> car_models.name\n"
                mapping_template += f"  {table_name}.??? -> car_models.brand_id\n"
            
            elif 'spec' in table_name.lower() or 'generation' in table_name.lower() or '–ø–æ–∫–æ–ª–µ–Ω' in table_name.lower():
                mapping_template += f"\nüéØ –í–û–ó–ú–û–ñ–ù–´–ô –ú–ê–ü–ü–ò–ù–ì -> car_specifications:\n"
                mapping_template += f"  {table_name}.??? -> car_specifications.year_start\n"
                mapping_template += f"  {table_name}.??? -> car_specifications.year_end\n"
                mapping_template += f"  {table_name}.??? -> car_specifications.pcd\n"
                mapping_template += f"  {table_name}.??? -> car_specifications.dia\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        with open('./basebuy_mapping_template.md', 'w', encoding='utf-8') as f:
            f.write(mapping_template)
        
        logger.info("‚úÖ –®–∞–±–ª–æ–Ω –º–∞–ø–ø–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: basebuy_mapping_template.md")
        
        return mapping_template
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã BaseBuy")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        mysql_files = [f for f in os.listdir(self.download_dir) if f.endswith('.sql')]
        csv_files = [f for f in os.listdir(self.download_dir) if f.endswith('.csv')]
        
        if not mysql_files and not csv_files:
            logger.warning("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            self.download_files()
            return
        
        all_tables = {}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º MySQL –¥–∞–º–ø—ã
        for sql_file in mysql_files:
            filepath = os.path.join(self.download_dir, sql_file)
            tables = self.analyze_mysql_dump(filepath)
            all_tables.update(tables)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª—ã
        if csv_files:
            csv_info = self.analyze_csv_files(self.download_dir)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_info)}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        if all_tables:
            self.create_mapping_template(all_tables)
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
            print(f"\nüìä –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£:")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(all_tables)}")
            
            for table_name, info in all_tables.items():
                print(f"  - {table_name}: {len(info['columns'])} –∫–æ–ª–æ–Ω–æ–∫")
        
        else:
            logger.warning("–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–º–ø–µ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    analyzer = BaseBuyDumpAnalyzer()
    
    if len(sys.argv) > 1 and sys.argv[1] == '--analyze':
        analyzer.run_analysis()
    else:
        analyzer.download_files()


if __name__ == "__main__":
    main()
