#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
–ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞—Ç–∞
"""

import mysql.connector
import sys
import os
from datetime import datetime
from typing import Tuple, Optional

class SafeMigration:
    def __init__(self):
        self.conn = None
        self.cursor = None
        
    def connect_to_db(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.conn = mysql.connector.connect(
                host='localhost',
                user='v_admin',
                password='Arbitr09102022!',
                database='mi_core',
                autocommit=False
            )
            self.cursor = self.conn.cursor()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def create_test_backup(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            self.cursor.execute("DROP TABLE IF EXISTS inventory_data_test_backup")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.cursor.execute("""
                CREATE TABLE inventory_data_test_backup AS 
                SELECT * FROM inventory_data WHERE sku LIKE 'TEST%'
            """)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            self.cursor.execute("SELECT COUNT(*) FROM inventory_data_test_backup")
            backup_count = self.cursor.fetchone()[0]
            
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ ({backup_count} –∑–∞–ø–∏—Å–µ–π)")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def check_real_data_availability(self) -> Tuple[bool, dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
            self.cursor.execute("SELECT COUNT(*) FROM dim_products")
            products_count = self.cursor.fetchone()[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ)
            self.cursor.execute("SELECT COUNT(*) FROM inventory_data WHERE sku NOT LIKE 'TEST%'")
            real_inventory_count = self.cursor.fetchone()[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã
            self.cursor.execute("SELECT COUNT(*) FROM fact_orders")
            orders_count = self.cursor.fetchone()[0]
            
            stats = {
                'products': products_count,
                'inventory': real_inventory_count,
                'orders': orders_count
            }
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   - –¢–æ–≤–∞—Ä—ã: {products_count}")
            print(f"   - –û—Å—Ç–∞—Ç–∫–∏: {real_inventory_count}")
            print(f"   - –ó–∞–∫–∞–∑—ã: {orders_count}")
            
            # –°—á–∏—Ç–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∏–≥—Ä–∞—Ü–∏–∏
            ready = products_count > 0 and real_inventory_count > 0
            
            return ready, stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False, {}
    
    def remove_test_data(self) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
            self.cursor.execute("DELETE FROM inventory_data WHERE sku LIKE 'TEST%'")
            deleted_count = self.cursor.rowcount
            
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ inventory_data")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def restore_test_data(self) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            self.cursor.execute("SELECT COUNT(*) FROM inventory_data_test_backup")
            backup_count = self.cursor.fetchone()[0]
            
            if backup_count == 0:
                print("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return False
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.cursor.execute("INSERT INTO inventory_data SELECT * FROM inventory_data_test_backup")
            restored_count = self.cursor.rowcount
            
            print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def verify_migration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            self.cursor.execute("SELECT COUNT(*) FROM inventory_data WHERE sku LIKE 'TEST%'")
            test_count = self.cursor.fetchone()[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            self.cursor.execute("SELECT COUNT(*) FROM inventory_data WHERE sku NOT LIKE 'TEST%'")
            real_count = self.cursor.fetchone()[0]
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            print(f"   - –¢–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {test_count}")
            print(f"   - –†–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {real_count}")
            
            success = test_count == 0 and real_count > 0
            
            if success:
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def migrate(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º...")
        print("=" * 60)
        
        try:
            # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            if not self.connect_to_db():
                return False
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self.create_test_backup():
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            ready, stats = self.check_real_data_availability()
            
            if not ready:
                print("\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏:")
                if stats.get('products', 0) == 0:
                    print("   - –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ dim_products")
                    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python importers/ozon_importer.py --action=products")
                    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python importers/wb_importer.py --action=products")
                
                if stats.get('inventory', 0) == 0:
                    print("   - –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ inventory_data")
                    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python inventory_sync_service.py --full-sync")
                
                print("\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                return False
            
            # 4. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not self.remove_test_data():
                print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                self.restore_test_data()
                self.conn.rollback()
                return False
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not self.verify_migration():
                print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                self.restore_test_data()
                self.conn.rollback()
                return False
            
            # 6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.conn.commit()
            
            print("\n" + "=" * 60)
            print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìä –î–∞—à–±–æ—Ä–¥ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            print("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: https://www.market-mi.ru")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            if self.conn:
                print("üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
                self.conn.rollback()
            return False
        
        finally:
            if self.conn:
                self.conn.close()
    
    def rollback(self) -> bool:
        """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("üîÑ –û—Ç–∫–∞—Ç –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º...")
        
        try:
            if not self.connect_to_db():
                return False
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ inventory_data
            self.cursor.execute("DELETE FROM inventory_data")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.restore_test_data():
                self.conn.commit()
                print("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
                return True
            else:
                self.conn.rollback()
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
        finally:
            if self.conn:
                self.conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    migration = SafeMigration()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == '--rollback':
        success = migration.rollback()
    else:
        success = migration.migrate()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()