#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ fact_transactions.
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É –Ω–∞—Å –µ—Å—Ç—å –∏ –∫–∞–∫ –∏—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import sys
import os
from collections import Counter

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db

def analyze_transaction_types():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    connection = None
    cursor = None
    
    try:
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ fact_transactions")
        print("=" * 60)
        
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("SELECT COUNT(*) as total_count FROM fact_transactions")
        total_result = cursor.fetchone()
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_result['total_count']}")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        print("\nüìä –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        print("-" * 60)
        
        cursor.execute("""
            SELECT 
                transaction_type,
                COUNT(*) as count,
                SUM(amount) as total_amount,
                AVG(amount) as avg_amount,
                MIN(amount) as min_amount,
                MAX(amount) as max_amount
            FROM fact_transactions 
            GROUP BY transaction_type 
            ORDER BY count DESC
        """)
        
        transaction_types = cursor.fetchall()
        
        for tx_type in transaction_types:
            print(f"–¢–∏–ø: {tx_type['transaction_type']}")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {tx_type['count']}")
            print(f"  –û–±—â–∞—è —Å—É–º–º–∞: {tx_type['total_amount']:.2f}")
            print(f"  –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {tx_type['avg_amount']:.2f}")
            print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: {tx_type['min_amount']:.2f} - {tx_type['max_amount']:.2f}")
            print()
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
        print("üîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏:")
        print("-" * 60)
        
        cursor.execute("""
            SELECT 
                COUNT(*) as transactions_with_orders,
                COUNT(DISTINCT order_id) as unique_orders
            FROM fact_transactions 
            WHERE order_id IS NOT NULL AND order_id != ''
        """)
        
        order_link_result = cursor.fetchone()
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∑–∞–∫–∞–∑–∞–º: {order_link_result['transactions_with_orders']}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö: {order_link_result['unique_orders']}")
        
        # 4. –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        print("\nüè™ –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º):")
        print("-" * 60)
        
        cursor.execute("""
            SELECT 
                s.name as source_name,
                ft.transaction_type,
                COUNT(*) as count,
                SUM(ft.amount) as total_amount
            FROM fact_transactions ft
            JOIN sources s ON ft.source_id = s.id
            GROUP BY s.name, ft.transaction_type
            ORDER BY s.name, count DESC
        """)
        
        source_analysis = cursor.fetchall()
        current_source = None
        
        for row in source_analysis:
            if current_source != row['source_name']:
                current_source = row['source_name']
                print(f"\n{current_source}:")
            
            print(f"  {row['transaction_type']}: {row['count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—É–º–º–∞: {row['total_amount']:.2f}")
        
        # 5. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        print("\nüìÖ –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):")
        print("-" * 60)
        
        cursor.execute("""
            SELECT 
                transaction_date,
                COUNT(*) as daily_count,
                SUM(amount) as daily_amount
            FROM fact_transactions 
            WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
            GROUP BY transaction_date
            ORDER BY transaction_date DESC
            LIMIT 10
        """)
        
        date_analysis = cursor.fetchall()
        
        for row in date_analysis:
            print(f"{row['transaction_date']}: {row['daily_count']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å—É–º–º–∞: {row['daily_amount']:.2f}")
        
        # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        print("-" * 60)
        
        print("–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é:")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        commission_keywords = ['–∫–æ–º–∏—Å—Å–∏—è', 'commission', 'fee', '—ç–∫–≤–∞–π—Ä–∏–Ω–≥', 'acquiring']
        logistics_keywords = ['–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', 'delivery', 'shipping', 'fulfillment']
        return_keywords = ['–≤–æ–∑–≤—Ä–∞—Ç', 'return', 'refund']
        
        for tx_type in transaction_types:
            tx_name = tx_type['transaction_type'].lower()
            
            if any(keyword in tx_name for keyword in commission_keywords):
                category = "üí≥ –ö–û–ú–ò–°–°–ò–ò"
            elif any(keyword in tx_name for keyword in logistics_keywords):
                category = "üöö –õ–û–ì–ò–°–¢–ò–ö–ê"
            elif any(keyword in tx_name for keyword in return_keywords):
                category = "‚Ü©Ô∏è  –í–û–ó–í–†–ê–¢–´"
            else:
                category = "‚ùì –¢–†–ï–ë–£–ï–¢ –ê–ù–ê–õ–ò–ó–ê"
            
            print(f"{category}: {tx_type['transaction_type']}")
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()

def check_metrics_daily_schema():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã metrics_daily."""
    
    connection = None
    cursor = None
    
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã metrics_daily")
        print("=" * 60)
        
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("DESCRIBE metrics_daily")
        columns = cursor.fetchall()
        
        print("–¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ metrics_daily:")
        for col in columns:
            print(f"  {col['Field']}: {col['Type']} {'(NULL)' if col['Null'] == 'YES' else '(NOT NULL)'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ margin_percent
        column_names = [col['Field'] for col in columns]
        
        if 'margin_percent' in column_names:
            print("\n‚úÖ –ö–æ–ª–æ–Ω–∫–∞ margin_percent —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("\n‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ margin_percent –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) as count FROM metrics_daily")
        count_result = cursor.fetchone()
        print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ metrics_daily: {count_result['count']}")
        
        if count_result['count'] > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("""
                SELECT * FROM metrics_daily 
                ORDER BY metric_date DESC 
                LIMIT 3
            """)
            
            sample_data = cursor.fetchall()
            print("\n–ü—Ä–∏–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π:")
            for row in sample_data:
                print(f"  –î–∞—Ç–∞: {row['metric_date']}, –í—ã—Ä—É—á–∫–∞: {row['revenue_sum']}, –ü—Ä–∏–±—ã–ª—å: {row.get('profit_sum', 'NULL')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã: {e}")
        
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()

if __name__ == "__main__":
    analyze_transaction_types()
    check_metrics_daily_schema()