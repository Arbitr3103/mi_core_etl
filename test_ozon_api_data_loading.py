#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Ozon –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–ü–µ—Ä–∏–æ–¥: 29.09.2025 - 05.10.2025

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
- –ò–º–∏—Ç–∞—Ü–∏—é API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Ozon
- –ó–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—ã
- –í–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import mysql.connector
import requests
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Any
import time

class OzonAPITester:
    def __init__(self):
        self.db_config = {
            'host': os.getenv('DB_HOST', '127.0.0.1'),
            'database': os.getenv('DB_NAME', 'mi_core_db'),
            'user': os.getenv('DB_USER', 'ingest_user'),
            'password': os.getenv('DB_PASSWORD', 'xK9#mQ7$vN2@pL!rT4wY'),
            'charset': 'utf8mb4'
        }
        
        self.ozon_config = {
            'client_id': os.getenv('OZON_CLIENT_ID', 'test_client_id'),
            'api_key': os.getenv('OZON_API_KEY', 'test_api_key'),
            'base_url': 'https://api-seller.ozon.ru'
        }
        
        self.connection = None
        
    def log(self, message: str, level: str = 'INFO'):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        colors = {
            'INFO': '\033[0m',      # Default
            'SUCCESS': '\033[32m',  # Green
            'WARNING': '\033[33m',  # Yellow
            'ERROR': '\033[31m'     # Red
        }
        
        color = colors.get(level, colors['INFO'])
        reset = '\033[0m'
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        print(f"{color}[{timestamp}] {message}{reset}")
    
    def connect_to_database(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = mysql.connector.connect(**self.db_config)
            self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ", 'SUCCESS')
            return True
        except mysql.connector.Error as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}", 'ERROR')
            return False
    
    def check_tables_exist(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        required_tables = [
            'ozon_api_settings',
            'ozon_funnel_data',
            'ozon_demographics', 
            'ozon_campaigns'
        ]
        
        cursor = self.connection.cursor()
        
        for table in required_tables:
            try:
                cursor.execute(f"SHOW TABLES LIKE '{table}'")
                if cursor.fetchone():
                    self.log(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 'SUCCESS')
                else:
                    self.log(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 'ERROR')
                    return False
            except mysql.connector.Error as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}", 'ERROR')
                return False
        
        cursor.close()
        return True
    
    def simulate_ozon_api_call(self, endpoint: str, data: Dict) -> Dict:
        """–ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ API Ozon (–ø–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π)"""
        self.log(f"üîÑ –ò–º–∏—Ç–∞—Ü–∏—è API –≤—ã–∑–æ–≤–∞: {endpoint}", 'INFO')
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
        time.sleep(0.5)
        
        if endpoint == '/v1/analytics/funnel':
            return self.generate_mock_funnel_data(data)
        elif endpoint == '/v1/analytics/demographics':
            return self.generate_mock_demographics_data(data)
        elif endpoint == '/v1/analytics/campaigns':
            return self.generate_mock_campaigns_data(data)
        else:
            return {'error': 'Unknown endpoint'}
    
    def generate_mock_funnel_data(self, request_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        return {
            'success': True,
            'data': [
                {
                    'product_id': 'OZON_PRODUCT_001',
                    'campaign_id': 'OZON_CAMPAIGN_001',
                    'views': 8500,
                    'cart_additions': 1275,
                    'orders': 383
                },
                {
                    'product_id': 'OZON_PRODUCT_002', 
                    'campaign_id': 'OZON_CAMPAIGN_002',
                    'views': 6200,
                    'cart_additions': 930,
                    'orders': 279
                },
                {
                    'product_id': 'OZON_PRODUCT_003',
                    'campaign_id': 'OZON_CAMPAIGN_001',
                    'views': 4100,
                    'cart_additions': 615,
                    'orders': 185
                }
            ]
        }
    
    def generate_mock_demographics_data(self, request_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'success': True,
            'data': [
                {
                    'age_group': '25-34',
                    'gender': 'male',
                    'region': 'Moscow',
                    'orders_count': 245,
                    'revenue': 122500.00
                },
                {
                    'age_group': '35-44',
                    'gender': 'female', 
                    'region': 'Saint Petersburg',
                    'orders_count': 198,
                    'revenue': 99000.00
                },
                {
                    'age_group': '25-34',
                    'gender': 'female',
                    'region': 'Moscow',
                    'orders_count': 312,
                    'revenue': 156000.00
                },
                {
                    'age_group': '45-54',
                    'gender': 'male',
                    'region': 'Novosibirsk',
                    'orders_count': 156,
                    'revenue': 78000.00
                }
            ]
        }
    
    def generate_mock_campaigns_data(self, request_data: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
        return {
            'success': True,
            'data': [
                {
                    'campaign_id': 'OZON_CAMPAIGN_001',
                    'campaign_name': '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
                    'impressions': 125000,
                    'clicks': 6250,
                    'spend': 12500.00,
                    'orders': 312,
                    'revenue': 31200.00
                },
                {
                    'campaign_id': 'OZON_CAMPAIGN_002',
                    'campaign_name': '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
                    'impressions': 98000,
                    'clicks': 4900,
                    'spend': 9800.00,
                    'orders': 245,
                    'revenue': 24500.00
                }
            ]
        }
    
    def process_funnel_data(self, api_response: Dict, date_from: str, date_to: str) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂"""
        processed_data = []
        
        for item in api_response.get('data', []):
            views = max(0, int(item.get('views', 0)))
            cart_additions = max(0, int(item.get('cart_additions', 0)))
            orders = max(0, int(item.get('orders', 0)))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if cart_additions > views and views > 0:
                cart_additions = views
            if orders > cart_additions and cart_additions > 0:
                orders = cart_additions
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            conv_view_to_cart = round((cart_additions / views) * 100, 2) if views > 0 else 0.0
            conv_cart_to_order = round((orders / cart_additions) * 100, 2) if cart_additions > 0 else 0.0
            conv_overall = round((orders / views) * 100, 2) if views > 0 else 0.0
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –º–∞–∫—Å–∏–º—É–º–æ–º 100%
            conv_view_to_cart = min(100.0, conv_view_to_cart)
            conv_cart_to_order = min(100.0, conv_cart_to_order)
            conv_overall = min(100.0, conv_overall)
            
            processed_data.append({
                'date_from': date_from,
                'date_to': date_to,
                'product_id': item.get('product_id'),
                'campaign_id': item.get('campaign_id'),
                'views': views,
                'cart_additions': cart_additions,
                'orders': orders,
                'conversion_view_to_cart': conv_view_to_cart,
                'conversion_cart_to_order': conv_cart_to_order,
                'conversion_overall': conv_overall,
                'cached_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
        
        return processed_data
    
    def process_demographics_data(self, api_response: Dict, date_from: str, date_to: str) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        processed_data = []
        
        for item in api_response.get('data', []):
            processed_data.append({
                'date_from': date_from,
                'date_to': date_to,
                'age_group': item.get('age_group'),
                'gender': item.get('gender'),
                'region': item.get('region'),
                'orders_count': max(0, int(item.get('orders_count', 0))),
                'revenue': max(0.0, float(item.get('revenue', 0.0))),
                'cached_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
        
        return processed_data
    
    def process_campaigns_data(self, api_response: Dict, date_from: str, date_to: str) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
        processed_data = []
        
        for item in api_response.get('data', []):
            impressions = int(item.get('impressions', 0))
            clicks = int(item.get('clicks', 0))
            spend = float(item.get('spend', 0.0))
            orders = int(item.get('orders', 0))
            revenue = float(item.get('revenue', 0.0))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            ctr = round((clicks / impressions) * 100, 2) if impressions > 0 else 0.0
            cpc = round(spend / clicks, 2) if clicks > 0 else 0.0
            roas = round(revenue / spend, 2) if spend > 0 else 0.0
            
            processed_data.append({
                'campaign_id': item.get('campaign_id'),
                'campaign_name': item.get('campaign_name'),
                'date_from': date_from,
                'date_to': date_to,
                'impressions': impressions,
                'clicks': clicks,
                'spend': spend,
                'orders': orders,
                'revenue': revenue,
                'ctr': ctr,
                'cpc': cpc,
                'roas': roas,
                'cached_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
        
        return processed_data
    
    def save_funnel_data(self, data: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏ –≤ –ë–î"""
        cursor = self.connection.cursor()
        
        query = """
        INSERT INTO ozon_funnel_data 
        (date_from, date_to, product_id, campaign_id, views, cart_additions, orders,
         conversion_view_to_cart, conversion_cart_to_order, conversion_overall, cached_at)
        VALUES (%(date_from)s, %(date_to)s, %(product_id)s, %(campaign_id)s, %(views)s, 
                %(cart_additions)s, %(orders)s, %(conversion_view_to_cart)s, 
                %(conversion_cart_to_order)s, %(conversion_overall)s, %(cached_at)s)
        ON DUPLICATE KEY UPDATE
        views = VALUES(views),
        cart_additions = VALUES(cart_additions),
        orders = VALUES(orders),
        conversion_view_to_cart = VALUES(conversion_view_to_cart),
        conversion_cart_to_order = VALUES(conversion_cart_to_order),
        conversion_overall = VALUES(conversion_overall),
        cached_at = VALUES(cached_at)
        """
        
        try:
            cursor.executemany(query, data)
            self.connection.commit()
            self.log(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂", 'SUCCESS')
            cursor.close()
            return True
        except mysql.connector.Error as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏: {e}", 'ERROR')
            cursor.close()
            return False
    
    def save_demographics_data(self, data: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        cursor = self.connection.cursor()
        
        query = """
        INSERT INTO ozon_demographics 
        (date_from, date_to, age_group, gender, region, orders_count, revenue, cached_at)
        VALUES (%(date_from)s, %(date_to)s, %(age_group)s, %(gender)s, %(region)s,
                %(orders_count)s, %(revenue)s, %(cached_at)s)
        ON DUPLICATE KEY UPDATE
        orders_count = VALUES(orders_count),
        revenue = VALUES(revenue),
        cached_at = VALUES(cached_at)
        """
        
        try:
            cursor.executemany(query, data)
            self.connection.commit()
            self.log(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π", 'SUCCESS')
            cursor.close()
            return True
        except mysql.connector.Error as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", 'ERROR')
            cursor.close()
            return False
    
    def save_campaigns_data(self, data: List[Dict]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –≤ –ë–î"""
        cursor = self.connection.cursor()
        
        query = """
        INSERT INTO ozon_campaigns 
        (campaign_id, campaign_name, date_from, date_to, impressions, clicks, spend,
         orders, revenue, ctr, cpc, roas, cached_at)
        VALUES (%(campaign_id)s, %(campaign_name)s, %(date_from)s, %(date_to)s, 
                %(impressions)s, %(clicks)s, %(spend)s, %(orders)s, %(revenue)s,
                %(ctr)s, %(cpc)s, %(roas)s, %(cached_at)s)
        ON DUPLICATE KEY UPDATE
        impressions = VALUES(impressions),
        clicks = VALUES(clicks),
        spend = VALUES(spend),
        orders = VALUES(orders),
        revenue = VALUES(revenue),
        ctr = VALUES(ctr),
        cpc = VALUES(cpc),
        roas = VALUES(roas),
        cached_at = VALUES(cached_at)
        """
        
        try:
            cursor.executemany(query, data)
            self.connection.commit()
            self.log(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∫–∞–º–ø–∞–Ω–∏–π", 'SUCCESS')
            cursor.close()
            return True
        except mysql.connector.Error as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π: {e}", 'ERROR')
            cursor.close()
            return False
    
    def validate_loaded_data(self, date_from: str, date_to: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        cursor = self.connection.cursor()
        validation_errors = 0
        
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", 'INFO')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∫–∏
        cursor.execute("""
            SELECT product_id, views, cart_additions, orders, 
                   conversion_view_to_cart, conversion_cart_to_order, conversion_overall
            FROM ozon_funnel_data 
            WHERE date_from >= %s AND date_to <= %s
        """, (date_from, date_to))
        
        funnel_data = cursor.fetchall()
        
        for row in funnel_data:
            product_id, views, cart_additions, orders, conv_vtc, conv_cto, conv_overall = row
            
            if cart_additions > views:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É ({cart_additions}) > –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ({views}) –¥–ª—è {product_id}", 'ERROR')
                validation_errors += 1
            
            if orders > cart_additions:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑—ã ({orders}) > –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ—Ä–∑–∏–Ω—É ({cart_additions}) –¥–ª—è {product_id}", 'ERROR')
                validation_errors += 1
            
            if conv_overall > 100:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: –æ–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è ({conv_overall}%) > 100% –¥–ª—è {product_id}", 'ERROR')
                validation_errors += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT age_group, gender, region, orders_count, revenue
            FROM ozon_demographics 
            WHERE date_from >= %s AND date_to <= %s
        """, (date_from, date_to))
        
        demo_data = cursor.fetchall()
        
        for row in demo_data:
            age_group, gender, region, orders_count, revenue = row
            
            if orders_count < 0 or revenue < 0:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏: {age_group}, {gender}, {region}", 'ERROR')
                validation_errors += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
        cursor.execute("""
            SELECT campaign_id, impressions, clicks, ctr, spend, revenue, roas
            FROM ozon_campaigns 
            WHERE date_from >= %s AND date_to <= %s
        """, (date_from, date_to))
        
        campaign_data = cursor.fetchall()
        
        for row in campaign_data:
            campaign_id, impressions, clicks, ctr, spend, revenue, roas = row
            
            if clicks > impressions:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–∫–∏ ({clicks}) > –ø–æ–∫–∞–∑–æ–≤ ({impressions}) –¥–ª—è {campaign_id}", 'ERROR')
                validation_errors += 1
            
            if ctr > 100:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: CTR ({ctr}%) > 100% –¥–ª—è {campaign_id}", 'ERROR')
                validation_errors += 1
        
        cursor.close()
        
        if validation_errors == 0:
            self.log("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é", 'SUCCESS')
            return True
        else:
            self.log(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {validation_errors} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 'ERROR')
            return False
    
    def get_data_summary(self, date_from: str, date_to: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        cursor = self.connection.cursor()
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ
        cursor.execute("""
            SELECT COUNT(*) as count, 
                   SUM(views) as total_views,
                   SUM(cart_additions) as total_cart,
                   SUM(orders) as total_orders,
                   AVG(conversion_overall) as avg_conversion
            FROM ozon_funnel_data 
            WHERE date_from >= %s AND date_to <= %s
        """, (date_from, date_to))
        
        funnel_summary = cursor.fetchone()
        
        self.log("üìä –°–≤–æ–¥–∫–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂:", 'INFO')
        self.log(f"   - –ó–∞–ø–∏—Å–µ–π: {funnel_summary[0]}", 'INFO')
        self.log(f"   - –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {funnel_summary[1]:,}", 'INFO')
        self.log(f"   - –í –∫–æ—Ä–∑–∏–Ω—É: {funnel_summary[2]:,}", 'INFO')
        self.log(f"   - –ó–∞–∫–∞–∑—ã: {funnel_summary[3]:,}", 'INFO')
        self.log(f"   - –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: {funnel_summary[4]:.2f}%", 'INFO')
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏
        cursor.execute("""
            SELECT COUNT(*) as count,
                   SUM(orders_count) as total_orders,
                   SUM(revenue) as total_revenue
            FROM ozon_demographics 
            WHERE date_from >= %s AND date_to <= %s
        """, (date_from, date_to))
        
        demo_summary = cursor.fetchone()
        
        self.log("\nüë• –°–≤–æ–¥–∫–∞ –ø–æ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏:", 'INFO')
        self.log(f"   - –ó–∞–ø–∏—Å–µ–π: {demo_summary[0]}", 'INFO')
        self.log(f"   - –ó–∞–∫–∞–∑—ã: {demo_summary[1]:,}", 'INFO')
        self.log(f"   - –í—ã—Ä—É—á–∫–∞: {demo_summary[2]:,.2f} —Ä—É–±.", 'INFO')
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        cursor.execute("""
            SELECT COUNT(*) as count,
                   SUM(impressions) as total_impressions,
                   SUM(clicks) as total_clicks,
                   SUM(spend) as total_spend,
                   SUM(revenue) as total_revenue,
                   AVG(ctr) as avg_ctr,
                   AVG(roas) as avg_roas
            FROM ozon_campaigns 
            WHERE date_from >= %s AND date_to <= %s
        """, (date_from, date_to))
        
        campaign_summary = cursor.fetchone()
        
        self.log("\nüìà –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º:", 'INFO')
        self.log(f"   - –ó–∞–ø–∏—Å–µ–π: {campaign_summary[0]}", 'INFO')
        self.log(f"   - –ü–æ–∫–∞–∑—ã: {campaign_summary[1]:,}", 'INFO')
        self.log(f"   - –ö–ª–∏–∫–∏: {campaign_summary[2]:,}", 'INFO')
        self.log(f"   - –†–∞—Å—Ö–æ–¥—ã: {campaign_summary[3]:,.2f} —Ä—É–±.", 'INFO')
        self.log(f"   - –î–æ—Ö–æ–¥—ã: {campaign_summary[4]:,.2f} —Ä—É–±.", 'INFO')
        self.log(f"   - –°—Ä–µ–¥–Ω–∏–π CTR: {campaign_summary[5]:.2f}%", 'INFO')
        self.log(f"   - –°—Ä–µ–¥–Ω–∏–π ROAS: {campaign_summary[6]:.2f}", 'INFO')
        
        cursor.close()
    
    def run_test(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• OZON ANALYTICS", 'INFO')
        self.log("–ü–µ—Ä–∏–æ–¥: 29.09.2025 - 05.10.2025", 'INFO')
        self.log("=" * 50, 'INFO')
        
        date_from = '2025-09-29'
        date_to = '2025-10-05'
        
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        self.log("\n1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...", 'INFO')
        if not self.connect_to_database():
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        self.log("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...", 'INFO')
        if not self.check_tables_exist():
            return False
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API (–∏–º–∏—Ç–∞—Ü–∏—è)
        self.log("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Ozon...", 'INFO')
        
        # –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂
        funnel_response = self.simulate_ozon_api_call('/v1/analytics/funnel', {
            'date_from': date_from,
            'date_to': date_to
        })
        
        if funnel_response.get('success'):
            funnel_data = self.process_funnel_data(funnel_response, date_from, date_to)
            self.save_funnel_data(funnel_data)
        
        # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        demo_response = self.simulate_ozon_api_call('/v1/analytics/demographics', {
            'date_from': date_from,
            'date_to': date_to
        })
        
        if demo_response.get('success'):
            demo_data = self.process_demographics_data(demo_response, date_from, date_to)
            self.save_demographics_data(demo_data)
        
        # –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
        campaigns_response = self.simulate_ozon_api_call('/v1/analytics/campaigns', {
            'date_from': date_from,
            'date_to': date_to
        })
        
        if campaigns_response.get('success'):
            campaigns_data = self.process_campaigns_data(campaigns_response, date_from, date_to)
            self.save_campaigns_data(campaigns_data)
        
        # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.log("\n4Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", 'INFO')
        validation_success = self.validate_loaded_data(date_from, date_to)
        
        # 5. –°–≤–æ–¥–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
        self.log("\n5Ô∏è‚É£ –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º...", 'INFO')
        self.get_data_summary(date_from, date_to)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.connection:
            self.connection.close()
        
        self.log("\n" + "=" * 50, 'INFO')
        if validation_success:
            self.log("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!", 'SUCCESS')
            self.log("–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ 29.09.2025 - 05.10.2025 –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.", 'SUCCESS')
        else:
            self.log("‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò!", 'ERROR')
            self.log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.", 'ERROR')
        
        return validation_success

if __name__ == "__main__":
    tester = OzonAPITester()
    success = tester.run_test()
    exit(0 if success else 1)