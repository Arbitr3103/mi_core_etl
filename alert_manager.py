#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞.
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.
"""

import sys
import os
import logging
import smtplib
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from dataclasses import dataclass
from enum import Enum
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db
from replenishment_recommender import ReplenishmentRecommendation, PriorityLevel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AlertType(Enum):
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤."""
    STOCKOUT_CRITICAL = "STOCKOUT_CRITICAL"
    STOCKOUT_WARNING = "STOCKOUT_WARNING"
    SLOW_MOVING = "SLOW_MOVING"
    OVERSTOCKED = "OVERSTOCKED"
    NO_SALES = "NO_SALES"


class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤."""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    INFO = "INFO"


@dataclass
class Alert:
    """–ê–ª–µ—Ä—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–ø–∞—Å–æ–≤."""
    product_id: int
    sku: str
    product_name: str
    alert_type: AlertType
    alert_level: AlertLevel
    message: str
    current_stock: int
    days_until_stockout: Optional[int]
    recommended_action: str
    created_at: datetime


class AlertManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."""
    
    def __init__(self, connection=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤.
        
        Args:
            connection: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.connection = connection or connect_to_db()
        self.settings = self._load_notification_settings()
        
    def _load_notification_settings(self) -> Dict[str, any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            cursor = self.connection.cursor(dictionary=True)
            cursor.execute("""
                SELECT setting_key, setting_value, setting_type 
                FROM replenishment_settings 
                WHERE category = 'NOTIFICATIONS' AND is_active = TRUE
            """)
            
            settings = {}
            for row in cursor.fetchall():
                key = row['setting_key']
                value = row['setting_value']
                setting_type = row['setting_type']
                
                if setting_type == 'BOOLEAN':
                    settings[key] = value.lower() in ('true', '1', 'yes')
                elif setting_type == 'JSON':
                    settings[key] = json.loads(value)
                else:
                    settings[key] = value
                    
            cursor.close()
            return settings
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return {
                'enable_email_alerts': False,
                'alert_email_recipients': []
            }
    
    def generate_alerts_from_recommendations(self, recommendations: List[ReplenishmentRecommendation]) -> List[Alert]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
        
        Args:
            recommendations: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        """
        logger.info("üö® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        alerts = []
        
        for rec in recommendations:
            try:
                # –ê–ª–µ—Ä—Ç—ã –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
                if rec.priority_level == PriorityLevel.CRITICAL:
                    alert = Alert(
                        product_id=rec.product_id,
                        sku=rec.sku,
                        product_name=rec.product_name,
                        alert_type=AlertType.STOCKOUT_CRITICAL,
                        alert_level=AlertLevel.CRITICAL,
                        message=f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–°–¢–ê–¢–û–ö! –¢–æ–≤–∞—Ä {rec.sku} –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {rec.days_until_stockout or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –¥–Ω–µ–π. –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {rec.available_stock} —à—Ç.",
                        current_stock=rec.current_stock,
                        days_until_stockout=rec.days_until_stockout,
                        recommended_action=f"–°–†–û–ß–ù–û –∑–∞–∫–∞–∑–∞—Ç—å {rec.recommended_order_quantity} —à—Ç.",
                        created_at=datetime.now()
                    )
                    alerts.append(alert)
                
                elif rec.priority_level == PriorityLevel.HIGH:
                    alert = Alert(
                        product_id=rec.product_id,
                        sku=rec.sku,
                        product_name=rec.product_name,
                        alert_type=AlertType.STOCKOUT_WARNING,
                        alert_level=AlertLevel.HIGH,
                        message=f"–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ {rec.sku}. –û—Å—Ç–∞—Ç–æ–∫: {rec.available_stock} —à—Ç., –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {rec.days_until_stockout or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –¥–Ω–µ–π.",
                        current_stock=rec.current_stock,
                        days_until_stockout=rec.days_until_stockout,
                        recommended_action=f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫–∞–∑–∞—Ç—å {rec.recommended_order_quantity} —à—Ç.",
                        created_at=datetime.now()
                    )
                    alerts.append(alert)
                
                # –ê–ª–µ—Ä—Ç—ã –æ –º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–∞—Ö
                if rec.days_since_last_sale > 30 and rec.current_stock > 0:
                    alert = Alert(
                        product_id=rec.product_id,
                        sku=rec.sku,
                        product_name=rec.product_name,
                        alert_type=AlertType.SLOW_MOVING,
                        alert_level=AlertLevel.MEDIUM,
                        message=f"–ú–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏–π—Å—è —Ç–æ–≤–∞—Ä {rec.sku}. –ù–µ—Ç –ø—Ä–æ–¥–∞–∂ {rec.days_since_last_sale} –¥–Ω–µ–π, –æ—Å—Ç–∞—Ç–æ–∫: {rec.current_stock} —à—Ç.",
                        current_stock=rec.current_stock,
                        days_until_stockout=None,
                        recommended_action="–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ü–∏–∏",
                        created_at=datetime.now()
                    )
                    alerts.append(alert)
                
                # –ê–ª–µ—Ä—Ç—ã –æ–± –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –∑–∞–ø–∞—Å–∞—Ö
                if rec.inventory_turnover_days and rec.inventory_turnover_days > 90:
                    alert = Alert(
                        product_id=rec.product_id,
                        sku=rec.sku,
                        product_name=rec.product_name,
                        alert_type=AlertType.OVERSTOCKED,
                        alert_level=AlertLevel.LOW,
                        message=f"–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞ {rec.sku}. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å: {rec.inventory_turnover_days} –¥–Ω–µ–π.",
                        current_stock=rec.current_stock,
                        days_until_stockout=None,
                        recommended_action="–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫ –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É",
                        created_at=datetime.now()
                    )
                    alerts.append(alert)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {rec.sku}: {e}")
                continue
        
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
        return alerts
    
    def save_alerts_to_db(self, alerts: List[Alert]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            alerts: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not alerts:
            logger.info("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return True
        
        try:
            cursor = self.connection.cursor()
            
            insert_sql = """
                INSERT INTO replenishment_alerts (
                    product_id, sku, product_name, alert_type, alert_level,
                    message, current_stock, days_until_stockout, recommended_action
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            
            batch_data = []
            for alert in alerts:
                batch_data.append((
                    alert.product_id,
                    alert.sku,
                    alert.product_name,
                    alert.alert_type.value,
                    alert.alert_level.value,
                    alert.message,
                    alert.current_stock,
                    alert.days_until_stockout,
                    alert.recommended_action
                ))
            
            cursor.executemany(insert_sql, batch_data)
            self.connection.commit()
            cursor.close()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            self.connection.rollback()
            return False
    
    def send_email_alerts(self, alerts: List[Alert]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            alerts: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.settings.get('enable_email_alerts', False):
            logger.info("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return True
        
        recipients = self.settings.get('alert_email_recipients', [])
        if not recipients:
            logger.warning("–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return True
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        critical_alerts = [a for a in alerts if a.alert_level in [AlertLevel.CRITICAL, AlertLevel.HIGH]]
        
        if not critical_alerts:
            logger.info("–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return True
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º email
            subject = f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ - {len(critical_alerts)} —Ç–æ–≤–∞—Ä–æ–≤"
            
            html_body = self._create_email_template(critical_alerts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SMTP)
            logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")
            logger.info(f"   –¢–µ–º–∞: {subject}")
            logger.info(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(critical_alerts)}")
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email
            # self._send_smtp_email(recipients, subject, html_body)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def _create_email_template(self, alerts: List[Alert]) -> str:
        """–°–æ–∑–¥–∞—Ç—å HTML —à–∞–±–ª–æ–Ω –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        html = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; }}
                .critical {{ color: #dc3545; font-weight: bold; }}
                .high {{ color: #fd7e14; font-weight: bold; }}
                .medium {{ color: #ffc107; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h2>üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö</h2>
            <p>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
            
            <h3>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</h3>
            <table>
                <tr>
                    <th>SKU</th>
                    <th>–¢–æ–≤–∞—Ä</th>
                    <th>–û—Å—Ç–∞—Ç–æ–∫</th>
                    <th>–î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è</th>
                    <th>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</th>
                </tr>
        """
        
        for alert in alerts:
            level_class = alert.alert_level.value.lower()
            html += f"""
                <tr>
                    <td>{alert.sku}</td>
                    <td>{alert.product_name[:50]}</td>
                    <td class="{level_class}">{alert.current_stock} —à—Ç.</td>
                    <td class="{level_class}">{alert.days_until_stockout or '–ù/–î'}</td>
                    <td>{alert.recommended_action}</td>
                </tr>
            """
        
        html += """
            </table>
            
            <p><strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!</strong></p>
            
            <hr>
            <small>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–∞–º–∏.</small>
        </body>
        </html>
        """
        
        return html
    
    def create_dashboard_alerts(self, alerts: List[Alert]) -> Dict[str, any]:
        """
        –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ.
        
        Args:
            alerts: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        """
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
            alerts_by_level = {}
            for alert in alerts:
                level = alert.alert_level.value
                if level not in alerts_by_level:
                    alerts_by_level[level] = []
                alerts_by_level[level].append({
                    'sku': alert.sku,
                    'product_name': alert.product_name,
                    'message': alert.message,
                    'current_stock': alert.current_stock,
                    'days_until_stockout': alert.days_until_stockout,
                    'recommended_action': alert.recommended_action,
                    'created_at': alert.created_at.strftime('%Y-%m-%d %H:%M')
                })
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
            dashboard_data = {
                'total_alerts': len(alerts),
                'critical_count': len([a for a in alerts if a.alert_level == AlertLevel.CRITICAL]),
                'high_count': len([a for a in alerts if a.alert_level == AlertLevel.HIGH]),
                'medium_count': len([a for a in alerts if a.alert_level == AlertLevel.MEDIUM]),
                'alerts_by_level': alerts_by_level,
                'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            return dashboard_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return {}
    
    def detect_critical_stock_levels(self) -> List[Alert]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
        """
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            cursor.execute("""
                SELECT 
                    product_id, sku, product_name, current_stock, available_stock,
                    days_until_stockout, recommended_order_quantity, priority_level,
                    daily_sales_rate_7d
                FROM replenishment_recommendations
                WHERE analysis_date = (
                    SELECT MAX(analysis_date) FROM replenishment_recommendations
                )
                AND priority_level IN ('CRITICAL', 'HIGH')
                ORDER BY urgency_score DESC
            """)
            
            results = cursor.fetchall()
            cursor.close()
            
            alerts = []
            
            for row in results:
                if row['priority_level'] == 'CRITICAL':
                    alert_type = AlertType.STOCKOUT_CRITICAL
                    alert_level = AlertLevel.CRITICAL
                    message = f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –û–°–¢–ê–¢–û–ö! –¢–æ–≤–∞—Ä {row['sku']} –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {row['days_until_stockout'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –¥–Ω–µ–π"
                else:
                    alert_type = AlertType.STOCKOUT_WARNING
                    alert_level = AlertLevel.HIGH
                    message = f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ {row['sku']}. –û—Å—Ç–∞—Ç–æ–∫: {row['available_stock']} —à—Ç."
                
                alert = Alert(
                    product_id=row['product_id'],
                    sku=row['sku'],
                    product_name=row['product_name'],
                    alert_type=alert_type,
                    alert_level=alert_level,
                    message=message,
                    current_stock=row['current_stock'],
                    days_until_stockout=row['days_until_stockout'],
                    recommended_action=f"–ó–∞–∫–∞–∑–∞—Ç—å {row['recommended_order_quantity']} —à—Ç.",
                    created_at=datetime.now()
                )
                alerts.append(alert)
            
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            return alerts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return []
    
    def detect_slow_moving_inventory(self, days_threshold: int = 30) -> List[Alert]:
        """
        –û–±–Ω–∞—Ä—É–∂–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã.
        
        Args:
            days_threshold: –ü–æ—Ä–æ–≥ –≤ –¥–Ω—è—Ö –±–µ–∑ –ø—Ä–æ–¥–∞–∂
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –æ –º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–∞—Ö
        """
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            cursor.execute("""
                SELECT 
                    rr.product_id, rr.sku, rr.product_name, rr.current_stock,
                    rr.last_sale_date, rr.daily_sales_rate_30d
                FROM replenishment_recommendations rr
                WHERE rr.analysis_date = (
                    SELECT MAX(analysis_date) FROM replenishment_recommendations
                )
                AND (
                    rr.last_sale_date < DATE_SUB(CURDATE(), INTERVAL %s DAY)
                    OR rr.last_sale_date IS NULL
                )
                AND rr.current_stock > 0
                ORDER BY rr.last_sale_date ASC
            """, (days_threshold,))
            
            results = cursor.fetchall()
            cursor.close()
            
            alerts = []
            
            for row in results:
                days_since_sale = 999
                if row['last_sale_date']:
                    days_since_sale = (datetime.now().date() - row['last_sale_date']).days
                
                alert = Alert(
                    product_id=row['product_id'],
                    sku=row['sku'],
                    product_name=row['product_name'],
                    alert_type=AlertType.SLOW_MOVING,
                    alert_level=AlertLevel.MEDIUM,
                    message=f"üêå –ú–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏–π—Å—è —Ç–æ–≤–∞—Ä {row['sku']}. –ù–µ—Ç –ø—Ä–æ–¥–∞–∂ {days_since_sale} –¥–Ω–µ–π.",
                    current_stock=row['current_stock'],
                    days_until_stockout=None,
                    recommended_action="–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã",
                    created_at=datetime.now()
                )
                alerts.append(alert)
            
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(alerts)} –º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤")
            return alerts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []
    
    def process_all_alerts(self) -> Dict[str, any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤.
        
        Returns:
            –°–≤–æ–¥–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∞–ª–µ—Ä—Ç–∞–º
        """
        logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
            critical_alerts = self.detect_critical_stock_levels()
            slow_moving_alerts = self.detect_slow_moving_inventory()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã
            all_alerts = critical_alerts + slow_moving_alerts
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_success = self.save_alerts_to_db(all_alerts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            email_success = self.send_email_alerts(all_alerts)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
            dashboard_data = self.create_dashboard_alerts(all_alerts)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = {
                'total_alerts': len(all_alerts),
                'critical_alerts': len([a for a in all_alerts if a.alert_level == AlertLevel.CRITICAL]),
                'high_alerts': len([a for a in all_alerts if a.alert_level == AlertLevel.HIGH]),
                'medium_alerts': len([a for a in all_alerts if a.alert_level == AlertLevel.MEDIUM]),
                'save_success': save_success,
                'email_success': email_success,
                'dashboard_data': dashboard_data,
                'processed_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {summary['total_alerts']}")
            logger.info(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary['critical_alerts']}")
            logger.info(f"   - –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {summary['high_alerts']}")
            logger.info(f"   - –°—Ä–µ–¥–Ω–∏—Ö: {summary['medium_alerts']}")
            
            return summary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return {}
    
    def get_active_alerts(self, limit: int = 50) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        """
        try:
            cursor = self.connection.cursor(dictionary=True)
            
            cursor.execute("""
                SELECT 
                    id, product_id, sku, product_name, alert_type, alert_level,
                    message, current_stock, days_until_stockout, recommended_action,
                    status, created_at
                FROM replenishment_alerts
                WHERE status = 'NEW'
                    AND created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
                ORDER BY 
                    CASE alert_level
                        WHEN 'CRITICAL' THEN 4
                        WHEN 'HIGH' THEN 3
                        WHEN 'MEDIUM' THEN 2
                        ELSE 1
                    END DESC,
                    created_at DESC
                LIMIT %s
            """, (limit,))
            
            results = cursor.fetchall()
            cursor.close()
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(results)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    def acknowledge_alert(self, alert_id: int, acknowledged_by: str) -> bool:
        """
        –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ª–µ—Ä—Ç–∞.
        
        Args:
            alert_id: ID –∞–ª–µ—Ä—Ç–∞
            acknowledged_by: –ö—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            cursor = self.connection.cursor()
            
            cursor.execute("""
                UPDATE replenishment_alerts 
                SET status = 'ACKNOWLEDGED',
                    acknowledged_by = %s,
                    acknowledged_at = NOW()
                WHERE id = %s
            """, (acknowledged_by, alert_id))
            
            self.connection.commit()
            cursor.close()
            
            logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç {alert_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {acknowledged_by}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ {alert_id}: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        if self.connection:
            self.connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤."""
    logger.info("üö® –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
    
    alert_manager = None
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
        alert_manager = AlertManager()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã
        summary = alert_manager.process_all_alerts()
        
        if summary:
            print(f"\nüìä –°–í–û–î–ö–ê –ü–û –ê–õ–ï–†–¢–ê–ú:")
            print("=" * 50)
            print(f"–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {summary['total_alerts']}")
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary['critical_alerts']}")
            print(f"–í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {summary['high_alerts']}")
            print(f"–°—Ä–µ–¥–Ω–∏—Ö: {summary['medium_alerts']}")
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: {'‚úÖ' if summary['save_success'] else '‚ùå'}")
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ email: {'‚úÖ' if summary['email_success'] else '‚ùå'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        active_alerts = alert_manager.get_active_alerts(limit=10)
        
        if active_alerts:
            print(f"\nüîî –ê–ö–¢–ò–í–ù–´–ï –ê–õ–ï–†–¢–´ ({len(active_alerts)}):")
            print("=" * 80)
            
            for i, alert in enumerate(active_alerts, 1):
                level_emoji = {
                    'CRITICAL': 'üö®',
                    'HIGH': '‚ö†Ô∏è',
                    'MEDIUM': 'üìã',
                    'LOW': '‚ÑπÔ∏è',
                    'INFO': 'üí°'
                }.get(alert['alert_level'], 'üìã')
                
                print(f"\n{i}. {level_emoji} {alert['alert_level']} - {alert['sku']}")
                print(f"   {alert['message']}")
                print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {alert['recommended_action']}")
                print(f"   –°–æ–∑–¥–∞–Ω: {alert['created_at']}")
        
        print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main(): {e}")
        
    finally:
        if alert_manager:
            alert_manager.close()


if __name__ == "__main__":
    main()