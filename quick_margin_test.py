#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã.
"""

import sys
import os
import logging
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db
from run_aggregation import aggregate_daily_metrics

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_database_readiness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ —Ä–∞—Å—á–µ—Ç—É –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ margin_percent
        cursor.execute("""
            SELECT COLUMN_NAME 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE() 
                AND TABLE_NAME = 'metrics_daily' 
                AND COLUMN_NAME = 'margin_percent'
        """)
        
        has_margin_percent = cursor.fetchone() is not None
        logger.info(f"   –ö–æ–ª–æ–Ω–∫–∞ margin_percent: {'‚úÖ' if has_margin_percent else '‚ùå'}")
        
        if not has_margin_percent:
            logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ margin_percent –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            logger.error("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: mysql -u root -p mi_core_db < add_margin_percent_column.sql")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT COUNT(*) as count FROM fact_orders")
        orders_count = cursor.fetchone()['count']
        logger.info(f"   –ó–∞–∫–∞–∑–æ–≤ –≤ fact_orders: {orders_count:,}")
        
        cursor.execute("SELECT COUNT(*) as count FROM fact_transactions")
        transactions_count = cursor.fetchone()['count']
        logger.info(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ fact_transactions: {transactions_count:,}")
        
        cursor.execute("SELECT COUNT(*) as count FROM dim_products WHERE cost_price IS NOT NULL")
        products_with_cost = cursor.fetchone()['count']
        logger.info(f"   –¢–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {products_with_cost:,}")
        
        # 3. –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cursor.execute("""
            SELECT 
                fo.order_date,
                COUNT(*) as orders_count,
                SUM(fo.qty * fo.price) as revenue
            FROM fact_orders fo
            WHERE fo.transaction_type = '–ø—Ä–æ–¥–∞–∂–∞'
                AND fo.order_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
            GROUP BY fo.order_date
            HAVING orders_count >= 5
            ORDER BY fo.order_date DESC
            LIMIT 1
        """)
        
        test_date_info = cursor.fetchone()
        
        if test_date_info:
            test_date = test_date_info['order_date'].strftime('%Y-%m-%d')
            logger.info(f"   –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: {test_date} ({test_date_info['orders_count']} –∑–∞–∫–∞–∑–æ–≤)")
            
            cursor.close()
            connection.close()
            return test_date
        else:
            logger.warning("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            cursor.close()
            connection.close()
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_margin_calculation(test_date: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã."""
    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {test_date}")
    
    try:
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("""
            SELECT 
                COUNT(*) as orders_count,
                SUM(qty * price) as total_revenue,
                COUNT(DISTINCT client_id) as clients_count
            FROM fact_orders 
            WHERE order_date = %s AND transaction_type = '–ø—Ä–æ–¥–∞–∂–∞'
        """, (test_date,))
        
        source_data = cursor.fetchone()
        logger.info(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ {test_date}:")
        logger.info(f"     - –ó–∞–∫–∞–∑–æ–≤: {source_data['orders_count']}")
        logger.info(f"     - –í—ã—Ä—É—á–∫–∞: {source_data['total_revenue']:.2f} —Ä—É–±")
        logger.info(f"     - –ö–ª–∏–µ–Ω—Ç–æ–≤: {source_data['clients_count']}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.execute("""
            SELECT 
                COUNT(*) as transactions_count,
                SUM(ABS(amount)) as total_amount
            FROM fact_transactions 
            WHERE transaction_date = %s
        """, (test_date,))
        
        trans_data = cursor.fetchone()
        logger.info(f"     - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {trans_data['transactions_count']}")
        logger.info(f"     - –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {trans_data['total_amount']:.2f} —Ä—É–±")
        
        # 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
        cursor.execute("DELETE FROM metrics_daily WHERE metric_date = %s", (test_date,))
        connection.commit()
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        logger.info("   üöÄ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏...")
        success = aggregate_daily_metrics(connection, test_date)
        
        if not success:
            logger.error("‚ùå –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        cursor.execute("""
            SELECT 
                client_id,
                orders_cnt,
                revenue_sum,
                cogs_sum,
                commission_sum,
                shipping_sum,
                profit_sum,
                margin_percent
            FROM metrics_daily 
            WHERE metric_date = %s
        """, (test_date,))
        
        results = cursor.fetchall()
        
        if not results:
            logger.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
            return False
        
        logger.info(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:")
        total_revenue = 0
        total_profit = 0
        
        for result in results:
            logger.info(f"     –ö–ª–∏–µ–Ω—Ç {result['client_id']}:")
            logger.info(f"       - –ó–∞–∫–∞–∑–æ–≤: {result['orders_cnt']}")
            logger.info(f"       - –í—ã—Ä—É—á–∫–∞: {result['revenue_sum']:.2f} —Ä—É–±")
            logger.info(f"       - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['cogs_sum']:.2f} —Ä—É–±")
            logger.info(f"       - –ö–æ–º–∏—Å—Å–∏–∏: {result['commission_sum']:.2f} —Ä—É–±")
            logger.info(f"       - –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {result['shipping_sum']:.2f} —Ä—É–±")
            logger.info(f"       - –ü—Ä–∏–±—ã–ª—å: {result['profit_sum']:.2f} —Ä—É–±")
            logger.info(f"       - –ú–∞—Ä–∂–∞: {result['margin_percent']:.2f}%")
            
            total_revenue += float(result['revenue_sum'])
            total_profit += float(result['profit_sum'])
        
        overall_margin = (total_profit / total_revenue * 100) if total_revenue > 0 else 0
        logger.info(f"   üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        logger.info(f"     - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:.2f} —Ä—É–±")
        logger.info(f"     - –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} —Ä—É–±")
        logger.info(f"     - –û–±—â–∞—è –º–∞—Ä–∂–∞: {overall_margin:.2f}%")
        
        cursor.close()
        connection.close()
        
        logger.info("‚úÖ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞."""
    logger.info("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    logger.info("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    test_date = check_database_readiness()
    
    if not test_date:
        logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    success = test_margin_calculation(test_date)
    
    logger.info("=" * 60)
    if success:
        logger.info("üéâ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info("üí° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é: python3 run_aggregation.py")
    else:
        logger.error("‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–ê–ú–ò")
        logger.error("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    return success


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)