#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$SCRIPT_DIR/logs/post_launch_monitoring_$(date +%Y%m%d_%H%M%S).log"
MONITORING_DURATION=${MONITORING_DURATION:-48} # —á–∞—Å–æ–≤
CHECK_INTERVAL=${CHECK_INTERVAL:-300} # —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO:${NC} $1" | tee -a "$LOG_FILE"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    mkdir -p "$SCRIPT_DIR/logs"
    mkdir -p "$SCRIPT_DIR/monitoring-data"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
check_api_health() {
    local api_url="http://localhost:8080"
    local health_status="UNKNOWN"
    local response_time=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    if response=$(curl -s -w "%{http_code}:%{time_total}" "$api_url/health" 2>/dev/null); then
        local http_code=$(echo "$response" | cut -d':' -f1)
        response_time=$(echo "$response" | cut -d':' -f2)
        
        if [ "$http_code" = "200" ]; then
            health_status="HEALTHY"
        else
            health_status="UNHEALTHY (HTTP $http_code)"
        fi
    else
        health_status="UNREACHABLE"
    fi
    
    echo "$health_status:$response_time"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
check_api_performance() {
    local api_url="http://localhost:8080/api"
    local endpoints=(
        "master-products"
        "data-quality/metrics"
        "sku-mapping?limit=10"
    )
    
    local total_time=0
    local successful_requests=0
    local failed_requests=0
    
    for endpoint in "${endpoints[@]}"; do
        local start_time=$(date +%s.%N)
        
        if curl -s -f "$api_url/$endpoint" > /dev/null 2>&1; then
            ((successful_requests++))
        else
            ((failed_requests++))
        fi
        
        local end_time=$(date +%s.%N)
        local request_time=$(echo "$end_time - $start_time" | bc)
        total_time=$(echo "$total_time + $request_time" | bc)
    done
    
    local avg_time=$(echo "scale=3; $total_time / ${#endpoints[@]}" | bc)
    local success_rate=$(echo "scale=2; $successful_requests * 100 / (${#endpoints[@]})" | bc)
    
    echo "$avg_time:$success_rate:$successful_requests:$failed_requests"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database_health() {
    local db_status="UNKNOWN"
    local connection_count=0
    local query_time=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -e "SELECT 1" "$DB_NAME" &>/dev/null; then
        db_status="CONNECTED"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        connection_count=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -se "SHOW STATUS LIKE 'Threads_connected'" "$DB_NAME" | awk '{print $2}')
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        local start_time=$(date +%s.%N)
        mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -se "SELECT COUNT(*) FROM master_products" "$DB_NAME" &>/dev/null
        local end_time=$(date +%s.%N)
        query_time=$(echo "scale=3; $end_time - $start_time" | bc)
    else
        db_status="DISCONNECTED"
    fi
    
    echo "$db_status:$connection_count:$query_time"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
check_system_resources() {
    # CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
    
    # –ü–∞–º—è—Ç—å
    local memory_info=$(free | grep Mem)
    local total_mem=$(echo $memory_info | awk '{print $2}')
    local used_mem=$(echo $memory_info | awk '{print $3}')
    local memory_usage=$(echo "scale=2; $used_mem * 100 / $total_mem" | bc)
    
    # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    local disk_usage=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
    
    echo "$cpu_usage:$memory_usage:$disk_usage"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
check_data_quality() {
    local master_count=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -se "SELECT COUNT(*) FROM master_products" "$DB_NAME" 2>/dev/null || echo "0")
    local sku_count=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -se "SELECT COUNT(*) FROM sku_mapping" "$DB_NAME" 2>/dev/null || echo "0")
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏
    local branded_products=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -se "SELECT COUNT(*) FROM master_products WHERE canonical_brand != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥'" "$DB_NAME" 2>/dev/null || echo "0")
    local brand_coverage=0
    if [ "$master_count" -gt 0 ]; then
        brand_coverage=$(echo "scale=2; $branded_products * 100 / $master_count" | bc)
    fi
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    local categorized_products=$(mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -se "SELECT COUNT(*) FROM master_products WHERE canonical_category != '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'" "$DB_NAME" 2>/dev/null || echo "0")
    local category_coverage=0
    if [ "$master_count" -gt 0 ]; then
        category_coverage=$(echo "scale=2; $categorized_products * 100 / $master_count" | bc)
    fi
    
    echo "$master_count:$sku_count:$brand_coverage:$category_coverage"
}

# –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
collect_metrics() {
    local timestamp=$(date -Iseconds)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    local api_health=$(check_api_health)
    local api_status=$(echo "$api_health" | cut -d':' -f1)
    local api_response_time=$(echo "$api_health" | cut -d':' -f2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API
    local api_perf=$(check_api_performance)
    local avg_response_time=$(echo "$api_perf" | cut -d':' -f1)
    local success_rate=$(echo "$api_perf" | cut -d':' -f2)
    local successful_requests=$(echo "$api_perf" | cut -d':' -f3)
    local failed_requests=$(echo "$api_perf" | cut -d':' -f4)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    local db_health=$(check_database_health)
    local db_status=$(echo "$db_health" | cut -d':' -f1)
    local db_connections=$(echo "$db_health" | cut -d':' -f2)
    local db_query_time=$(echo "$db_health" | cut -d':' -f3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    local sys_resources=$(check_system_resources)
    local cpu_usage=$(echo "$sys_resources" | cut -d':' -f1)
    local memory_usage=$(echo "$sys_resources" | cut -d':' -f2)
    local disk_usage=$(echo "$sys_resources" | cut -d':' -f3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    local data_quality=$(check_data_quality)
    local master_count=$(echo "$data_quality" | cut -d':' -f1)
    local sku_count=$(echo "$data_quality" | cut -d':' -f2)
    local brand_coverage=$(echo "$data_quality" | cut -d':' -f3)
    local category_coverage=$(echo "$data_quality" | cut -d':' -f4)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    local metrics_file="$SCRIPT_DIR/monitoring-data/metrics_$(date +%Y%m%d_%H%M%S).json"
    
    cat > "$metrics_file" << EOF
{
    "timestamp": "$timestamp",
    "api": {
        "status": "$api_status",
        "health_response_time": $api_response_time,
        "avg_response_time": $avg_response_time,
        "success_rate": $success_rate,
        "successful_requests": $successful_requests,
        "failed_requests": $failed_requests
    },
    "database": {
        "status": "$db_status",
        "connections": $db_connections,
        "query_time": $db_query_time
    },
    "system": {
        "cpu_usage": $cpu_usage,
        "memory_usage": $memory_usage,
        "disk_usage": $disk_usage
    },
    "data_quality": {
        "master_products": $master_count,
        "sku_mappings": $sku_count,
        "brand_coverage": $brand_coverage,
        "category_coverage": $category_coverage
    }
}
EOF
    
    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    echo -e "\n${BLUE}=== –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–∞ $(date) ===${NC}"
    echo "API: $api_status (–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${api_response_time}s)"
    echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $db_status (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: $db_connections)"
    echo "CPU: ${cpu_usage}%, –ü–∞–º—è—Ç—å: ${memory_usage}%, –î–∏—Å–∫: ${disk_usage}%"
    echo "–ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ–¥—É–∫—Ç–æ–≤: $master_count, SKU: $sku_count"
    echo "–ü–æ–∫—Ä—ã—Ç–∏–µ –±—Ä–µ–Ω–¥–∞–º–∏: ${brand_coverage}%, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ${category_coverage}%"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
    check_critical_thresholds "$api_status" "$api_response_time" "$success_rate" "$cpu_usage" "$memory_usage" "$disk_usage"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤
check_critical_thresholds() {
    local api_status="$1"
    local api_response_time="$2"
    local success_rate="$3"
    local cpu_usage="$4"
    local memory_usage="$5"
    local disk_usage="$6"
    
    local alerts=()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if [ "$api_status" != "HEALTHY" ]; then
        alerts+=("üö® API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $api_status")
    elif (( $(echo "$api_response_time > 1.0" | bc -l) )); then
        alerts+=("‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π API: ${api_response_time}s")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
    if (( $(echo "$success_rate < 95" | bc -l) )); then
        alerts+=("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${success_rate}%")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    if (( $(echo "$cpu_usage > 80" | bc -l) )); then
        alerts+=("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: ${cpu_usage}%")
    fi
    
    if (( $(echo "$memory_usage > 85" | bc -l) )); then
        alerts+=("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_usage}%")
    fi
    
    if [ "$disk_usage" -gt 85 ]; then
        alerts+=("‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${disk_usage}%")
    fi
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
    if [ ${#alerts[@]} -gt 0 ]; then
        for alert in "${alerts[@]}"; do
            warning "$alert"
        done
        
        send_alert_notification "${alerts[@]}"
    else
        log "‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞–ª–µ—Ä—Ç–∞—Ö
send_alert_notification() {
    local alerts=("$@")
    local alert_message="MDM —Å–∏—Å—Ç–µ–º–∞ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n"
    
    for alert in "${alerts[@]}"; do
        alert_message="$alert_message- $alert\n"
    done
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Slack
    if [ -n "$SLACK_WEBHOOK_URL" ]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$alert_message\"}" \
            "$SLACK_WEBHOOK_URL" &>/dev/null || true
    fi
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ email
    if [ -n "$EMAIL_ALERTS_TO" ]; then
        echo -e "$alert_message" | mail -s "MDM System Alert" "$EMAIL_ALERTS_TO" &>/dev/null || true
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
create_monitoring_report() {
    local report_file="$SCRIPT_DIR/monitoring_report_$(date +%Y%m%d_%H%M%S).json"
    
    info "–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    local metrics_files=("$SCRIPT_DIR"/monitoring-data/metrics_*.json)
    local total_checks=0
    local healthy_checks=0
    local avg_response_time=0
    local min_response_time=999
    local max_response_time=0
    
    if [ ${#metrics_files[@]} -gt 0 ] && [ -f "${metrics_files[0]}" ]; then
        for metrics_file in "${metrics_files[@]}"; do
            if [ -f "$metrics_file" ]; then
                ((total_checks++))
                
                local api_status=$(cat "$metrics_file" | grep -o '"status":"[^"]*"' | head -1 | cut -d'"' -f4)
                if [ "$api_status" = "HEALTHY" ]; then
                    ((healthy_checks++))
                fi
                
                local response_time=$(cat "$metrics_file" | grep -o '"health_response_time":[^,}]*' | cut -d':' -f2)
                if [ -n "$response_time" ]; then
                    avg_response_time=$(echo "$avg_response_time + $response_time" | bc)
                    
                    if (( $(echo "$response_time < $min_response_time" | bc -l) )); then
                        min_response_time=$response_time
                    fi
                    
                    if (( $(echo "$response_time > $max_response_time" | bc -l) )); then
                        max_response_time=$response_time
                    fi
                fi
            fi
        done
        
        if [ $total_checks -gt 0 ]; then
            avg_response_time=$(echo "scale=3; $avg_response_time / $total_checks" | bc)
        fi
    fi
    
    local uptime_percentage=0
    if [ $total_checks -gt 0 ]; then
        uptime_percentage=$(echo "scale=2; $healthy_checks * 100 / $total_checks" | bc)
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    local current_data=$(check_data_quality)
    local current_master_count=$(echo "$current_data" | cut -d':' -f1)
    local current_sku_count=$(echo "$current_data" | cut -d':' -f2)
    
    cat > "$report_file" << EOF
{
    "monitoring_period": {
        "start_time": "$(date -d "$MONITORING_DURATION hours ago" -Iseconds)",
        "end_time": "$(date -Iseconds)",
        "duration_hours": $MONITORING_DURATION
    },
    "system_stability": {
        "total_checks": $total_checks,
        "healthy_checks": $healthy_checks,
        "uptime_percentage": $uptime_percentage,
        "avg_response_time": $avg_response_time,
        "min_response_time": $min_response_time,
        "max_response_time": $max_response_time
    },
    "current_system_state": {
        "master_products": $current_master_count,
        "sku_mappings": $current_sku_count,
        "api_status": "$(check_api_health | cut -d':' -f1)",
        "database_status": "$(check_database_health | cut -d':' -f1)"
    },
    "recommendations": [
        $([ $total_checks -eq 0 ] && echo '"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"' || echo '')
        $([ $(echo "$uptime_percentage < 99" | bc -l) -eq 1 ] && echo '"–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ—Å—Ç–æ–µ–≤ —Å–∏—Å—Ç–µ–º—ã",' || echo '')
        $([ $(echo "$avg_response_time > 0.5" | bc -l) -eq 1 ] && echo '"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API",' || echo '')
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"
    ],
    "overall_status": "$([ $(echo "$uptime_percentage >= 99" | bc -l) -eq 1 ] && echo "STABLE" || echo "NEEDS_ATTENTION")"
}
EOF
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –∏–∑ JSON
    sed -i 's/,]/]/g' "$report_file"
    sed -i 's/\[,/[/g' "$report_file"
    
    log "‚úì –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $report_file"
    
    # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    echo -e "\n${GREEN}=== –°–í–û–î–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===${NC}"
    echo "–ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $MONITORING_DURATION —á–∞—Å–æ–≤"
    echo "–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $total_checks"
    echo "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime_percentage}%"
    echo "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${avg_response_time}s"
    echo "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $([ $(echo "$uptime_percentage >= 99" | bc -l) -eq 1 ] && echo "–°–¢–ê–ë–ò–õ–¨–ù–û" || echo "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø")"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main() {
    log "üîç === –ù–ê–ß–ò–ù–ê–ï–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê MDM –°–ò–°–¢–ï–ú–´ ==="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    local continuous_mode=false
    local generate_report=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --continuous)
                continuous_mode=true
                shift
                ;;
            --duration)
                MONITORING_DURATION="$2"
                shift 2
                ;;
            --interval)
                CHECK_INTERVAL="$2"
                shift 2
                ;;
            --report)
                generate_report=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo "–û–ø—Ü–∏–∏:"
                echo "  --continuous         –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
                echo "  --duration HOURS     –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 48)"
                echo "  --interval SECONDS   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)"
                echo "  --report             –°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º"
                echo "  --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                exit 0
                ;;
            *)
                error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done
    
    create_directories
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f "$SCRIPT_DIR/../production/.env" ]; then
        source "$SCRIPT_DIR/../production/.env"
    fi
    
    if [ "$generate_report" = true ]; then
        create_monitoring_report
        exit 0
    fi
    
    log "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    log "- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $MONITORING_DURATION —á–∞—Å–æ–≤"
    log "- –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–æ–∫: $CHECK_INTERVAL —Å–µ–∫—É–Ω–¥"
    log "- –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º: $continuous_mode"
    
    local start_time=$(date +%s)
    local end_time=$((start_time + MONITORING_DURATION * 3600))
    local check_count=0
    
    while true; do
        ((check_count++))
        
        log "--- –ü—Ä–æ–≤–µ—Ä–∫–∞ #$check_count ---"
        collect_metrics
        
        local current_time=$(date +%s)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if [ "$continuous_mode" != true ] && [ $current_time -ge $end_time ]; then
            log "–ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"
            break
        fi
        
        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if [ "$continuous_mode" = true ] || [ $current_time -lt $end_time ]; then
            info "–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ $CHECK_INTERVAL —Å–µ–∫—É–Ω–¥..."
            sleep $CHECK_INTERVAL
        fi
    done
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    create_monitoring_report
    
    log "üèÅ === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù ==="
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"