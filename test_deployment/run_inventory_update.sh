#!/bin/bash

# ===================================================================
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
# 
# –û–ø–∏—Å–∞–Ω–∏–µ: –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon –∏ Wildberries
# –ß–∞—Å—Ç–æ—Ç–∞: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 03:00)
# Cron: 0 3 * * * /path/to/mi_core_etl/run_inventory_update.sh
# 
# –ê–≤—Ç–æ—Ä: ETL System
# –î–∞—Ç–∞: 20 —Å–µ–Ω—Ç—è–±—Ä—è 2025
# ===================================================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PROJECT_DIR="/home/vladimir/mi_core_etl"
PYTHON_PATH="$PROJECT_DIR/venv/bin/python3"
LOG_DIR="$PROJECT_DIR/logs"
LOG_FILE="$LOG_DIR/inventory_update_$(date +%Y-%m-%d).log"
LOCK_FILE="$PROJECT_DIR/inventory_update.lock"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
cleanup() {
    log_message "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º lock —Ñ–∞–π–ª"
    rm -f "$LOCK_FILE"
    exit 1
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap cleanup SIGINT SIGTERM

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
if [ -f "$LOCK_FILE" ]; then
    PID=$(cat "$LOCK_FILE")
    if ps -p "$PID" > /dev/null 2>&1; then
        log_message "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
        exit 1
    else
        log_message "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º"
        rm -f "$LOCK_FILE"
    fi
fi

# –°–æ–∑–¥–∞–µ–º lock —Ñ–∞–π–ª
echo $$ > "$LOCK_FILE"

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
log_message "üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"
log_message "–ü—Ä–æ–µ–∫—Ç: $PROJECT_DIR"
log_message "Python: $PYTHON_PATH"
log_message "–õ–æ–≥ —Ñ–∞–π–ª: $LOG_FILE"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
if [ ! -d "$PROJECT_DIR" ]; then
    log_message "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
    rm -f "$LOCK_FILE"
    exit 1
fi

if [ ! -f "$PYTHON_PATH" ]; then
    log_message "‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω: $PYTHON_PATH"
    rm -f "$LOCK_FILE"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$LOG_DIR"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$PROJECT_DIR" || {
    log_message "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞"
    rm -f "$LOCK_FILE"
    exit 1
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export PYTHONPATH="$PROJECT_DIR:$PYTHONPATH"
export PYTHONIOENCODING=utf-8
export LANG=ru_RU.UTF-8
export LC_ALL=ru_RU.UTF-8

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
run_task() {
    local task_name="$1"
    local command="$2"
    
    log_message "‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º: $task_name"
    
    if eval "$command" >> "$LOG_FILE" 2>&1; then
        log_message "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: $task_name"
        return 0
    else
        local exit_code=$?
        log_message "‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: $task_name (–∫–æ–¥: $exit_code)"
        return $exit_code
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
INVENTORY_EXIT_CODE=0

# –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
run_task "–ò–º–ø–æ—Ä—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤" "$PYTHON_PATH importers/stock_importer.py"
INVENTORY_EXIT_CODE=$?

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ $INVENTORY_EXIT_CODE -eq 0 ]; then
    log_message "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log_message "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤..."
    run_task "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤" "$PYTHON_PATH -c \"
import sys
sys.path.append('importers')
from ozon_importer import connect_to_db

try:
    connection = connect_to_db()
    cursor = connection.cursor(dictionary=True)
    
    cursor.execute('''
        SELECT 
            source,
            COUNT(*) as total_records,
            COUNT(DISTINCT product_id) as unique_products,
            SUM(quantity_present) as total_present,
            SUM(quantity_reserved) as total_reserved
        FROM inventory 
        GROUP BY source
    ''')
    
    stats = cursor.fetchall()
    print('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–°–¢–ê–¢–ö–û–í:')
    for stat in stats:
        print(f'{stat[\\\"source\\\"]}: {stat[\\\"total_records\\\"]} –∑–∞–ø–∏—Å–µ–π, {stat[\\\"unique_products\\\"]} —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ—Å—Ç—É–ø–Ω–æ: {stat[\\\"total_present\\\"]}')
    
    cursor.close()
    connection.close()
    
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
\""
    
else
    log_message "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: $INVENTORY_EXIT_CODE)"
fi

# –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
log_message "üóÇÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤..."
find "$LOG_DIR" -name "inventory_update_*.log" -mtime +30 -delete 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ lock —Ñ–∞–π–ª–∞
rm -f "$LOCK_FILE"

# –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
TOTAL_TIME=$(($(date +%s) - $(stat -c %Y "$LOCK_FILE" 2>/dev/null || echo $(date +%s))))
log_message "‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${TOTAL_TIME} —Å–µ–∫—É–Ω–¥"

if [ $INVENTORY_EXIT_CODE -eq 0 ]; then
    log_message "üéâ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    exit 0
else
    log_message "üí• –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏"
    exit 1
fi
