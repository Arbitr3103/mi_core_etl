#!/usr/bin/env php
<?php
/**
 * –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * php run_activity_monitoring.php [command] [options]
 * 
 * –ö–æ–º–∞–Ω–¥—ã:
 * - check [source] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * - report - —Å–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
 * - cleanup - –æ—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ª–æ–≥–∏
 * - status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * - test-notification - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */

require_once __DIR__ . '/config.php';
require_once __DIR__ . '/src/ETL/Monitoring/ActivityMonitoringService.php';
require_once __DIR__ . '/src/ETL/Monitoring/NotificationService.php';
require_once __DIR__ . '/src/ETL/Config/ETLConfigManager.php';

use MDM\ETL\Monitoring\ActivityMonitoringService;
use MDM\ETL\Monitoring\NotificationService;
use MDM\ETL\Config\ETLConfigManager;

class ActivityMonitoringCLI
{
    private PDO $pdo;
    private ActivityMonitoringService $monitoringService;
    private ETLConfigManager $configManager;
    
    public function __construct()
    {
        $this->pdo = getDatabaseConnection();
        $this->configManager = new ETLConfigManager($this->pdo);
        
        $config = $this->configManager->getETLConfig();
        $this->monitoringService = new ActivityMonitoringService($this->pdo, $config['scheduler'] ?? []);
    }
    
    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
     */
    public function run(array $argv): void
    {
        if (count($argv) < 2) {
            $this->showHelp();
            return;
        }
        
        $command = $argv[1];
        $args = array_slice($argv, 2);
        
        try {
            switch ($command) {
                case 'check':
                    $this->runActivityCheck($args);
                    break;
                    
                case 'report':
                    $this->generateDailyReport();
                    break;
                    
                case 'cleanup':
                    $this->cleanupOldLogs();
                    break;
                    
                case 'status':
                    $this->showMonitoringStatus();
                    break;
                    
                case 'test-notification':
                    $this->sendTestNotification($args);
                    break;
                    
                case 'help':
                case '--help':
                case '-h':
                    $this->showHelp();
                    break;
                    
                default:
                    $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command");
                    $this->showHelp();
            }
        } catch (Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: " . $e->getMessage());
            exit(1);
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function runActivityCheck(array $args): void
    {
        $source = $args[0] ?? null;
        
        $this->info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤...");
        
        if ($source) {
            $this->info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: $source");
            $result = $this->monitoringService->checkSourceActivity($source);
            $this->displaySourceCheckResult($result);
        } else {
            $this->info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");
            $results = $this->monitoringService->checkAllSources();
            
            foreach ($results as $sourceResult) {
                $this->displaySourceCheckResult($sourceResult);
                echo "\n";
            }
            
            $this->displayCheckSummary($results);
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    private function displaySourceCheckResult(array $result): void
    {
        $source = $result['source'];
        $current = $result['current_stats'];
        $previous = $result['previous_stats'];
        
        echo "üìä –ò—Å—Ç–æ—á–Ω–∏–∫: $source\n";
        echo "  –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {$current['active_count']}/{$current['total_count']} ({$current['active_percentage']}%)\n";
        
        if ($result['change_detected']) {
            $changeIcon = $current['active_count'] > $previous['active_count'] ? 'üìà' : 'üìâ';
            echo "  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: $changeIcon " . sprintf('%.2f%%', $result['change_percent']) . 
                 " (–±—ã–ª–æ: {$previous['active_count']})\n";
            
            if ($result['threshold_exceeded']) {
                if ($result['notification_sent']) {
                    echo "  üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥)\n";
                } elseif ($result['notification_suppressed']) {
                    echo "  üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–∞–≤–ª–µ–Ω–æ (cooldown –ø–µ—Ä–∏–æ–¥)\n";
                } else {
                    echo "  ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n";
                }
            }
        } else {
            echo "  ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n";
        }
        
        if ($current['last_check_time']) {
            echo "  üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {$current['last_check_time']}\n";
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    private function displayCheckSummary(array $results): void
    {
        $totalSources = count($results);
        $sourcesWithChanges = count(array_filter($results, fn($r) => $r['change_detected']));
        $notificationsSent = count(array_filter($results, fn($r) => $r['notification_sent']));
        
        echo "üìã –°–≤–æ–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n";
        echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: $totalSources\n";
        echo "  ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏: $sourcesWithChanges\n";
        echo "  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $notificationsSent\n";
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    private function generateDailyReport(): void
    {
        $this->info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤...");
        
        $reportData = $this->monitoringService->generateDailyActivityReport();
        
        $this->success("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω");
        
        echo "\nüìà –°–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–∞:\n";
        echo "  ‚Ä¢ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {$reportData['report_date']}\n";
        echo "  ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {$reportData['summary']['total_sources']}\n";
        echo "  ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {$reportData['summary']['total_products']}\n";
        echo "  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {$reportData['summary']['total_active']} ({$reportData['summary']['active_percentage']}%)\n";
        echo "  ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {$reportData['summary']['total_inactive']}\n";
        echo "  ‚Ä¢ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {$reportData['summary']['total_unchecked']}\n";
        
        if (!empty($reportData['sources'])) {
            echo "\nüìä –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n";
            foreach ($reportData['sources'] as $source) {
                echo "  ‚Ä¢ {$source['source']}: {$source['active_products']}/{$source['total_products']} –∞–∫—Ç–∏–≤–Ω—ã—Ö ({$source['active_percentage']}%)\n";
            }
        }
        
        if (!empty($reportData['recent_changes'])) {
            echo "\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞:\n";
            foreach ($reportData['recent_changes'] as $change) {
                echo "  ‚Ä¢ {$change['source']}: {$change['total_changes']} –∏–∑–º–µ–Ω–µ–Ω–∏–π ";
                echo "(+{$change['became_active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, -{$change['became_inactive']} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)\n";
            }
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–æ–≥–æ–≤
     */
    private function cleanupOldLogs(): void
    {
        $this->info("üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤...");
        
        $deletedCount = $this->monitoringService->cleanupOldActivityLogs();
        
        $this->success("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: $deletedCount");
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    private function showMonitoringStatus(): void
    {
        $this->info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤");
        
        $stats = $this->monitoringService->getMonitoringStats();
        
        echo "\nüîß –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:\n";
        foreach ($stats['monitoring_status'] as $status) {
            $enabledIcon = $status['monitoring_enabled'] ? '‚úÖ' : '‚ùå';
            echo "  $enabledIcon {$status['source']}:\n";
            echo "    ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: " . ($status['monitoring_enabled'] ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω') . "\n";
            echo "    ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {$status['active_count_current']}\n";
            echo "    ‚Ä¢ –ë—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {$status['active_count_previous']}\n";
            echo "    ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {$status['total_count_current']}\n";
            echo "    ‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {$status['change_threshold_percent']}%\n";
            
            if ($status['last_check_at']) {
                echo "    ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {$status['last_check_at']}\n";
            }
            
            if ($status['notification_sent_at']) {
                echo "    ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {$status['notification_sent_at']}\n";
            }
            
            echo "\n";
        }
        
        if (!empty($stats['recent_notifications'])) {
            echo "üîî –ù–µ–¥–∞–≤–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n";
            foreach (array_slice($stats['recent_notifications'], 0, 5) as $notification) {
                $levelIcon = $notification['level'] === 'WARNING' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
                echo "  $levelIcon [{$notification['created_at']}] {$notification['source']}: {$notification['message']}\n";
            }
            echo "\n";
        }
        
        if (!empty($stats['activity_trends'])) {
            echo "üìà –¢—Ä–µ–Ω–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):\n";
            $currentDate = '';
            foreach ($stats['activity_trends'] as $trend) {
                if ($trend['date'] !== $currentDate) {
                    if ($currentDate !== '') echo "\n";
                    echo "  üìÖ {$trend['date']}:\n";
                    $currentDate = $trend['date'];
                }
                echo "    ‚Ä¢ {$trend['source']}: +{$trend['became_active']} –∞–∫—Ç–∏–≤–Ω—ã—Ö, -{$trend['became_inactive']} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö\n";
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    private function sendTestNotification(array $args): void
    {
        $email = $args[0] ?? null;
        
        if ($email) {
            // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º email –¥–ª—è —Ç–µ—Å—Ç–∞
            $this->configManager->setConfigValue('scheduler', 'activity_notification_email', $email, 'Test email for notifications');
        }
        
        $this->info("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        $testNotification = [
            'type' => 'test',
            'subject' => '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤',
            'message' => "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n" .
                        "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n" .
                        "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: " . date('Y-m-d H:i:s') . "\n" .
                        "–°–µ—Ä–≤–µ—Ä: " . gethostname(),
            'priority' => 'low',
            'source' => 'test',
            'data' => [
                'test_mode' => true,
                'sent_from_cli' => true,
                'php_version' => PHP_VERSION,
                'server_time' => date('c')
            ]
        ];
        
        $notificationService = new NotificationService($this->pdo, [
            'enabled' => true,
            'email_enabled' => true,
            'log_enabled' => true
        ]);
        
        $success = $notificationService->sendNotification($testNotification);
        
        if ($success) {
            $this->success("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            
            if ($email) {
                echo "üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫: $email\n";
            } else {
                $configuredEmail = $this->configManager->getConfigValue('scheduler', 'activity_notification_email', '');
                if ($configuredEmail) {
                    echo "üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫: $configuredEmail\n";
                } else {
                    echo "‚ö†Ô∏è Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏.\n";
                }
            }
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    private function showHelp(): void
    {
        echo "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤\n\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php run_activity_monitoring.php <command> [options]\n\n";
        echo "–ö–æ–º–∞–Ω–¥—ã:\n";
        echo "  check [source]           –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤\n";
        echo "  report                   –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n";
        echo "  cleanup                  –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n";
        echo "  status                   –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n";
        echo "  test-notification [email] –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n";
        echo "  help                     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n";
        echo "–ü—Ä–∏–º–µ—Ä—ã:\n";
        echo "  php run_activity_monitoring.php check                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n";
        echo "  php run_activity_monitoring.php check ozon               # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ Ozon\n";
        echo "  php run_activity_monitoring.php report                   # –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n";
        echo "  php run_activity_monitoring.php test-notification user@example.com  # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n";
        echo "  php run_activity_monitoring.php status                   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å\n\n";
        echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞:\n";
        echo "  –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n";
        echo "  php etl_cli.php config scheduler activity_notification_email your@email.com\n\n";
        echo "  –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):\n";
        echo "  php etl_cli.php config ozon change_threshold_percent 15\n\n";
    }
    
    /**
     * –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function info(string $message): void
    {
        echo "‚ÑπÔ∏è  $message\n";
    }
    
    /**
     * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    private function success(string $message): void
    {
        echo "‚úÖ $message\n";
    }
    
    /**
     * –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     */
    private function warning(string $message): void
    {
        echo "‚ö†Ô∏è  $message\n";
    }
    
    /**
     * –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
     */
    private function error(string $message): void
    {
        echo "‚ùå $message\n";
    }
}

// –ó–∞–ø—É—Å–∫ CLI
if (php_sapi_name() === 'cli') {
    $cli = new ActivityMonitoringCLI();
    $cli->run($argv);
} else {
    echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
    exit(1);
}