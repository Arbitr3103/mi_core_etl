#!/bin/bash

echo "üîß –†–£–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–ï–†–ê"

# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª
sudo chown vladimir:vladimir /var/www/mi_core_api/importers/stock_importer.py

# –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–º–ø–æ—Ä—Ç–µ—Ä–∞
sudo tee /var/www/mi_core_api/importers/stock_importer_fixed.py << 'EOF'
#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon –∏ Wildberries.
–†–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–∞–±–ª–∏—Ü–µ–π inventory (–Ω–µ inventory_data).
"""

import os
import sys
import logging
import requests
import time
from datetime import datetime
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from ozon_importer import connect_to_db
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class StockImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–µ—Ä–∞."""
        self.connection = None
        self.cursor = None
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def get_ozon_inventory(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon —á–µ—Ä–µ–∑ API."""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon...")
        
        url = "https://api-seller.ozon.ru/v4/product/info/stocks"
        headers = {
            "Client-Id": config.OZON_CLIENT_ID,
            "Api-Key": config.OZON_API_KEY,
            "Content-Type": "application/json"
        }
        
        inventory_data = []
        cursor = ""
        limit = 100
        
        try:
            while True:
                payload = {
                    "filter": {
                        "visibility": "ALL"
                    },
                    "limit": limit
                }
                
                if cursor:
                    payload["cursor"] = cursor
                
                response = requests.post(url, json=payload, headers=headers)
                response.raise_for_status()
                
                data = response.json()
                
                if not data.get('items'):
                    break
                
                items = data['items']
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon (cursor: {cursor[:20]}...)")
                
                for item in items:
                    product_id = self._get_product_id_by_ozon_sku(item.get('offer_id', ''))
                    
                    if not product_id:
                        logger.warning(f"–¢–æ–≤–∞—Ä —Å offer_id {item.get('offer_id')} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        continue
                    
                    for stock in item.get('stocks', []):
                        warehouse_name = f"Ozon-{stock.get('type', 'FBO').upper()}"
                        if stock.get('warehouse_ids'):
                            warehouse_name += f"-{stock['warehouse_ids'][0]}"
                        
                        inventory_record = {
                            'product_id': product_id,
                            'warehouse_name': warehouse_name,
                            'stock_type': stock.get('type', 'fbo').upper(),
                            'quantity_present': stock.get('present', 0),
                            'quantity_reserved': stock.get('reserved', 0),
                            'source': 'Ozon'
                        }
                        inventory_data.append(inventory_record)
                
                cursor = data.get('cursor', '')
                if not cursor or len(items) < limit:
                    break
                
                time.sleep(0.1)
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ozon API: {e}")
            raise
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon: {e}")
            raise
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(inventory_data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon")
        return inventory_data

    def _get_product_id_by_ozon_sku(self, sku_ozon: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Ozon."""
        if not sku_ozon:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE sku_ozon = %s",
                (sku_ozon,)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_ozon {sku_ozon}: {e}")
            return None

    def update_inventory(self, inventory_data: List[Dict[str, Any]], source: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã inventory —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UPSERT –ª–æ–≥–∏–∫–∏."""
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}")
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            delete_query = "DELETE FROM inventory WHERE source = %s"
            self.cursor.execute(delete_query, (source,))
            deleted_count = self.cursor.rowcount
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {source}")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if inventory_data:
                insert_query = """
                INSERT INTO inventory 
                (product_id, warehouse_name, stock_type, quantity_present, quantity_reserved, source)
                VALUES (%(product_id)s, %(warehouse_name)s, %(stock_type)s, 
                       %(quantity_present)s, %(quantity_reserved)s, %(source)s)
                ON DUPLICATE KEY UPDATE
                    quantity_present = VALUES(quantity_present),
                    quantity_reserved = VALUES(quantity_reserved),
                    updated_at = CURRENT_TIMESTAMP
                """
                
                self.cursor.executemany(insert_query, inventory_data)
                inserted_count = self.cursor.rowcount
                
                self.connection.commit()
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ/–≤—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è {source}")
            else:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ {source}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ {source}: {e}")
            self.connection.rollback()
            raise

    def run_inventory_update(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤")
        
        try:
            self.connect_to_database()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ Ozon
            logger.info("=" * 50)
            logger.info("–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–¢–ö–û–í OZON")
            logger.info("=" * 50)
            
            ozon_inventory = self.get_ozon_inventory()
            self.update_inventory(ozon_inventory, 'Ozon')
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._print_inventory_statistics()
            
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            raise
        finally:
            self.close_database_connection()

    def _print_inventory_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º."""
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–°–¢–ê–¢–ö–û–í:")
        logger.info("=" * 40)
        
        try:
            self.cursor.execute("""
                SELECT 
                    source,
                    COUNT(*) as total_records,
                    COUNT(DISTINCT product_id) as unique_products,
                    SUM(quantity_present) as total_present,
                    SUM(quantity_reserved) as total_reserved
                FROM inventory 
                GROUP BY source
            """)
            
            stats = self.cursor.fetchall()
            
            for stat in stats:
                logger.info(f"{stat['source']}:")
                logger.info(f"  –ó–∞–ø–∏—Å–µ–π: {stat['total_records']}")
                logger.info(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stat['unique_products']}")
                logger.info(f"  –î–æ—Å—Ç—É–ø–Ω–æ: {stat['total_present']}")
                logger.info(f"  –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {stat['total_reserved']}")
                logger.info("-" * 30)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    importer = StockImporter()
    importer.run_inventory_update()


if __name__ == "__main__":
    main()
EOF

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–º–ø–æ—Ä—Ç–µ—Ä –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
sudo mv /var/www/mi_core_api/importers/stock_importer.py /var/www/mi_core_api/importers/stock_importer_old.py
sudo mv /var/www/mi_core_api/importers/stock_importer_fixed.py /var/www/mi_core_api/importers/stock_importer.py
sudo chmod +x /var/www/mi_core_api/importers/stock_importer.py

echo "‚úÖ –ò–º–ø–æ—Ä—Ç–µ—Ä –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"

echo "üîÑ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–µ—Ä–∞..."
cd /var/www/mi_core_api
python3 importers/stock_importer.py

echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥: https://api.zavodprostavok.ru/dashboard_marketplace_enhanced.php"