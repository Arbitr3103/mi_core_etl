#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Ozon.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py                    # –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—á–µ—Ä–∞
    python main.py --start-date 2024-01-01 --end-date 2024-01-31  # –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    python main.py --products-only    # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã
    python main.py --orders-only --start-date 2024-01-01  # –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã
    python main.py --transactions-only --start-date 2024-01-01  # –¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
"""

import sys
import os
import argparse
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import import_products, import_orders, import_transactions, logger


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description='–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Ozon')
    
    parser.add_argument(
        '--start-date',
        type=str,
        help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—á–µ—Ä–∞)'
    )
    
    parser.add_argument(
        '--end-date',
        type=str,
        help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—á–µ—Ä–∞)'
    )
    
    parser.add_argument(
        '--products-only',
        action='store_true',
        help='–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã'
    )
    
    parser.add_argument(
        '--orders-only',
        action='store_true',
        help='–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã'
    )
    
    parser.add_argument(
        '--transactions-only',
        action='store_true',
        help='–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
    )
    
    return parser.parse_args()


def get_default_dates():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å)."""
    yesterday = datetime.now() - timedelta(days=1)
    return yesterday.strftime('%Y-%m-%d'), yesterday.strftime('%Y-%m-%d')


def validate_date(date_string):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã."""
    try:
        datetime.strptime(date_string, '%Y-%m-%d')
        return True
    except ValueError:
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Ozon")
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parse_arguments()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
    if args.start_date or args.end_date:
        start_date = args.start_date
        end_date = args.end_date or args.start_date
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç
        if start_date and not validate_date(start_date):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã: {start_date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
            return 1
            
        if end_date and not validate_date(end_date):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã: {end_date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
            return 1
    else:
        start_date, end_date = get_default_dates()
    
    logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∏–º–ø–æ—Ä—Ç–∞: —Å {start_date} –ø–æ {end_date}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        import_products_flag = not (args.orders_only or args.transactions_only)
        import_orders_flag = not (args.products_only or args.transactions_only)
        import_transactions_flag = not (args.products_only or args.orders_only)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º
        if args.products_only:
            import_products_flag = True
            import_orders_flag = False
            import_transactions_flag = False
        elif args.orders_only:
            import_products_flag = False
            import_orders_flag = True
            import_transactions_flag = False
        elif args.transactions_only:
            import_products_flag = False
            import_orders_flag = False
            import_transactions_flag = True
        
        # –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
        if import_products_flag:
            logger.info("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤...")
            import_products()
            logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤
        if import_orders_flag:
            logger.info("üõí –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤...")
            import_orders(start_date, end_date)
            logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ò–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if import_transactions_flag:
            logger.info("üí∞ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
            import_transactions(start_date, end_date)
            logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        logger.info("üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
