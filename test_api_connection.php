<?php
/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

// –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<h2>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MDM —Å–∏—Å—Ç–µ–º—ã</h2>";
echo "<hr>";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º config.php
echo "<h3>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>";
if (file_exists('config.php')) {
    echo "‚úÖ config.php –Ω–∞–π–¥–µ–Ω<br>";
    require_once 'config.php';
    
    echo "DB_HOST: " . DB_HOST . "<br>";
    echo "DB_NAME: " . DB_NAME . "<br>";
    echo "DB_USER: " . DB_USER . "<br>";
    echo "DB_PASSWORD: " . (DB_PASSWORD ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') . "<br>";
} else {
    echo "‚ùå config.php –Ω–µ –Ω–∞–π–¥–µ–Ω<br>";
}

echo "<hr>";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "<h3>2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h3>";
try {
    $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4";
    $pdo = new PDO($dsn, DB_USER, DB_PASSWORD, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    ]);
    
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ<br>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    $tables = ['product_cross_reference', 'dim_products', 'quality_alerts'];
    foreach ($tables as $table) {
        try {
            $stmt = $pdo->query("SELECT COUNT(*) as count FROM $table LIMIT 1");
            $result = $stmt->fetch();
            echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ $table: " . $result['count'] . " –∑–∞–ø–∏—Å–µ–π<br>";
        } catch (Exception $e) {
            echo "‚ùå –¢–∞–±–ª–∏—Ü–∞ $table: " . $e->getMessage() . "<br>";
        }
    }
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "<br>";
}

echo "<hr>";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ñ–∞–π–ª—ã
echo "<h3>3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ñ–∞–π–ª–æ–≤</h3>";
$apiFiles = [
    'api/quality-metrics.php',
    'src/DataQualityMonitor.php'
];

foreach ($apiFiles as $file) {
    if (file_exists($file)) {
        echo "‚úÖ $file –Ω–∞–π–¥–µ–Ω<br>";
    } else {
        echo "‚ùå $file –Ω–µ –Ω–∞–π–¥–µ–Ω<br>";
    }
}

echo "<hr>";

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API –Ω–∞–ø—Ä—è–º—É—é
echo "<h3>4. –¢–µ—Å—Ç API –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö</h3>";
try {
    if (file_exists('src/DataQualityMonitor.php')) {
        require_once 'src/DataQualityMonitor.php';
        
        $monitor = new DataQualityMonitor($pdo);
        $metrics = $monitor->getQualityMetrics();
        
        echo "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç<br>";
        echo "<pre>";
        print_r($metrics);
        echo "</pre>";
    } else {
        echo "‚ùå DataQualityMonitor.php –Ω–µ –Ω–∞–π–¥–µ–Ω<br>";
    }
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ API: " . $e->getMessage() . "<br>";
    echo "–î–µ—Ç–∞–ª–∏: " . $e->getTraceAsString() . "<br>";
}

echo "<hr>";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "<h3>5. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤</h3>";
$dirs = ['.', 'api', 'src', 'html'];
foreach ($dirs as $dir) {
    echo "<strong>$dir/</strong><br>";
    if (is_dir($dir)) {
        $files = scandir($dir);
        foreach ($files as $file) {
            if ($file != '.' && $file != '..') {
                echo "&nbsp;&nbsp;- $file<br>";
            }
        }
    }
    echo "<br>";
}

?>