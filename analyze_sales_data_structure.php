<?php
/**
 * Script to analyze sales data structure in PostgreSQL
 * Part of task 2.1: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
 */

include 'config/database_postgresql.php';

try {
    // Get database connection
    $pdo = getDatabaseConnection();
    
    if (!$pdo) {
        throw new Exception("Failed to establish database connection");
    }
    
    echo "=== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –ü–†–û–î–ê–ñ ===\n\n";
    
    // 1. Find all tables in the database
    echo "1. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n";
    $stmt = $pdo->prepare("
        SELECT table_name, table_type
        FROM information_schema.tables 
        WHERE table_schema = 'public'
        ORDER BY table_name
    ");
    $stmt->execute();
    $tables = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    echo "–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: " . count($tables) . "\n";
    foreach ($tables as $table) {
        echo "  - {$table['table_name']} ({$table['table_type']})\n";
    }
    echo "\n";
    
    // 2. Look for sales-related tables
    echo "2. –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏:\n";
    $sales_keywords = ['order', 'sale', 'transaction', 'purchase', 'revenue', 'sold', 'analytics'];
    $sales_tables = [];
    
    foreach ($tables as $table) {
        $table_name = strtolower($table['table_name']);
        foreach ($sales_keywords as $keyword) {
            if (strpos($table_name, $keyword) !== false) {
                $sales_tables[] = $table['table_name'];
                echo "  ‚úÖ {$table['table_name']} - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥–∞–∂\n";
                break;
            }
        }
    }
    
    if (empty($sales_tables)) {
        echo "  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å —è–≤–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–¥–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n";
        echo "  –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏...\n\n";
        
        // 3. Check all tables for sales-related columns
        echo "3. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –ø—Ä–æ–¥–∞–∂:\n";
        $sales_columns = ['quantity_sold', 'sold_quantity', 'sales_amount', 'revenue', 'order_date', 'sale_date', 'sold_at', 'purchase_date'];
        
        foreach ($tables as $table) {
            $table_name = $table['table_name'];
            
            // Get columns for this table
            $stmt = $pdo->prepare("
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = ?
                ORDER BY ordinal_position
            ");
            $stmt->execute([$table_name]);
            $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $has_sales_columns = false;
            $found_columns = [];
            
            foreach ($columns as $col) {
                $col_name = strtolower($col['column_name']);
                foreach ($sales_columns as $sales_col) {
                    if (strpos($col_name, str_replace('_', '', $sales_col)) !== false || 
                        strpos($col_name, $sales_col) !== false) {
                        $has_sales_columns = true;
                        $found_columns[] = $col['column_name'];
                    }
                }
                
                // Also check for date columns that might indicate sales
                if (strpos($col_name, 'date') !== false || strpos($col_name, 'time') !== false) {
                    if ($col['data_type'] === 'timestamp with time zone' || $col['data_type'] === 'date') {
                        $found_columns[] = $col['column_name'] . ' (date field)';
                    }
                }
            }
            
            if ($has_sales_columns || !empty($found_columns)) {
                echo "  üìä $table_name:\n";
                foreach ($found_columns as $found_col) {
                    echo "    - $found_col\n";
                }
                $sales_tables[] = $table_name;
            }
        }
    }
    
    echo "\n";
    
    // 4. Detailed analysis of potential sales tables
    if (!empty($sales_tables)) {
        echo "4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–¥–∞–∂:\n";
        
        foreach (array_unique($sales_tables) as $table_name) {
            echo "\n--- –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: $table_name ---\n";
            
            // Get table structure
            $stmt = $pdo->prepare("
                SELECT 
                    column_name,
                    data_type,
                    is_nullable,
                    column_default
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = ?
                ORDER BY ordinal_position
            ");
            $stmt->execute([$table_name]);
            $columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            printf("%-25s %-20s %-10s\n", "COLUMN", "TYPE", "NULLABLE");
            echo str_repeat("-", 60) . "\n";
            
            foreach ($columns as $col) {
                printf("%-25s %-20s %-10s\n", 
                    $col['column_name'], 
                    $col['data_type'], 
                    $col['is_nullable']
                );
            }
            
            // Get record count
            try {
                $stmt = $pdo->prepare("SELECT COUNT(*) as count FROM \"$table_name\"");
                $stmt->execute();
                $count = $stmt->fetch(PDO::FETCH_ASSOC);
                echo "\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {$count['count']}\n";
                
                // Sample data if table has records
                if ($count['count'] > 0) {
                    echo "\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏):\n";
                    $stmt = $pdo->prepare("SELECT * FROM \"$table_name\" LIMIT 3");
                    $stmt->execute();
                    $samples = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    
                    if (!empty($samples)) {
                        $headers = array_keys($samples[0]);
                        foreach ($headers as $header) {
                            printf("%-15s ", substr($header, 0, 14));
                        }
                        echo "\n" . str_repeat("-", count($headers) * 16) . "\n";
                        
                        foreach ($samples as $row) {
                            foreach ($row as $value) {
                                printf("%-15s ", substr($value ?: 'NULL', 0, 14));
                            }
                            echo "\n";
                        }
                    }
                }
            } catch (Exception $e) {
                echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n";
            }
        }
    }
    
    // 5. Check inventory table for any sales-related fields
    echo "\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã inventory –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏:\n";
    $stmt = $pdo->prepare("
        SELECT 
            column_name,
            data_type,
            is_nullable
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'inventory'
        ORDER BY ordinal_position
    ");
    $stmt->execute();
    $inventory_columns = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    $sales_related_in_inventory = [];
    foreach ($inventory_columns as $col) {
        $col_name = strtolower($col['column_name']);
        if (strpos($col_name, 'sold') !== false || 
            strpos($col_name, 'sale') !== false || 
            strpos($col_name, 'revenue') !== false ||
            strpos($col_name, 'updated') !== false ||
            strpos($col_name, 'created') !== false) {
            $sales_related_in_inventory[] = $col;
        }
    }
    
    if (!empty($sales_related_in_inventory)) {
        echo "–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –≤ inventory, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏:\n";
        foreach ($sales_related_in_inventory as $col) {
            echo "  - {$col['column_name']} ({$col['data_type']})\n";
        }
    } else {
        echo "–í —Ç–∞–±–ª–∏—Ü–µ inventory –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏.\n";
    }
    
    // 6. Recommendations for next steps
    echo "\n6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤:\n";
    
    if (!empty($sales_tables)) {
        echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂:\n";
        foreach (array_unique($sales_tables) as $table) {
            echo "   - $table\n";
        }
        echo "\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n";
        echo "1. –î–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü\n";
        echo "2. –ù–∞–π—Ç–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –ø—Ä–æ–¥–∞–∂ –∏ inventory\n";
        echo "3. –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n";
    } else {
        echo "‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n";
        echo "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n";
        echo "1. –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n";
        echo "2. –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –ø–æ–ª—É—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ API\n";
        echo "3. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂\n";
        echo "4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–µ updated_at –≤ inventory –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n";
    }
    
    echo "\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===\n";
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
    exit(1);
}
?>