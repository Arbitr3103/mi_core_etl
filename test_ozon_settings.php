<?php
/**
 * Test script for Ozon Settings functionality
 * 
 * Tests the settings interface, validation, and API connection functionality
 * 
 * @version 1.0
 * @author Manhattan System
 */

require_once 'src/classes/OzonAnalyticsAPI.php';

// Database connection configuration
$dbConfig = [
    'host' => 'localhost',
    'dbname' => 'mi_core_db',
    'username' => 'mi_core_user',
    'password' => 'secure_password_123'
];

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Ozon API\n";
echo "=" . str_repeat("=", 50) . "\n\n";

// Test 1: Database connection
echo "1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n";
try {
    $pdo = new PDO(
        "mysql:host={$dbConfig['host']};dbname={$dbConfig['dbname']};charset=utf8mb4",
        $dbConfig['username'],
        $dbConfig['password'],
        [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
            PDO::ATTR_EMULATE_PREPARES => false
        ]
    );
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n\n";
} catch (PDOException $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n\n";
    exit(1);
}

// Test 2: Check if ozon_api_settings table exists
echo "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ozon_api_settings...\n";
try {
    $stmt = $pdo->query("DESCRIBE ozon_api_settings");
    $columns = $stmt->fetchAll();
    
    echo "‚úÖ –¢–∞–±–ª–∏—Ü–∞ ozon_api_settings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
    echo "üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:\n";
    foreach ($columns as $column) {
        echo "   - {$column['Field']} ({$column['Type']})\n";
    }
    echo "\n";
} catch (PDOException $e) {
    echo "‚ùå –¢–∞–±–ª–∏—Ü–∞ ozon_api_settings –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " . $e->getMessage() . "\n";
    echo "üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: migrations/add_ozon_analytics_tables.sql\n\n";
}

// Test 3: Check if token fields exist
echo "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤...\n";
try {
    $stmt = $pdo->query("SHOW COLUMNS FROM ozon_api_settings LIKE 'access_token'");
    $tokenColumn = $stmt->fetch();
    
    if ($tokenColumn) {
        echo "‚úÖ –ü–æ–ª–µ access_token —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
    } else {
        echo "‚ö†Ô∏è –ü–æ–ª–µ access_token –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n";
        echo "üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: migrations/add_ozon_token_fields.sql\n";
    }
    
    $stmt = $pdo->query("SHOW COLUMNS FROM ozon_api_settings LIKE 'token_expiry'");
    $expiryColumn = $stmt->fetch();
    
    if ($expiryColumn) {
        echo "‚úÖ –ü–æ–ª–µ token_expiry —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
    } else {
        echo "‚ö†Ô∏è –ü–æ–ª–µ token_expiry –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n";
        echo "üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: migrations/add_ozon_token_fields.sql\n";
    }
    echo "\n";
} catch (PDOException $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤: " . $e->getMessage() . "\n\n";
}

// Test 4: Test validation functions
echo "4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n";

// Test Client ID validation
$testCases = [
    ['client_id' => '', 'api_key' => 'test', 'expected' => false, 'description' => '–ü—É—Å—Ç–æ–π Client ID'],
    ['client_id' => 'abc123', 'api_key' => 'test', 'expected' => false, 'description' => 'Client ID —Å –±—É–∫–≤–∞–º–∏'],
    ['client_id' => '12', 'api_key' => 'test', 'expected' => false, 'description' => '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π Client ID'],
    ['client_id' => '123456789012345678901', 'api_key' => 'test', 'expected' => false, 'description' => '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π Client ID'],
    ['client_id' => '123456', 'api_key' => '', 'expected' => false, 'description' => '–ü—É—Å—Ç–æ–π API Key'],
    ['client_id' => '123456', 'api_key' => 'test@key', 'expected' => false, 'description' => 'API Key —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏'],
    ['client_id' => '123456', 'api_key' => 'test', 'expected' => false, 'description' => '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π API Key'],
    ['client_id' => '123456', 'api_key' => 'valid-api-key-123456789', 'expected' => true, 'description' => '–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'],
];

foreach ($testCases as $i => $testCase) {
    $result = validateTestCredentials($testCase['client_id'], $testCase['api_key']);
    $status = ($result === $testCase['expected']) ? '‚úÖ' : '‚ùå';
    echo "   {$status} {$testCase['description']}\n";
}
echo "\n";

// Test 5: Test password hashing
echo "5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π...\n";
$testApiKey = 'test-api-key-123456789';
$hash = password_hash($testApiKey, PASSWORD_ARGON2ID, [
    'memory_cost' => 65536,
    'time_cost' => 4,
    'threads' => 3
]);

if ($hash && password_verify($testApiKey, $hash)) {
    echo "‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ Argon2ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    echo "üìè –î–ª–∏–Ω–∞ —Ö–µ—à–∞: " . strlen($hash) . " —Å–∏–º–≤–æ–ª–æ–≤\n";
} else {
    echo "‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π\n";
}
echo "\n";

// Test 6: Test settings CRUD operations
echo "6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...\n";

// Insert test settings
try {
    $testClientId = '123456789';
    $testApiKey = 'test-api-key-for-crud-operations';
    $testApiKeyHash = password_hash($testApiKey, PASSWORD_ARGON2ID, [
        'memory_cost' => 65536,
        'time_cost' => 4,
        'threads' => 3
    ]);
    
    // Clean up any existing test data
    $pdo->exec("DELETE FROM ozon_api_settings WHERE client_id = '$testClientId'");
    
    // Insert
    $sql = "INSERT INTO ozon_api_settings (client_id, api_key_hash, is_active) VALUES (?, ?, TRUE)";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$testClientId, $testApiKeyHash]);
    $insertId = $pdo->lastInsertId();
    echo "‚úÖ –í—Å—Ç–∞–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ID = $insertId\n";
    
    // Read
    $sql = "SELECT * FROM ozon_api_settings WHERE id = ?";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$insertId]);
    $setting = $stmt->fetch();
    
    if ($setting && $setting['client_id'] === $testClientId) {
        echo "‚úÖ –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: Client ID = {$setting['client_id']}\n";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n";
    }
    
    // Update
    $newClientId = '987654321';
    $sql = "UPDATE ozon_api_settings SET client_id = ? WHERE id = ?";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$newClientId, $insertId]);
    
    $sql = "SELECT client_id FROM ozon_api_settings WHERE id = ?";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$insertId]);
    $updatedSetting = $stmt->fetch();
    
    if ($updatedSetting && $updatedSetting['client_id'] === $newClientId) {
        echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –Ω–æ–≤—ã–π Client ID = {$updatedSetting['client_id']}\n";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n";
    }
    
    // Delete
    $sql = "DELETE FROM ozon_api_settings WHERE id = ?";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$insertId]);
    
    $sql = "SELECT COUNT(*) FROM ozon_api_settings WHERE id = ?";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([$insertId]);
    $count = $stmt->fetchColumn();
    
    if ($count == 0) {
        echo "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞\n";
    } else {
        echo "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n";
    }
    
} catch (PDOException $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: " . $e->getMessage() . "\n";
}
echo "\n";

// Test 7: Check file permissions and accessibility
echo "7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...\n";

$filesToCheck = [
    'src/ozon_settings.php' => '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
    'src/api/ozon-settings.php' => 'API —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫',
    'src/js/OzonSettingsManager.js' => 'JavaScript –º–æ–¥—É–ª—å',
    'migrations/add_ozon_token_fields.sql' => '–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤',
    'src/classes/OzonAnalyticsAPI.php' => '–ö–ª–∞—Å—Å OzonAnalyticsAPI'
];

foreach ($filesToCheck as $file => $description) {
    if (file_exists($file)) {
        $permissions = substr(sprintf('%o', fileperms($file)), -4);
        echo "‚úÖ $description: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–∞–≤–∞: $permissions)\n";
    } else {
        echo "‚ùå $description: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ($file)\n";
    }
}
echo "\n";

// Test 8: Test API endpoint accessibility
echo "8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...\n";
if (function_exists('curl_init')) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'http://localhost/src/api/ozon-settings.php?action=get_settings');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);
    curl_setopt($ch, CURLOPT_HEADER, true);
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($httpCode === 200) {
        echo "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 200)\n";
    } else {
        echo "‚ö†Ô∏è API —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ—Ä–Ω—É–ª –∫–æ–¥: $httpCode\n";
        echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞\n";
    }
} else {
    echo "‚ö†Ô∏è cURL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤\n";
}
echo "\n";

// Summary
echo "üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n";
echo "=" . str_repeat("=", 30) . "\n";
echo "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n";
echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
echo "‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç\n";
echo "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π Argon2ID\n";
echo "\n";

echo "üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:\n";
echo "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î\n";
echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫: src/ozon_settings.php\n";
echo "3. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ Client ID –∏ API Key –æ—Ç Ozon\n";
echo "4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API\n";
echo "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥–∞—à–±–æ—Ä–¥–æ–º\n";
echo "\n";

/**
 * Simple validation function for testing
 */
function validateTestCredentials($clientId, $apiKey) {
    if (empty($clientId) || empty($apiKey)) {
        return false;
    }
    
    if (!is_numeric($clientId)) {
        return false;
    }
    
    if (strlen($clientId) < 3 || strlen($clientId) > 20) {
        return false;
    }
    
    if (!preg_match('/^[a-zA-Z0-9\-_]+$/', $apiKey)) {
        return false;
    }
    
    if (strlen($apiKey) < 10 || strlen($apiKey) > 100) {
        return false;
    }
    
    return true;
}
?>