#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ (–≠—Ç–∞–ø 3).
"""

import sys
import os
import json
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import (
    get_postings_from_api, 
    transform_posting_data, 
    load_orders_to_db, 
    connect_to_db
)

def test_3_1_raw_events():
    """–¢–µ—Å—Ç 3.1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–ø–∏—Å—å –≤ raw_events."""
    print("=== –¢–µ—Å—Ç 3.1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–ø–∏—Å—å –≤ raw_events ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    try:
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ {yesterday}")
        postings = get_postings_from_api(yesterday, yesterday)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ raw_events
        connection = connect_to_db()
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT COUNT(*) as count FROM raw_events WHERE event_type='ozon_posting' AND DATE(ingested_at) = %s",
                (yesterday,)
            )
            result = cursor.fetchone()
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ raw_events: {result['count']}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(postings)}")
        
        connection.close()
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–ø–∏—Å—å –≤ raw_events –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        print("–°—Ä–∞–≤–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Ozon")
        return postings
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        return []

def test_3_2_transformation():
    """–¢–µ—Å—Ç 3.2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞."""
    print("\n=== –¢–µ—Å—Ç 3.2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ ===")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω JSON –∏–∑ raw_events –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        connection = connect_to_db()
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT payload FROM raw_events WHERE event_type='ozon_posting' LIMIT 1"
            )
            result = cursor.fetchone()
            
            if not result:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ raw_events –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                connection.close()
                return []
            
            # –ü–∞—Ä—Å–∏–º JSON
            posting_json = json.loads(result['payload'])
            print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑: {posting_json.get('posting_number', 'N/A')}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {len(posting_json.get('products', []))}")
            
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º
            transformed_orders = transform_posting_data(posting_json)
            
            print(f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è fact_orders: {len(transformed_orders)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            for i, order in enumerate(transformed_orders[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"–ó–∞–ø–∏—Å—å {i+1}: SKU={order['sku']}, Qty={order['qty']}, Price={order['price']}")
        
        connection.close()
        
        print("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return transformed_orders
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")
        return []

def test_3_3_fact_orders():
    """–¢–µ—Å—Ç 3.3: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ fact_orders."""
    print("\n=== –¢–µ—Å—Ç 3.3: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ fact_orders ===")
    
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ –≤—á–µ—Ä–∞ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ö
        postings = get_postings_from_api(yesterday, yesterday)
        
        all_orders = []
        for posting in postings:
            orders = transform_posting_data(posting)
            all_orders.extend(orders)
        
        if not all_orders:
            print("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –±–∞–∑—É
        load_orders_to_db(all_orders)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        connection = connect_to_db()
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT COUNT(*) as count FROM fact_orders WHERE order_date = %s",
                (yesterday,)
            )
            result = cursor.fetchone()
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ fact_orders –∑–∞ {yesterday}: {result['count']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            cursor.execute(
                "SELECT * FROM fact_orders WHERE order_date = %s LIMIT 10",
                (yesterday,)
            )
            samples = cursor.fetchall()
            print("\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –≤ fact_orders:")
            for sample in samples:
                print(f"Order: {sample['order_id']}, SKU: {sample['sku']}, Qty: {sample['qty']}, Price: {sample['price']}")
        
        connection.close()
        
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ fact_orders –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ fact_orders: {e}")
        return False

def run_all_order_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤."""
    print("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤\n")
    
    # –¢–µ—Å—Ç 3.1
    postings = test_3_1_raw_events()
    
    # –¢–µ—Å—Ç 3.2
    transformed_orders = test_3_2_transformation()
    
    # –¢–µ—Å—Ç 3.3
    success = test_3_3_fact_orders()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    run_all_order_tests()
