#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import os
import mysql.connector
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def fix_web_database_issues():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ mi_core_db (—Å—Ç–∞—Ä–∞—è –±–∞–∑–∞)
    databases_to_check = ['mi_core_db', 'mi_core']
    
    for db_name in databases_to_check:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_name}")
        
        try:
            connection = mysql.connector.connect(
                host=os.getenv('DB_HOST', 'localhost'),
                user=os.getenv('DB_USER', 'v_admin'),
                password=os.getenv('DB_PASSWORD'),
                database=db_name,
                charset='utf8mb4',
                collation='utf8mb4_unicode_ci'
            )
            
            cursor = connection.cursor()
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {db_name} —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É inventory_data
            try:
                cursor.execute("DESCRIBE inventory_data")
                columns = cursor.fetchall()
                
                # –ò—â–µ–º product_id –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–∏–ø
                product_id_type = None
                for col in columns:
                    if col[0] == 'product_id':
                        product_id_type = col[1]
                        break
                
                print(f"üìã –¢–∏–ø product_id: {product_id_type}")
                
                # –ï—Å–ª–∏ product_id –Ω–µ BIGINT, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                if product_id_type and 'bigint' not in product_id_type.lower():
                    print("üîß –ò–∑–º–µ–Ω—è–µ–º product_id –Ω–∞ BIGINT...")
                    cursor.execute("ALTER TABLE inventory_data MODIFY COLUMN product_id BIGINT NOT NULL")
                    print("‚úÖ product_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ BIGINT")
                else:
                    print("‚úÖ product_id —É–∂–µ BIGINT")
                    
            except mysql.connector.Error as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ inventory_data: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º sync_logs
            try:
                cursor.execute("DESCRIBE sync_logs")
                existing_columns = [row[0] for row in cursor.fetchall()]
                
                # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                required_columns = [
                    ('source', 'VARCHAR(50) DEFAULT "Ozon"'),
                    ('records_inserted', 'INT DEFAULT 0'),
                    ('records_failed', 'INT DEFAULT 0'),
                    ('duration_seconds', 'INT DEFAULT 0'),
                    ('api_requests_count', 'INT DEFAULT 0'),
                    ('warning_message', 'TEXT')
                ]
                
                for column_name, column_definition in required_columns:
                    if column_name not in existing_columns:
                        try:
                            cursor.execute(f"ALTER TABLE sync_logs ADD COLUMN {column_name} {column_definition}")
                            print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ sync_logs")
                        except mysql.connector.Error as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
                    else:
                        print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ sync_logs")
                        
            except mysql.connector.Error as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ sync_logs: {e}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ozon_warehouses –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            try:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS ozon_warehouses (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        warehouse_id BIGINT NOT NULL UNIQUE,
                        name VARCHAR(255) NOT NULL,
                        is_rfbs BOOLEAN DEFAULT FALSE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                """)
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ozon_warehouses —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except mysql.connector.Error as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ozon_warehouses: {e}")
            
            cursor.close()
            connection.close()
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            
        except mysql.connector.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {db_name}: {e}")
            continue

if __name__ == "__main__":
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    fix_web_database_issues()
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")