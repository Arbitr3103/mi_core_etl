#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å API Wildberries.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_wb_api.py --test-config     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    python test_wb_api.py --test-sales      # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂
    python test_wb_api.py --test-finance    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    python test_wb_api.py --test-db         # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    python test_wb_api.py --test-all        # –í—Å–µ —Ç–µ—Å—Ç—ã
"""

import sys
import os
import argparse
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from wb_importer import (
    load_config, connect_to_db, get_client_id_by_name, get_source_id_by_code,
    make_wb_request, get_sales_from_api, get_financial_details_api,
    import_sales, import_financial_details, logger
)


def test_config():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    try:
        config = load_config()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"DB_HOST: {config['DB_HOST']}")
        logger.info(f"DB_NAME: {config['DB_NAME']}")
        logger.info(f"WB_API_URL: {config['WB_API_URL']}")
        logger.info(f"WB_API_KEY: {config['WB_API_KEY'][:10]}...")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_db_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ===")
    
    try:
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute("SELECT VERSION()")
        version = cursor.fetchone()
        cursor.close()
        connection.close()
        
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. MySQL –≤–µ—Ä—Å–∏—è: {version[0]}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


def test_client_source_ids():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è client_id –∏ source_id."""
    logger.info("=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è client_id –∏ source_id ===")
    
    try:
        client_id = get_client_id_by_name('–¢–î –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω')
        source_id = get_source_id_by_code('WB')
        
        if client_id and source_id:
            logger.info(f"‚úÖ client_id: {client_id}, source_id: {source_id}")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å client_id –∏–ª–∏ source_id")
            logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã setup_wb_data.sql")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID: {e}")
        return False


def test_wb_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Wildberries."""
    logger.info("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Wildberries ===")
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–∞—Ö
        response = make_wb_request('/api/v3/warehouses')
        
        if isinstance(response, list):
            logger.info(f"‚úÖ API Wildberries –¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(response)}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {type(response)}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API Wildberries: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å WB_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        return False


def test_sales_api():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç)."""
    logger.info("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è) ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
        end_date = datetime.now() - timedelta(days=1)
        start_date = end_date - timedelta(days=1)
        
        start_date_str = start_date.strftime('%Y-%m-%d')
        end_date_str = end_date.strftime('%Y-%m-%d')
        
        logger.info(f"–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {start_date_str} - {end_date_str}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º API
        sales = get_sales_from_api(start_date_str, end_date_str)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥–∞–∂: {len(sales)}")
        
        if sales:
            sample_sale = sales[0]
            logger.info("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏:")
            for key, value in list(sample_sale.items())[:5]:
                logger.info(f"  {key}: {value}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂: {e}")
        return False


def test_finance_api():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç)."""
    logger.info("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è) ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
        end_date = datetime.now() - timedelta(days=1)
        start_date = end_date - timedelta(days=1)
        
        start_date_str = start_date.strftime('%Y-%m-%d')
        end_date_str = end_date.strftime('%Y-%m-%d')
        
        logger.info(f"–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {start_date_str} - {end_date_str}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º API
        financial_details = get_financial_details_api(start_date_str, end_date_str)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(financial_details)}")
        
        if financial_details:
            sample_detail = financial_details[0]
            logger.info("–ü—Ä–∏–º–µ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:")
            for key, value in list(sample_detail.items())[:5]:
                logger.info(f"  {key}: {value}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π: {e}")
        return False


def test_full_integration():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (—Å –∑–∞–ø–∏—Å—å—é –≤ –ë–î)."""
    logger.info("=== –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        yesterday = datetime.now() - timedelta(days=1)
        test_date = yesterday.strftime('%Y-%m-%d')
        
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∑–∞ {test_date}")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂...")
        import_sales(test_date, test_date)
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π...")
        import_financial_details(test_date, test_date)
        
        logger.info("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Wildberries API')
    
    parser.add_argument('--test-config', action='store_true', help='–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--test-db', action='store_true', help='–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î')
    parser.add_argument('--test-api', action='store_true', help='–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API')
    parser.add_argument('--test-sales', action='store_true', help='–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂')
    parser.add_argument('--test-finance', action='store_true', help='–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π')
    parser.add_argument('--test-integration', action='store_true', help='–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--test-all', action='store_true', help='–í—Å–µ —Ç–µ—Å—Ç—ã')
    
    args = parser.parse_args()
    
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Wildberries API")
    
    tests_passed = 0
    tests_total = 0
    
    if args.test_all or args.test_config:
        tests_total += 1
        if test_config():
            tests_passed += 1
    
    if args.test_all or args.test_db:
        tests_total += 1
        if test_db_connection():
            tests_passed += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ ID
        tests_total += 1
        if test_client_source_ids():
            tests_passed += 1
    
    if args.test_all or args.test_api:
        tests_total += 1
        if test_wb_api_connection():
            tests_passed += 1
    
    if args.test_all or args.test_sales:
        tests_total += 1
        if test_sales_api():
            tests_passed += 1
    
    if args.test_all or args.test_finance:
        tests_total += 1
        if test_finance_api():
            tests_passed += 1
    
    if args.test_integration:
        tests_total += 1
        if test_full_integration():
            tests_passed += 1
    
    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ
    if not any([args.test_config, args.test_db, args.test_api, args.test_sales, 
                args.test_finance, args.test_integration, args.test_all]):
        logger.info("–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        tests_total = 3
        
        if test_config():
            tests_passed += 1
        if test_db_connection():
            tests_passed += 1
        if test_client_source_ids():
            tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    logger.info(f"üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {tests_passed}/{tests_total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if tests_passed == tests_total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
