#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Wildberries Content API.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_wb_products_import.py
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from wb_importer import import_wb_products, connect_to_db, logger

def test_wb_products_import():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Wildberries Content API.
    """
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ WB ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        connection = connect_to_db()
        cursor = connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ –∏–º–ø–æ—Ä—Ç–∞
        cursor.execute("SELECT COUNT(*) as count FROM dim_products")
        count_before = cursor.fetchone()[0]
        logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ –≤ dim_products –¥–æ –∏–º–ø–æ—Ä—Ç–∞: {count_before}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ WB –¥–æ –∏–º–ø–æ—Ä—Ç–∞
        cursor.execute("SELECT COUNT(*) as count FROM dim_products WHERE sku_wb IS NOT NULL AND sku_wb != ''")
        wb_count_before = cursor.fetchone()[0]
        logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ WB –≤ dim_products –¥–æ –∏–º–ø–æ—Ä—Ç–∞: {wb_count_before}")
        
        cursor.close()
        connection.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ WB
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ WB...")
        import_wb_products()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        connection = connect_to_db()
        cursor = connection.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        cursor.execute("SELECT COUNT(*) as count FROM dim_products")
        count_after = cursor.fetchone()[0]
        logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ –≤ dim_products –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: {count_after}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ WB –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        cursor.execute("SELECT COUNT(*) as count FROM dim_products WHERE sku_wb IS NOT NULL AND sku_wb != ''")
        wb_count_after = cursor.fetchone()[0]
        logger.info(f"–¢–æ–≤–∞—Ä–æ–≤ WB –≤ dim_products –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: {wb_count_after}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ WB
        cursor.execute("""
            SELECT sku_wb, sku_ozon, name, brand, category, barcode 
            FROM dim_products 
            WHERE sku_wb IS NOT NULL AND sku_wb != '' 
            ORDER BY updated_at DESC 
            LIMIT 5
        """)
        
        wb_products = cursor.fetchall()
        if wb_products:
            logger.info("–ü—Ä–∏–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ WB:")
            for product in wb_products:
                logger.info(f"  WB: {product[0]}, Ozon: {product[1]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {product[2]}, –ë—Ä–µ–Ω–¥: {product[3]}")
        
        cursor.close()
        connection.close()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        new_wb_products = wb_count_after - wb_count_before
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   - –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ WB: {new_wb_products}")
        logger.info(f"   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {count_after}")
        logger.info(f"   - –¢–æ–≤–∞—Ä–æ–≤ WB –≤ –ë–î: {wb_count_after}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ WB: {e}")
        return False


def check_wb_api_connection():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WB Content API.
    """
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB Content API ===")
    
    try:
        from wb_importer import make_wb_request
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
        test_data = {
            "settings": {
                "filter": {
                    "withPhoto": -1
                },
                "cursor": {
                    "limit": 1  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 1 —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
                }
            }
        }
        
        response = make_wb_request('/content/v2/get/cards/list', method='POST', data=test_data)
        
        if isinstance(response, dict) and 'data' in response:
            products_count = len(response.get('data', []))
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WB Content API —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ: {products_count}")
            
            if products_count > 0:
                product = response['data'][0]
                logger.info(f"–ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: nmID={product.get('nmID')}, vendorCode={product.get('vendorCode')}")
            
            return True
        else:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API: {response}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB Content API: {e}")
        return False


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    if not check_wb_api_connection():
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WB API")
        sys.exit(1)
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
    if test_wb_products_import():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
        sys.exit(1)
