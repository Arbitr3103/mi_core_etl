#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ BaseBuy –≤ mi_core_db.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤.
"""

import os
import sys
import csv
import mysql.connector
from mysql.connector import Error
import logging
from dotenv import load_dotenv
from basebuy_mapping import BASEBUY_MAPPING

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class InitialCarDataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞."""
        self.db_config = {
            'host': os.getenv('DB_HOST', '127.0.0.1'),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD'),
            'database': os.getenv('DB_NAME'),
            'charset': 'utf8mb4',
            'connection_timeout': 5
        }
        
        self.basebuy_data_dir = './basebuy_data/auto_20250901'
        
        # –ú–∞–ø–ø–∏–Ω–≥ BaseBuy ID -> mi_core_db ID –¥–ª—è —Å–≤—è–∑–µ–π
        self.id_mappings = {
            'regions': {},  # basebuy_id -> mi_core_id
            'brands': {},
            'car_models': {},
            'car_specifications': {}
        }
    
    def connect_to_db(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            connection = mysql.connector.connect(**self.db_config)
            return connection
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def read_csv_file(self, filename):
        """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
        filepath = os.path.join(self.basebuy_data_dir, filename)
        
        if not os.path.exists(filepath):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            return []
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
                content = f.read().replace("'", "")
                
            # –ü–∞—Ä—Å–∏–º CSV –∏–∑ —Å—Ç—Ä–æ–∫–∏
            reader = csv.DictReader(content.splitlines())
            data = list(reader)
            
            logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {filename}")
            return data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            return []
    
    def load_regions(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã (—Ç–∏–ø—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)."""
        logger.info("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã...")
        
        config = BASEBUY_MAPPING['regions']
        data = self.read_csv_file(config['source_file'])
        
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤")
            return
        
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            for row in data:
                basebuy_id = row[config['key_field']]
                name = row[config['mapping']['name']]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω
                cursor.execute(
                    "SELECT id FROM regions WHERE name = %s",
                    (name,)
                )
                existing = cursor.fetchone()
                
                if existing:
                    region_id = existing[0]
                    logger.debug(f"–†–µ–≥–∏–æ–Ω '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {region_id}")
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
                    cursor.execute(
                        "INSERT INTO regions (name) VALUES (%s)",
                        (name,)
                    )
                    region_id = cursor.lastrowid
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω: {name} (ID: {region_id})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–≤—è–∑–µ–π
                self.id_mappings['regions'][basebuy_id] = region_id
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(self.id_mappings['regions'])}")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: {e}")
            raise
    
    def load_brands(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."""
        logger.info("üöó –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
        
        config = BASEBUY_MAPPING['brands']
        data = self.read_csv_file(config['source_file'])
        
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–æ–∫")
            return
        
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            for row in data:
                basebuy_id = row[config['key_field']]
                name = row[config['mapping']['name']]
                basebuy_region_id = row[config['mapping']['region_id']]
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                region_id = self.id_mappings['regions'].get(basebuy_region_id)
                
                if not region_id:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–≥–∏–æ–Ω –¥–ª—è –º–∞—Ä–∫–∏ {name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–∞—Ä–∫–∞
                cursor.execute(
                    "SELECT id FROM brands WHERE name = %s AND region_id = %s",
                    (name, region_id)
                )
                existing = cursor.fetchone()
                
                if existing:
                    brand_id = existing[0]
                    logger.debug(f"–ú–∞—Ä–∫–∞ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {brand_id}")
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–∞—Ä–∫—É
                    cursor.execute(
                        "INSERT INTO brands (name, region_id) VALUES (%s, %s)",
                        (name, region_id)
                    )
                    brand_id = cursor.lastrowid
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–∞—Ä–∫–∞: {name} (ID: {brand_id})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–≤—è–∑–µ–π
                self.id_mappings['brands'][basebuy_id] = brand_id
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ä–æ–∫: {len(self.id_mappings['brands'])}")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–æ–∫: {e}")
            raise
    
    def load_car_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."""
        logger.info("üöô –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
        
        config = BASEBUY_MAPPING['car_models']
        data = self.read_csv_file(config['source_file'])
        
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π")
            return
        
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            for row in data:
                basebuy_id = row[config['key_field']]
                name = row[config['mapping']['name']]
                basebuy_brand_id = row[config['mapping']['brand_id']]
                
                # –ü–æ–ª—É—á–∞–µ–º ID –º–∞—Ä–∫–∏ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                brand_id = self.id_mappings['brands'].get(basebuy_brand_id)
                
                if not brand_id:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–∞—Ä–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
                cursor.execute(
                    "SELECT id FROM car_models WHERE name = %s AND brand_id = %s",
                    (name, brand_id)
                )
                existing = cursor.fetchone()
                
                if existing:
                    model_id = existing[0]
                    logger.debug(f"–ú–æ–¥–µ–ª—å '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {model_id}")
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
                    cursor.execute(
                        "INSERT INTO car_models (name, brand_id) VALUES (%s, %s)",
                        (name, brand_id)
                    )
                    model_id = cursor.lastrowid
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {name} (ID: {model_id})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–≤—è–∑–µ–π
                self.id_mappings['car_models'][basebuy_id] = model_id
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(self.id_mappings['car_models'])}")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            raise
    
    def load_car_specifications(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–ø–æ–∫–æ–ª–µ–Ω–∏—è)."""
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
        
        config = BASEBUY_MAPPING['car_specifications']
        data = self.read_csv_file(config['source_file'])
        
        if not data:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π")
            return
        
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            for row in data:
                basebuy_id = row[config['key_field']]
                basebuy_model_id = row[config['mapping']['car_model_id']]
                year_start = row[config['mapping']['year_start']] or None
                year_end = row[config['mapping']['year_end']] or None
                
                # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–∏ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                car_model_id = self.id_mappings['car_models'].get(basebuy_model_id)
                
                if not car_model_id:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ {basebuy_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–¥—ã –≤ —á–∏—Å–ª–∞
                try:
                    year_start = int(year_start) if year_start else None
                    year_end = int(year_end) if year_end else None
                except (ValueError, TypeError):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≥–æ–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ {basebuy_id}: {year_start}-{year_end}")
                    year_start = year_end = None
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ year_start (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–µ –ø–æ–ª–µ)
                if year_start is None:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é {basebuy_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç year_start")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
                cursor.execute("""
                    SELECT id FROM car_specifications 
                    WHERE car_model_id = %s AND year_start = %s AND year_end = %s
                """, (car_model_id, year_start, year_end))
                existing = cursor.fetchone()
                
                if existing:
                    spec_id = existing[0]
                    logger.debug(f"–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {spec_id}")
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
                    # PCD, DIA, fastener_type, fastener_params –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º NULL
                    cursor.execute("""
                        INSERT INTO car_specifications 
                        (car_model_id, year_start, year_end, pcd, dia, fastener_type, fastener_params)
                        VALUES (%s, %s, %s, %s, %s, %s, %s)
                    """, (car_model_id, year_start, year_end, None, None, None, None))
                    spec_id = cursor.lastrowid
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: –º–æ–¥–µ–ª—å {car_model_id}, {year_start}-{year_end} (ID: {spec_id})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–≤—è–∑–µ–π
                self.id_mappings['car_specifications'][basebuy_id] = spec_id
            
            connection.commit()
            cursor.close()
            connection.close()
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(self.id_mappings['car_specifications'])}")
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {e}")
            raise
    
    def get_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            connection = self.connect_to_db()
            cursor = connection.cursor()
            
            tables = ['regions', 'brands', 'car_models', 'car_specifications']
            
            print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò:")
            print("=" * 50)
            
            for table in tables:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"{table:20}: {count:6} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
            print("\nüîó –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ï–ô:")
            print("=" * 50)
            
            cursor.execute("""
                SELECT b.name as brand, r.name as region 
                FROM brands b 
                JOIN regions r ON b.region_id = r.id 
                LIMIT 5
            """)
            
            print("–ü—Ä–∏–º–µ—Ä—ã –º–∞—Ä–æ–∫ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏:")
            for row in cursor.fetchall():
                print(f"  {row[0]} ({row[1]})")
            
            cursor.execute("""
                SELECT cm.name as model, b.name as brand
                FROM car_models cm
                JOIN brands b ON cm.brand_id = b.id
                LIMIT 5
            """)
            
            print("\n–ü—Ä–∏–º–µ—Ä—ã –º–æ–¥–µ–ª–µ–π —Å –º–∞—Ä–∫–∞–º–∏:")
            for row in cursor.fetchall():
                print(f"  {row[0]} ({row[1]})")
            
            cursor.close()
            connection.close()
            
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def run_initial_load(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
            self.load_regions()
            self.load_brands()
            self.load_car_models()
            self.load_car_specifications()
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.get_statistics()
            
            logger.info("üéâ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info("–û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in required_vars:
            value = os.getenv(var)
            logger.info(f"  {var} = {'***' if 'PASSWORD' in var and value else value}")
        
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    loader = InitialCarDataLoader()
    loader.run_initial_load()
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
