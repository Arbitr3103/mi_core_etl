#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é MySQL –≤ Docker.
"""

import sys
import os
import logging
import mysql.connector
from datetime import datetime

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config_local import DB_CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def connect_to_local_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        return connection
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
        return None


def test_local_margin_calculation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)")
    logger.info("=" * 60)
    
    connection = connect_to_local_db()
    if not connection:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
        return False
    
    try:
        cursor = connection.cursor(dictionary=True)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã...")
        
        cursor.execute("""
            SELECT COLUMN_NAME 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = %s 
                AND TABLE_NAME = 'metrics_daily' 
                AND COLUMN_NAME = 'margin_percent'
        """, (DB_CONFIG['database'],))
        
        has_margin_percent = cursor.fetchone() is not None
        logger.info(f"   –ö–æ–ª–æ–Ω–∫–∞ margin_percent: {'‚úÖ' if has_margin_percent else '‚ùå'}")
        
        if not has_margin_percent:
            logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ margin_percent –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        cursor.execute("SELECT COUNT(*) as count FROM fact_orders WHERE transaction_type = 'sale'")
        orders_count = cursor.fetchone()['count']
        logger.info(f"   –ó–∞–∫–∞–∑–æ–≤ (–ø—Ä–æ–¥–∞–∂–∏): {orders_count}")
        
        if orders_count == 0:
            logger.error("‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("SELECT COUNT(*) as count FROM fact_orders")
            total_orders = cursor.fetchone()['count']
            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}")
            
            if total_orders > 0:
                cursor.execute("SELECT DISTINCT transaction_type FROM fact_orders")
                types = cursor.fetchall()
                logger.info(f"   –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {[t['transaction_type'] for t in types]}")
            
            return False
        
        cursor.execute("SELECT COUNT(*) as count FROM fact_transactions")
        transactions_count = cursor.fetchone()['count']
        logger.info(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}")
        
        cursor.execute("SELECT COUNT(*) as count FROM dim_products WHERE cost_price IS NOT NULL")
        products_with_cost = cursor.fetchone()['count']
        logger.info(f"   –¢–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {products_with_cost}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–∞—Ç—ã 2024-09-20
        test_date = '2024-09-20'
        logger.info(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è {test_date}...")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        cursor.execute("DELETE FROM metrics_daily WHERE metric_date = %s", (test_date,))
        connection.commit()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        margin_query = """
        INSERT INTO metrics_daily (
            client_id, metric_date, orders_cnt, revenue_sum, returns_sum, 
            cogs_sum, commission_sum, shipping_sum, other_expenses_sum, 
            profit_sum, margin_percent
        )
        SELECT
            fo.client_id,
            %s AS metric_date,
            
            -- –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
            COUNT(CASE WHEN fo.transaction_type = 'sale' THEN fo.id END) AS orders_cnt,
            SUM(CASE WHEN fo.transaction_type = 'sale' THEN (fo.qty * fo.price) ELSE 0 END) AS revenue_sum,
            SUM(CASE WHEN fo.transaction_type = 'return' THEN (fo.qty * fo.price) ELSE 0 END) AS returns_sum,
            
            -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (COGS)
            SUM(CASE 
                WHEN fo.transaction_type = 'sale' AND dp.cost_price IS NOT NULL 
                THEN COALESCE(dp.cost_price * fo.qty, 0) 
                ELSE 0 
            END) AS cogs_sum,
            
            -- –ö–æ–º–∏—Å—Å–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥
            COALESCE(commission_data.commission_sum, 0) AS commission_sum,
            
            -- –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∞–≤–∫—É
            COALESCE(logistics_data.shipping_sum, 0) AS shipping_sum,
            
            -- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            COALESCE(other_data.other_expenses_sum, 0) AS other_expenses_sum,
            
            -- –†–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
            (
                SUM(CASE WHEN fo.transaction_type = 'sale' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í—ã—Ä—É—á–∫–∞
                SUM(CASE WHEN fo.transaction_type = 'return' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í–æ–∑–≤—Ä–∞—Ç—ã
                SUM(CASE 
                    WHEN fo.transaction_type = 'sale' AND dp.cost_price IS NOT NULL 
                    THEN COALESCE(dp.cost_price * fo.qty, 0) 
                    ELSE 0 
                END) - -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                COALESCE(commission_data.commission_sum, 0) - -- –ö–æ–º–∏—Å—Å–∏–∏
                COALESCE(logistics_data.shipping_sum, 0) - -- –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                COALESCE(other_data.other_expenses_sum, 0) -- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            ) AS profit_sum,
            
            -- –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            CASE 
                WHEN SUM(CASE WHEN fo.transaction_type = 'sale' THEN (fo.qty * fo.price) ELSE 0 END) > 0 
                THEN (
                    (
                        SUM(CASE WHEN fo.transaction_type = 'sale' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í—ã—Ä—É—á–∫–∞
                        SUM(CASE WHEN fo.transaction_type = 'return' THEN (fo.qty * fo.price) ELSE 0 END) - -- –í–æ–∑–≤—Ä–∞—Ç—ã
                        SUM(CASE 
                            WHEN fo.transaction_type = 'sale' AND dp.cost_price IS NOT NULL 
                            THEN COALESCE(dp.cost_price * fo.qty, 0) 
                            ELSE 0 
                        END) - -- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
                        COALESCE(commission_data.commission_sum, 0) - -- –ö–æ–º–∏—Å—Å–∏–∏
                        COALESCE(logistics_data.shipping_sum, 0) - -- –õ–æ–≥–∏—Å—Ç–∏–∫–∞
                        COALESCE(other_data.other_expenses_sum, 0) -- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                    ) / SUM(CASE WHEN fo.transaction_type = 'sale' THEN (fo.qty * fo.price) ELSE 0 END)
                ) * 100
                ELSE NULL 
            END AS margin_percent

        FROM fact_orders fo

        -- JOIN —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        LEFT JOIN dim_products dp ON fo.product_id = dp.id

        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–π –∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞
        LEFT JOIN (
            SELECT 
                ft.client_id,
                SUM(ABS(ft.amount)) AS commission_sum
            FROM fact_transactions ft
            WHERE ft.transaction_date = %s
                AND (
                    ft.transaction_type LIKE '%%commission%%' OR
                    ft.transaction_type LIKE '%%fee%%'
                )
            GROUP BY ft.client_id
        ) commission_data ON fo.client_id = commission_data.client_id

        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        LEFT JOIN (
            SELECT 
                ft.client_id,
                SUM(ABS(ft.amount)) AS shipping_sum
            FROM fact_transactions ft
            WHERE ft.transaction_date = %s
                AND (
                    ft.transaction_type LIKE '%%logistics%%' OR
                    ft.transaction_type LIKE '%%delivery%%' OR
                    ft.transaction_type LIKE '%%shipping%%'
                )
            GROUP BY ft.client_id
        ) logistics_data ON fo.client_id = logistics_data.client_id

        -- –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        LEFT JOIN (
            SELECT 
                ft.client_id,
                SUM(ABS(ft.amount)) AS other_expenses_sum
            FROM fact_transactions ft
            WHERE ft.transaction_date = %s
                AND ft.transaction_type NOT LIKE '%%commission%%'
                AND ft.transaction_type NOT LIKE '%%fee%%'
                AND ft.transaction_type NOT LIKE '%%logistics%%'
                AND ft.transaction_type NOT LIKE '%%delivery%%'
                AND ft.transaction_type NOT LIKE '%%shipping%%'
                AND ft.transaction_type NOT LIKE '%%return%%'
                AND ft.amount < 0 -- –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            GROUP BY ft.client_id
        ) other_data ON fo.client_id = other_data.client_id

        WHERE fo.order_date = %s
        GROUP BY fo.client_id
        """
        
        cursor.execute(margin_query, (test_date, test_date, test_date, test_date, test_date))
        connection.commit()
        
        logger.info("‚úÖ –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:")
        
        cursor.execute("""
            SELECT 
                client_id,
                orders_cnt,
                ROUND(revenue_sum, 2) as revenue_sum,
                ROUND(cogs_sum, 2) as cogs_sum,
                ROUND(commission_sum, 2) as commission_sum,
                ROUND(shipping_sum, 2) as shipping_sum,
                ROUND(profit_sum, 2) as profit_sum,
                ROUND(margin_percent, 2) as margin_percent
            FROM metrics_daily 
            WHERE metric_date = %s
        """, (test_date,))
        
        results = cursor.fetchall()
        
        if not results:
            logger.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞")
            return False
        
        total_revenue = 0
        total_profit = 0
        
        for result in results:
            logger.info(f"   –ö–ª–∏–µ–Ω—Ç {result['client_id']}:")
            logger.info(f"     - –ó–∞–∫–∞–∑–æ–≤: {result['orders_cnt']}")
            logger.info(f"     - –í—ã—Ä—É—á–∫–∞: {result['revenue_sum']} —Ä—É–±")
            logger.info(f"     - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['cogs_sum']} —Ä—É–±")
            logger.info(f"     - –ö–æ–º–∏—Å—Å–∏–∏: {result['commission_sum']} —Ä—É–±")
            logger.info(f"     - –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {result['shipping_sum']} —Ä—É–±")
            logger.info(f"     - –ü—Ä–∏–±—ã–ª—å: {result['profit_sum']} —Ä—É–±")
            logger.info(f"     - –ú–∞—Ä–∂–∞: {result['margin_percent']}%")
            
            total_revenue += float(result['revenue_sum'])
            total_profit += float(result['profit_sum'])
        
        overall_margin = (total_profit / total_revenue * 100) if total_revenue > 0 else 0
        
        logger.info("üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
        logger.info(f"   - –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:.2f} —Ä—É–±")
        logger.info(f"   - –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} —Ä—É–±")
        logger.info(f"   - –û–±—â–∞—è –º–∞—Ä–∂–∞: {overall_margin:.2f}%")
        
        # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
        # –ö–ª–∏–µ–Ω—Ç 1: –í—ã—Ä—É—á–∫–∞ = 500 + 400 + 1050 = 1950, –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å = 200 + 150 + 600 = 950
        # –ö–æ–º–∏—Å—Å–∏–∏ = 50 + 8 + 105 = 163, –õ–æ–≥–∏—Å—Ç–∏–∫–∞ = 30 + 25 + 45 = 100
        # –ü—Ä–∏–±—ã–ª—å = 1950 - 950 - 163 - 100 = 737, –ú–∞—Ä–∂–∞ = 737/1950 * 100 = 37.79%
        
        expected_revenue = 1950.0  # 2*250 + 1*400 + 3*350
        expected_cogs = 950.0      # 2*100 + 1*150 + 3*200
        expected_commission = 163.0 # 50 + 8 + 105
        expected_shipping = 100.0   # 30 + 25 + 45
        expected_profit = 737.0     # 1950 - 950 - 163 - 100
        expected_margin = 37.79     # 737/1950 * 100
        
        tolerance = 0.1
        
        if (abs(total_revenue - expected_revenue) < tolerance and 
            abs(total_profit - expected_profit) < tolerance and
            abs(overall_margin - expected_margin) < tolerance):
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
            return True
        else:
            logger.warning("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö:")
            logger.warning(f"   –í—ã—Ä—É—á–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {total_revenue}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue}")
            logger.warning(f"   –ü—Ä–∏–±—ã–ª—å: –ø–æ–ª—É—á–µ–Ω–æ {total_profit}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_profit}")
            logger.warning(f"   –ú–∞—Ä–∂–∞: –ø–æ–ª—É—á–µ–Ω–æ {overall_margin:.2f}%, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_margin}%")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
        
    finally:
        cursor.close()
        connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    logger.info("=" * 60)
    
    success = test_local_margin_calculation()
    
    logger.info("=" * 60)
    if success:
        logger.info("üéâ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–®–õ–û –£–°–ü–ï–®–ù–û!")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info("üí° –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–≤–µ—Ä–µ")
    else:
        logger.error("‚ùå –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
        logger.error("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    return success


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)