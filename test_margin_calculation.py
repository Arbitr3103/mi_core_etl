#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import sys
import os
import logging
from datetime import datetime, timedelta
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db
from run_aggregation import aggregate_daily_metrics, calculate_margin_percentage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class MarginCalculationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self):
        self.connection = None
        self.test_date = '2024-09-22'  # –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞
        self.test_client_id = 1
        
    def setup_connection(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("DELETE FROM metrics_daily WHERE metric_date = %s", (self.test_date,))
            cursor.execute("DELETE FROM fact_orders WHERE order_date = %s AND order_id LIKE 'TEST_%'", (self.test_date,))
            cursor.execute("DELETE FROM fact_transactions WHERE transaction_date = %s AND transaction_id LIKE 'TEST_%'", (self.test_date,))
            cursor.execute("DELETE FROM dim_products WHERE sku_ozon LIKE 'TEST_%'")
            
            self.connection.commit()
            logger.info("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.connection.rollback()
            return False
        finally:
            cursor.close()
    
    def create_test_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—á–µ—Ç–æ–≤."""
        if not self.connection:
            return False
            
        try:
            cursor = self.connection.cursor()
            
            # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é
            cursor.execute("""
                INSERT INTO dim_products (sku_ozon, barcode, product_name, cost_price)
                VALUES ('TEST_SKU_001', 'TEST_BARCODE_001', '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', 100.00)
            """)
            
            test_product_id = cursor.lastrowid
            logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å ID: {test_product_id}")
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ (–ø—Ä–æ–¥–∞–∂–∞)
            cursor.execute("""
                INSERT INTO fact_orders (
                    product_id, order_id, transaction_type, sku, qty, price, 
                    order_date, cost_price, client_id, source_id
                )
                VALUES (%s, 'TEST_ORDER_001', '–ø—Ä–æ–¥–∞–∂–∞', 'TEST_SKU_001', 2, 200.00, %s, 100.00, %s, 2)
            """, (test_product_id, self.test_date, self.test_client_id))
            
            logger.info("üõí –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑: 2 —Ç–æ–≤–∞—Ä–∞ –ø–æ 200 —Ä—É–± = 400 —Ä—É–± –≤—ã—Ä—É—á–∫–∏")
            
            # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∫–æ–º–∏—Å—Å–∏–∏ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∞)
            
            # –ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (10% –æ—Ç –≤—ã—Ä—É—á–∫–∏)
            cursor.execute("""
                INSERT INTO fact_transactions (
                    client_id, source_id, transaction_id, order_id, transaction_type,
                    amount, transaction_date, description
                )
                VALUES (%s, 2, 'TEST_COMMISSION_001', 'TEST_ORDER_001', '–∫–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞',
                        -40.00, %s, '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è 10%')
            """, (self.test_client_id, self.test_date))
            
            # –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
            cursor.execute("""
                INSERT INTO fact_transactions (
                    client_id, source_id, transaction_id, order_id, transaction_type,
                    amount, transaction_date, description
                )
                VALUES (%s, 2, 'TEST_LOGISTICS_001', 'TEST_ORDER_001', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞',
                        -30.00, %s, '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É')
            """, (self.test_client_id, self.test_date))
            
            # –≠–∫–≤–∞–π—Ä–∏–Ω–≥
            cursor.execute("""
                INSERT INTO fact_transactions (
                    client_id, source_id, transaction_id, order_id, transaction_type,
                    amount, transaction_date, description
                )
                VALUES (%s, 2, 'TEST_ACQUIRING_001', 'TEST_ORDER_001', '—ç–∫–≤–∞–π—Ä–∏–Ω–≥',
                        -8.00, %s, '–¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–≤–∞–π—Ä–∏–Ω–≥ 2%')
            """, (self.test_client_id, self.test_date))
            
            self.connection.commit()
            
            logger.info("üí≥ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
            logger.info("   - –ö–æ–º–∏—Å—Å–∏—è: -40.00 —Ä—É–±")
            logger.info("   - –õ–æ–≥–∏—Å—Ç–∏–∫–∞: -30.00 —Ä—É–±") 
            logger.info("   - –≠–∫–≤–∞–π—Ä–∏–Ω–≥: -8.00 —Ä—É–±")
            
            # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞—Å—á–µ—Ç:
            # –í—ã—Ä—É—á–∫–∞: 400.00
            # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: 200.00 (2 —Ç–æ–≤–∞—Ä–∞ * 100 —Ä—É–±)
            # –ö–æ–º–∏—Å—Å–∏–∏: 48.00 (40 + 8)
            # –õ–æ–≥–∏—Å—Ç–∏–∫–∞: 30.00
            # –ü—Ä–∏–±—ã–ª—å: 400 - 200 - 48 - 30 = 122.00
            # –ú–∞—Ä–∂–∞: (122 / 400) * 100 = 30.5%
            
            logger.info("üìä –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info("   - –í—ã—Ä—É—á–∫–∞: 400.00 —Ä—É–±")
            logger.info("   - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: 200.00 —Ä—É–±")
            logger.info("   - –ö–æ–º–∏—Å—Å–∏–∏: 48.00 —Ä—É–±")
            logger.info("   - –õ–æ–≥–∏—Å—Ç–∏–∫–∞: 30.00 —Ä—É–±")
            logger.info("   - –ü—Ä–∏–±—ã–ª—å: 122.00 —Ä—É–±")
            logger.info("   - –ú–∞—Ä–∂–∞: 30.5%")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.connection.rollback()
            return False
        finally:
            cursor.close()
    
    def test_margin_percentage_function(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ calculate_margin_percentage")
        
        test_cases = [
            (100, 400, 25.0),      # –ü—Ä–∏–±—ã–ª—å 100, –≤—ã—Ä—É—á–∫–∞ 400 = 25%
            (122, 400, 30.5),      # –ù–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ª—É—á–∞–π
            (0, 400, 0.0),         # –ù—É–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
            (-50, 400, -12.5),     # –£–±—ã—Ç–æ–∫
            (100, 0, None),        # –ù—É–ª–µ–≤–∞—è –≤—ã—Ä—É—á–∫–∞
            (0, 0, None),          # –ù—É–ª–∏
        ]
        
        passed = 0
        total = len(test_cases)
        
        for profit, revenue, expected in test_cases:
            result = calculate_margin_percentage(profit, revenue)
            
            if expected is None:
                if result is None:
                    logger.info(f"‚úÖ –ü—Ä–∏–±—ã–ª—å={profit}, –í—ã—Ä—É—á–∫–∞={revenue} ‚Üí {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
                    passed += 1
                else:
                    logger.error(f"‚ùå –ü—Ä–∏–±—ã–ª—å={profit}, –í—ã—Ä—É—á–∫–∞={revenue} ‚Üí {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
            else:
                if result is not None and abs(result - expected) < 0.01:
                    logger.info(f"‚úÖ –ü—Ä–∏–±—ã–ª—å={profit}, –í—ã—Ä—É—á–∫–∞={revenue} ‚Üí {result:.2f}% (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected}%)")
                    passed += 1
                else:
                    logger.error(f"‚ùå –ü—Ä–∏–±—ã–ª—å={profit}, –í—ã—Ä—É—á–∫–∞={revenue} ‚Üí {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected}%)")
        
        logger.info(f"üìä –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏: {passed}/{total} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return passed == total
    
    def test_aggregation_with_test_data(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏—é –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        success = aggregate_daily_metrics(self.connection, self.test_date)
        
        if not success:
            logger.error("‚ùå –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        try:
            cursor = self.connection.cursor(dictionary=True)
            cursor.execute("""
                SELECT * FROM metrics_daily 
                WHERE metric_date = %s AND client_id = %s
            """, (self.test_date, self.test_client_id))
            
            result = cursor.fetchone()
            
            if not result:
                logger.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            expected_revenue = 400.00
            expected_cogs = 200.00
            expected_commission = 48.00
            expected_shipping = 30.00
            expected_profit = 122.00
            expected_margin = 30.5
            
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:")
            logger.info(f"   - –í—ã—Ä—É—á–∫–∞: {result['revenue_sum']} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_revenue})")
            logger.info(f"   - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['cogs_sum']} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_cogs})")
            logger.info(f"   - –ö–æ–º–∏—Å—Å–∏–∏: {result['commission_sum']} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_commission})")
            logger.info(f"   - –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {result['shipping_sum']} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_shipping})")
            logger.info(f"   - –ü—Ä–∏–±—ã–ª—å: {result['profit_sum']} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_profit})")
            logger.info(f"   - –ú–∞—Ä–∂–∞: {result['margin_percent']}% (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_margin}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤
            tolerance = 0.01
            checks = [
                (abs(float(result['revenue_sum']) - expected_revenue) < tolerance, "–í—ã—Ä—É—á–∫–∞"),
                (abs(float(result['cogs_sum']) - expected_cogs) < tolerance, "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"),
                (abs(float(result['commission_sum']) - expected_commission) < tolerance, "–ö–æ–º–∏—Å—Å–∏–∏"),
                (abs(float(result['shipping_sum']) - expected_shipping) < tolerance, "–õ–æ–≥–∏—Å—Ç–∏–∫–∞"),
                (abs(float(result['profit_sum']) - expected_profit) < tolerance, "–ü—Ä–∏–±—ã–ª—å"),
                (abs(float(result['margin_percent']) - expected_margin) < tolerance, "–ú–∞—Ä–∂–∞"),
            ]
            
            passed_checks = sum(1 for check, name in checks if check)
            total_checks = len(checks)
            
            for check, name in checks:
                status = "‚úÖ" if check else "‚ùå"
                logger.info(f"{status} {name}")
            
            logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {passed_checks}/{total_checks} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            
            return passed_checks == total_checks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}")
            return False
        finally:
            cursor.close()
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
        
        try:
            cursor = self.connection.cursor()
            
            # –¢–µ—Å—Ç 1: –¢–æ–≤–∞—Ä –±–µ–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
            cursor.execute("""
                INSERT INTO dim_products (sku_ozon, barcode, product_name, cost_price)
                VALUES ('TEST_SKU_NO_COST', 'TEST_BARCODE_NO_COST', '–¢–æ–≤–∞—Ä –±–µ–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏', NULL)
            """)
            
            no_cost_product_id = cursor.lastrowid
            
            cursor.execute("""
                INSERT INTO fact_orders (
                    product_id, order_id, transaction_type, sku, qty, price, 
                    order_date, cost_price, client_id, source_id
                )
                VALUES (%s, 'TEST_ORDER_NO_COST', '–ø—Ä–æ–¥–∞–∂–∞', 'TEST_SKU_NO_COST', 1, 100.00, %s, NULL, %s, 2)
            """, (no_cost_product_id, self.test_date, self.test_client_id))
            
            # –¢–µ—Å—Ç 2: –ó–∞–∫–∞–∑ –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            cursor.execute("""
                INSERT INTO dim_products (sku_ozon, barcode, product_name, cost_price)
                VALUES ('TEST_SKU_NO_TRANS', 'TEST_BARCODE_NO_TRANS', '–¢–æ–≤–∞—Ä –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 50.00)
            """)
            
            no_trans_product_id = cursor.lastrowid
            
            cursor.execute("""
                INSERT INTO fact_orders (
                    product_id, order_id, transaction_type, sku, qty, price, 
                    order_date, cost_price, client_id, source_id
                )
                VALUES (%s, 'TEST_ORDER_NO_TRANS', '–ø—Ä–æ–¥–∞–∂–∞', 'TEST_SKU_NO_TRANS', 1, 150.00, %s, 50.00, %s, 2)
            """, (no_trans_product_id, self.test_date, self.test_client_id))
            
            self.connection.commit()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
            success = aggregate_daily_metrics(self.connection, self.test_date)
            
            if success:
                logger.info("‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("‚ùå –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
            self.connection.rollback()
            return False
        finally:
            cursor.close()
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        logger.info("=" * 60)
        
        if not self.setup_connection():
            return False
        
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.cleanup_test_data()
            
            # –¢–µ—Å—Ç 1: –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            test1_passed = self.test_margin_percentage_function()
            
            # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
            if self.create_test_data():
                test2_passed = self.test_aggregation_with_test_data()
            else:
                test2_passed = False
            
            # –¢–µ—Å—Ç 3: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
            test3_passed = self.test_edge_cases()
            
            # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info("=" * 60)
            logger.info("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            logger.info(f"   1. –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏: {'‚úÖ –ü–†–û–®–ï–õ' if test1_passed else '‚ùå –ù–ï –ü–†–û–®–ï–õ'}")
            logger.info(f"   2. –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–†–û–®–ï–õ' if test2_passed else '‚ùå –ù–ï –ü–†–û–®–ï–õ'}")
            logger.info(f"   3. –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏: {'‚úÖ –ü–†–û–®–ï–õ' if test3_passed else '‚ùå –ù–ï –ü–†–û–®–ï–õ'}")
            
            all_passed = test1_passed and test2_passed and test3_passed
            
            if all_passed:
                logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            else:
                logger.error("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
                logger.error("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
            
            return all_passed
            
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.cleanup_test_data()
            
            if self.connection:
                self.connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    tester = MarginCalculationTester()
    success = tester.run_all_tests()
    
    if success:
        exit(0)
    else:
        exit(1)


if __name__ == "__main__":
    main()