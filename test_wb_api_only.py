#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API Wildberries –ë–ï–ó –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API.
"""

import os
import json
import requests
import urllib3
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def load_wb_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ WB –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env —Ñ–∞–π–ª–∞."""
    load_dotenv()
    
    config = {
        'WB_API_KEY': os.getenv('WB_API_KEY'),
        'WB_API_URL': os.getenv('WB_API_URL', 'https://statistics-api.wildberries.ru')
    }
    
    if not config['WB_API_KEY']:
        raise ValueError("WB_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    logger.info("‚úÖ WB –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    logger.info(f"WB_API_URL: {config['WB_API_URL']}")
    logger.info(f"WB_API_KEY: {config['WB_API_KEY'][:10]}...")
    
    return config


def test_wb_api_request(endpoint, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API Wildberries."""
    config = load_wb_config()
    
    url = f"{config['WB_API_URL']}{endpoint}"
    headers = {
        'Authorization': config['WB_API_KEY'],
        'Content-Type': 'application/json'
    }
    
    try:
        logger.info(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: {endpoint}")
        response = requests.get(url, headers=headers, params=params or {}, timeout=30, verify=False)
        
        logger.info(f"HTTP Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {endpoint}")
                return data
            except json.JSONDecodeError:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ JSON) –æ—Ç {endpoint}")
                return response.text
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def test_warehouses():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤."""
    logger.info("=== –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ ===")
    
    data = test_wb_api_request('/api/v3/warehouses')
    
    if data and isinstance(data, list):
        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(data)}")
        if data:
            logger.info("–ü—Ä–∏–º–µ—Ä —Å–∫–ª–∞–¥–∞:")
            warehouse = data[0]
            for key, value in list(warehouse.items())[:3]:
                logger.info(f"  {key}: {value}")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
        return False


def test_sales_api():
    """–¢–µ—Å—Ç API –ø—Ä–æ–¥–∞–∂ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)."""
    logger.info("=== –¢–µ—Å—Ç: API –ø—Ä–æ–¥–∞–∂ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è) ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
    end_date = datetime.now() - timedelta(days=1)
    start_date = end_date - timedelta(days=1)
    
    date_from = f"{start_date.strftime('%Y-%m-%d')}T00:00:00Z"
    
    params = {
        'dateFrom': date_from
    }
    
    logger.info(f"üìÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ —Å: {date_from}")
    
    data = test_wb_api_request('/api/v1/supplier/sales', params)
    
    if data and isinstance(data, list):
        logger.info(f"üõí –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–∂: {len(data)}")
        if data:
            logger.info("–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏:")
            sale = data[0]
            for key, value in list(sale.items())[:5]:
                logger.info(f"  {key}: {value}")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
        return False


def test_finance_api():
    """–¢–µ—Å—Ç API —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)."""
    logger.info("=== –¢–µ—Å—Ç: API —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è) ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è
    end_date = datetime.now() - timedelta(days=1)
    start_date = end_date - timedelta(days=1)
    
    params = {
        'dateFrom': start_date.strftime('%Y-%m-%d'),
        'dateTo': end_date.strftime('%Y-%m-%d'),
        'rrdid': 0
    }
    
    logger.info(f"üìÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å—ã: {params['dateFrom']} - {params['dateTo']}")
    
    data = test_wb_api_request('/api/v5/supplier/reportDetailByPeriod', params)
    
    if data and isinstance(data, list):
        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(data)}")
        if data:
            logger.info("–ü—Ä–∏–º–µ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:")
            finance = data[0]
            for key, value in list(finance.items())[:5]:
                logger.info(f"  {key}: {value}")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False


def test_api_limits():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏."""
    logger.info("=== –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints ===")
    
    endpoints_to_test = [
        '/api/v3/warehouses',
        '/api/v2/stocks',
        '/public/api/v1/info',
    ]
    
    successful_endpoints = 0
    
    for endpoint in endpoints_to_test:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {endpoint}")
        data = test_wb_api_request(endpoint)
        
        if data is not None:
            successful_endpoints += 1
            logger.info(f"‚úÖ {endpoint} - –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è {endpoint} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ endpoints: {successful_endpoints}/{len(endpoints_to_test)}")
    return successful_endpoints > 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Wildberries (–ë–ï–ó –ë–î)")
    logger.info("=" * 50)
    
    tests_passed = 0
    tests_total = 0
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    tests_total += 1
    try:
        load_wb_config()
        tests_passed += 1
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: OK")
    except Exception as e:
        logger.error(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    tests_total += 1
    if test_api_limits():
        tests_passed += 1
        logger.info("‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API: OK")
    else:
        logger.error("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API: FAIL")
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç —Å–∫–ª–∞–¥–æ–≤
    tests_total += 1
    if test_warehouses():
        tests_passed += 1
        logger.info("‚úÖ –°–∫–ª–∞–¥—ã: OK")
    else:
        logger.error("‚ùå –°–∫–ª–∞–¥—ã: FAIL")
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂
    tests_total += 1
    if test_sales_api():
        tests_passed += 1
        logger.info("‚úÖ –ü—Ä–æ–¥–∞–∂–∏: OK")
    else:
        logger.error("‚ùå –ü—Ä–æ–¥–∞–∂–∏: FAIL")
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    tests_total += 1
    if test_finance_api():
        tests_passed += 1
        logger.info("‚úÖ –§–∏–Ω–∞–Ω—Å—ã: OK")
    else:
        logger.error("‚ùå –§–∏–Ω–∞–Ω—Å—ã: FAIL")
    
    # –ò—Ç–æ–≥–∏
    logger.info("=" * 50)
    logger.info(f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {tests_passed}/{tests_total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if tests_passed >= 3:  # –ú–∏–Ω–∏–º—É–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è + API + –æ–¥–∏–Ω endpoint
        logger.info("üéâ API Wildberries —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        logger.info("üí° –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å –ë–î: python test_wb_api.py --test-all")
        return 0
    else:
        logger.error("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WB_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        return 1


if __name__ == "__main__":
    exit_code = main()
    exit(exit_code)
