#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º.
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(__file__))

from inventory_sync_service_v4 import InventorySyncServiceV4

def test_analytics_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API...")
    
    service = InventorySyncServiceV4()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        service.connect_to_database()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        today = datetime.now().strftime('%Y-%m-%d')
        result = service.get_ozon_analytics_stocks(
            date_from=today,
            date_to=today,
            limit=10,
            offset=0
        )
        
        analytics_stocks = result.get("analytics_stocks", [])
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(analytics_stocks)} –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        print(f"   –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {result.get('total_count', 0)}")
        print(f"   –ï—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ: {result.get('has_next', False)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–ª–∞–¥—ã
        warehouses = {}
        for stock in analytics_stocks[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            wh_name = stock.warehouse_name
            if wh_name not in warehouses:
                warehouses[wh_name] = []
            warehouses[wh_name].append(stock)
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
        for wh_name, stocks in warehouses.items():
            print(f"   üì¶ {wh_name}: {len(stocks)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            if stocks:
                stock = stocks[0]
                print(f"      –ü—Ä–∏–º–µ—Ä: SKU {stock.offer_id}")
                print(f"      - –°–≤–æ–±–æ–¥–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ: {stock.free_to_sell_amount}")
                print(f"      - –û–±–µ—â–∞–Ω–æ: {stock.promised_amount}")
                print(f"      - –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {stock.reserved_amount}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
        print(f"\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        main_result = service.get_ozon_stocks_v4(limit=5)
        main_stocks = service.process_ozon_v4_stocks(main_result['items'])
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        stock_mapping = service.create_stock_mapping(main_stocks, analytics_stocks)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(stock_mapping)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥
        main_only = sum(1 for v in stock_mapping.values() if not v["has_analytics_data"])
        analytics_only = sum(1 for v in stock_mapping.values() if v["main_present"] == 0 and v["has_analytics_data"])
        both_sources = sum(1 for v in stock_mapping.values() if v["main_present"] > 0 and v["has_analytics_data"])
        
        print(f"   üìà –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π API: {main_only}")
        print(f"   üìä –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API: {analytics_only}")
        print(f"   üîÑ –û–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {both_sources}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    finally:
        service.close_database_connection()

if __name__ == "__main__":
    success = test_analytics_integration()
    sys.exit(0 if success else 1)