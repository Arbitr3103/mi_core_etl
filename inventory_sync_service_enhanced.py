#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç SyncLogger –≤ InventorySyncService –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
–∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import requests
import time
import psutil
from datetime import datetime, date
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from importers.ozon_importer import connect_to_db
    import config
    from inventory_data_validator import InventoryDataValidator, ValidationResult
    from sync_logger import SyncLogger, SyncType, SyncStatus as LogSyncStatus, ProcessingStats
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SyncStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    SUCCESS = "success"
    PARTIAL = "partial"
    FAILED = "failed"


class StockType(Enum):
    """–¢–∏–ø—ã —Å–∫–ª–∞–¥–æ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤."""
    FBO = "FBO"
    FBS = "FBS"
    REAL_FBS = "realFBS"


@dataclass
class InventoryRecord:
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞."""
    product_id: int
    sku: str
    source: str
    warehouse_name: str
    stock_type: str
    current_stock: int
    reserved_stock: int
    available_stock: int
    quantity_present: int
    quantity_reserved: int
    snapshot_date: date
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
        self.current_stock = max(0, int(self.current_stock or 0))
        self.reserved_stock = max(0, int(self.reserved_stock or 0))
        self.available_stock = max(0, int(self.available_stock or 0))
        self.quantity_present = max(0, int(self.quantity_present or 0))
        self.quantity_reserved = max(0, int(self.quantity_reserved or 0))
        
        # –ï—Å–ª–∏ available_stock –Ω–µ –∑–∞–¥–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
        if self.available_stock == 0 and self.current_stock > 0:
            self.available_stock = max(0, self.current_stock - self.reserved_stock)


@dataclass
class SyncResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    source: str
    status: SyncStatus
    records_processed: int
    records_updated: int
    records_inserted: int
    records_failed: int
    started_at: datetime
    completed_at: Optional[datetime] = None
    error_message: Optional[str] = None
    api_requests_count: int = 0
    
    @property
    def duration_seconds(self) -> int:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if self.completed_at:
            return int((self.completed_at - self.started_at).total_seconds())
        return 0


class EnhancedInventorySyncService:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    - –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.connection = None
        self.cursor = None
        self.validator = InventoryDataValidator()
        self.sync_logger: Optional[SyncLogger] = None
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SyncLogger –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            self.sync_logger = SyncLogger(self.cursor, self.connection, "InventorySyncService")
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            if self.sync_logger:
                self.sync_logger.log_info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ –ú–ë."""
        try:
            process = psutil.Process()
            return process.memory_info().rss / 1024 / 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–ë
        except:
            return 0.0

    def sync_ozon_inventory(self) -> SyncResult:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon —á–µ—Ä–µ–∑ API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.sync_logger:
            self.sync_logger.start_sync_session(SyncType.INVENTORY, "Ozon")
            self.sync_logger.log_info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        inventory_records = []
        
        try:
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ API –∑–∞–ø—Ä–æ—Å–∞–º
            stage_start = time.time()
            
            url = f"{config.OZON_API_BASE_URL}/v3/product/info/stocks"
            headers = {
                "Client-Id": config.OZON_CLIENT_ID,
                "Api-Key": config.OZON_API_KEY,
                "Content-Type": "application/json"
            }
            
            if self.sync_logger:
                self.sync_logger.log_processing_stage(
                    "API Preparation", 0, 0, time.time() - stage_start
                )
            
            # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API
            stage_start = time.time()
            memory_before = self.get_memory_usage()
            
            offset = 0
            limit = 1000
            
            while True:
                payload = {
                    "filter": {},
                    "last_id": "",
                    "limit": limit
                }
                
                try:
                    request_start = time.time()
                    response = requests.post(url, json=payload, headers=headers, timeout=30)
                    request_time = time.time() - request_start
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
                    if self.sync_logger:
                        self.sync_logger.log_api_request(
                            endpoint=url,
                            response_time=request_time,
                            status_code=response.status_code,
                            records_received=0,  # –û–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                            error_message=None if response.status_code < 400 else response.text
                        )
                    
                    response.raise_for_status()
                    api_requests += 1
                    
                    data = response.json()
                    items = data.get('result', {}).get('items', [])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
                    if self.sync_logger:
                        self.sync_logger.log_info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon (offset: {offset})")
                    
                    if not items:
                        if self.sync_logger:
                            self.sync_logger.log_info("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        break
                    
                    # –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    processing_start = time.time()
                    batch_processed = 0
                    batch_failed = 0
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                    for item in items:
                        records_processed += 1
                        batch_processed += 1
                        
                        try:
                            offer_id = item.get('offer_id', '')
                            product_id = self.get_product_id_by_ozon_sku(offer_id)
                            
                            if not product_id:
                                if self.sync_logger:
                                    self.sync_logger.log_warning(f"–¢–æ–≤–∞—Ä —Å offer_id {offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                                records_failed += 1
                                batch_failed += 1
                                continue
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
                            stocks = item.get('stocks', [])
                            if not stocks:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                                stocks = [{'warehouse_name': 'Ozon Main', 'type': 'FBO', 'present': 0, 'reserved': 0}]
                            
                            for stock in stocks:
                                warehouse_name = stock.get('warehouse_name', 'Ozon Main')
                                stock_type = stock.get('type', 'FBO')
                                quantity_present = max(0, int(stock.get('present', 0)))
                                quantity_reserved = max(0, int(stock.get('reserved', 0)))
                                
                                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                                inventory_record = InventoryRecord(
                                    product_id=product_id,
                                    sku=offer_id,
                                    source='Ozon',
                                    warehouse_name=warehouse_name,
                                    stock_type=stock_type,
                                    current_stock=quantity_present,
                                    reserved_stock=quantity_reserved,
                                    available_stock=max(0, quantity_present - quantity_reserved),
                                    quantity_present=quantity_present,
                                    quantity_reserved=quantity_reserved,
                                    snapshot_date=date.today()
                                )
                                
                                inventory_records.append(inventory_record)
                                
                        except Exception as e:
                            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.get('offer_id', 'unknown')}: {e}"
                            if self.sync_logger:
                                self.sync_logger.log_error(error_msg)
                            records_failed += 1
                            batch_failed += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
                    processing_time = time.time() - processing_start
                    if self.sync_logger:
                        self.sync_logger.log_processing_stage(
                            f"Process Batch {offset//limit + 1}",
                            batch_processed,
                            len([r for r in inventory_records[-len(items):] if r]),  # –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                            processing_time,
                            records_skipped=batch_failed,
                            error_count=batch_failed,
                            memory_usage_mb=self.get_memory_usage()
                        )
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if len(items) < limit:
                        break
                    
                    offset += limit
                    time.sleep(config.OZON_REQUEST_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                except requests.exceptions.RequestException as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ozon API: {e}"
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    records_failed += records_processed
                    break
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API
            api_stage_time = time.time() - stage_start
            memory_after = self.get_memory_usage()
            
            if self.sync_logger:
                self.sync_logger.log_processing_stage(
                    "API Data Retrieval",
                    0,
                    len(inventory_records),
                    api_stage_time,
                    error_count=records_failed,
                    memory_usage_mb=memory_after - memory_before
                )
            
            # –≠—Ç–∞–ø 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if inventory_records:
                validation_start = time.time()
                
                if self.sync_logger:
                    self.sync_logger.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é {len(inventory_records)} –∑–∞–ø–∏—Å–µ–π")
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                validation_result = self.validate_inventory_data(inventory_records, 'Ozon')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
                anomalies = self.check_data_anomalies(inventory_records, 'Ozon')
                if anomalies['anomalies']:
                    warning_msg = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö Ozon: {len(anomalies['anomalies'])} —Ç–∏–ø–æ–≤"
                    if self.sync_logger:
                        self.sync_logger.log_warning(warning_msg)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                valid_records = self.filter_valid_records(inventory_records, validation_result)
                
                validation_time = time.time() - validation_start
                if self.sync_logger:
                    self.sync_logger.log_processing_stage(
                        "Data Validation",
                        len(inventory_records),
                        len(valid_records),
                        validation_time,
                        records_skipped=len(inventory_records) - len(valid_records),
                        warning_count=len(anomalies.get('anomalies', [])),
                        memory_usage_mb=self.get_memory_usage()
                    )
                
                # –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if valid_records:
                    db_start = time.time()
                    
                    if self.sync_logger:
                        self.sync_logger.log_info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {len(valid_records)} –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î")
                    
                    updated, inserted, failed = self.update_inventory_data(valid_records, 'Ozon')
                    records_inserted = inserted
                    records_failed += failed + (len(inventory_records) - len(valid_records))
                    
                    db_time = time.time() - db_start
                    if self.sync_logger:
                        self.sync_logger.log_processing_stage(
                            "Database Update",
                            len(valid_records),
                            inserted,
                            db_time,
                            error_count=failed,
                            memory_usage_mb=self.get_memory_usage()
                        )
                    
                    success_msg = (f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                                 f"–≤–∞–ª–∏–¥–Ω—ã—Ö {len(valid_records)}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
                    if self.sync_logger:
                        self.sync_logger.log_info(success_msg)
                else:
                    error_msg = "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    records_failed = records_processed
            else:
                warning_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                if self.sync_logger:
                    self.sync_logger.log_warning(warning_msg)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if records_failed == 0:
                sync_status = SyncStatus.SUCCESS
                log_status = LogSyncStatus.SUCCESS
            elif records_inserted > 0:
                sync_status = SyncStatus.PARTIAL
                log_status = LogSyncStatus.PARTIAL
            else:
                sync_status = SyncStatus.FAILED
                log_status = LogSyncStatus.FAILED
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.sync_logger:
                self.sync_logger.update_sync_counters(
                    records_processed=records_processed,
                    records_inserted=records_inserted,
                    records_failed=records_failed
                )
                self.sync_logger.end_sync_session(status=log_status)
            
            return SyncResult(
                source='Ozon',
                status=sync_status,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests
            )
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg, e)
                self.sync_logger.end_sync_session(status=LogSyncStatus.FAILED, error_message=str(e))
            
            return SyncResult(
                source='Ozon',
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests
            )

    def sync_wb_inventory(self) -> SyncResult:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries —á–µ—Ä–µ–∑ API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.sync_logger:
            self.sync_logger.start_sync_session(SyncType.INVENTORY, "Wildberries")
            self.sync_logger.log_info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        inventory_records = []
        
        try:
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ API –∑–∞–ø—Ä–æ—Å–∞–º
            stage_start = time.time()
            
            url = f"{config.WB_SUPPLIERS_API_URL}/api/v1/supplier/stocks"
            headers = {
                "Authorization": config.WB_API_TOKEN
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            params = {
                'dateFrom': datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).isoformat()
            }
            
            if self.sync_logger:
                self.sync_logger.log_processing_stage(
                    "API Preparation", 0, 0, time.time() - stage_start
                )
            
            # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API
            stage_start = time.time()
            memory_before = self.get_memory_usage()
            
            try:
                request_start = time.time()
                response = requests.get(url, headers=headers, params=params, timeout=30)
                request_time = time.time() - request_start
                
                # –õ–æ–≥–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
                if self.sync_logger:
                    self.sync_logger.log_api_request(
                        endpoint=url,
                        response_time=request_time,
                        status_code=response.status_code,
                        error_message=None if response.status_code < 400 else response.text
                    )
                
                response.raise_for_status()
                api_requests += 1
                
                data = response.json()
                
                if not isinstance(data, list):
                    warning_msg = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API"
                    if self.sync_logger:
                        self.sync_logger.log_warning(warning_msg)
                    data = []
                
                if self.sync_logger:
                    self.sync_logger.log_info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries")
                
                # –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                processing_start = time.time()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
                for item in data:
                    records_processed += 1
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                        barcode = item.get('barcode', '')
                        nm_id = item.get('nmId', '')
                        
                        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É –∏–ª–∏ nmId
                        product_id = None
                        if barcode:
                            product_id = self.get_product_id_by_barcode(barcode)
                        if not product_id and nm_id:
                            product_id = self.get_product_id_by_wb_sku(str(nm_id))
                        
                        if not product_id:
                            warning_msg = f"–¢–æ–≤–∞—Ä —Å barcode {barcode} –∏–ª–∏ nmId {nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                            if self.sync_logger:
                                self.sync_logger.log_warning(warning_msg)
                            records_failed += 1
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        warehouse_name = item.get('warehouseName', 'WB Main')
                        quantity_present = max(0, int(item.get('quantity', 0)))
                        quantity_in_way_to_client = max(0, int(item.get('inWayToClient', 0)))
                        quantity_in_way_from_client = max(0, int(item.get('inWayFromClient', 0)))
                        
                        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                        quantity_reserved = quantity_in_way_to_client + quantity_in_way_from_client
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        inventory_record = InventoryRecord(
                            product_id=product_id,
                            sku=str(nm_id) if nm_id else barcode,
                            source='Wildberries',
                            warehouse_name=warehouse_name,
                            stock_type='FBS',  # WB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ FBS
                            current_stock=quantity_present,
                            reserved_stock=quantity_reserved,
                            available_stock=max(0, quantity_present - quantity_reserved),
                            quantity_present=quantity_present,
                            quantity_reserved=quantity_reserved,
                            snapshot_date=date.today()
                        )
                        
                        inventory_records.append(inventory_record)
                        
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ WB {item.get('nmId', 'unknown')}: {e}"
                        if self.sync_logger:
                            self.sync_logger.log_error(error_msg)
                        records_failed += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_time = time.time() - processing_start
                memory_after = self.get_memory_usage()
                
                if self.sync_logger:
                    self.sync_logger.log_processing_stage(
                        "API Data Processing",
                        records_processed,
                        len(inventory_records),
                        processing_time,
                        records_skipped=records_failed,
                        error_count=records_failed,
                        memory_usage_mb=memory_after - memory_before
                    )
                
                time.sleep(config.WB_REQUEST_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
                
            except requests.exceptions.RequestException as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API: {e}"
                if self.sync_logger:
                    self.sync_logger.log_error(error_msg)
                records_failed = records_processed
                raise
            
            # –≠—Ç–∞–ø 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            if inventory_records:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                validation_start = time.time()
                
                validation_result = self.validate_inventory_data(inventory_records, 'Wildberries')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
                anomalies = self.check_data_anomalies(inventory_records, 'Wildberries')
                if anomalies['anomalies']:
                    warning_msg = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö Wildberries: {len(anomalies['anomalies'])} —Ç–∏–ø–æ–≤"
                    if self.sync_logger:
                        self.sync_logger.log_warning(warning_msg)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                valid_records = self.filter_valid_records(inventory_records, validation_result)
                
                validation_time = time.time() - validation_start
                if self.sync_logger:
                    self.sync_logger.log_processing_stage(
                        "Data Validation",
                        len(inventory_records),
                        len(valid_records),
                        validation_time,
                        records_skipped=len(inventory_records) - len(valid_records),
                        warning_count=len(anomalies.get('anomalies', [])),
                        memory_usage_mb=self.get_memory_usage()
                    )
                
                if valid_records:
                    db_start = time.time()
                    
                    updated, inserted, failed = self.update_inventory_data(valid_records, 'Wildberries')
                    records_inserted = inserted
                    records_failed += failed + (len(inventory_records) - len(valid_records))
                    
                    db_time = time.time() - db_start
                    if self.sync_logger:
                        self.sync_logger.log_processing_stage(
                            "Database Update",
                            len(valid_records),
                            inserted,
                            db_time,
                            error_count=failed,
                            memory_usage_mb=self.get_memory_usage()
                        )
                    
                    success_msg = (f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Wildberries –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                                 f"–≤–∞–ª–∏–¥–Ω—ã—Ö {len(valid_records)}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
                    if self.sync_logger:
                        self.sync_logger.log_info(success_msg)
                else:
                    error_msg = "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    records_failed = records_processed
            else:
                warning_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                if self.sync_logger:
                    self.sync_logger.log_warning(warning_msg)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if records_failed == 0:
                sync_status = SyncStatus.SUCCESS
                log_status = LogSyncStatus.SUCCESS
            elif records_inserted > 0:
                sync_status = SyncStatus.PARTIAL
                log_status = LogSyncStatus.PARTIAL
            else:
                sync_status = SyncStatus.FAILED
                log_status = LogSyncStatus.FAILED
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.sync_logger:
                self.sync_logger.update_sync_counters(
                    records_processed=records_processed,
                    records_inserted=records_inserted,
                    records_failed=records_failed
                )
                self.sync_logger.end_sync_session(status=log_status)
            
            return SyncResult(
                source='Wildberries',
                status=sync_status,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests
            )
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Wildberries: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg, e)
                self.sync_logger.end_sync_session(status=LogSyncStatus.FAILED, error_message=str(e))
            
            return SyncResult(
                source='Wildberries',
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests
            )

    def run_full_sync(self) -> Dict[str, SyncResult]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        
        Returns:
            Dict[str, SyncResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        results = {}
        
        try:
            self.connect_to_database()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon
            logger.info("=" * 50)
            logger.info("–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í OZON")
            logger.info("=" * 50)
            
            try:
                ozon_result = self.sync_ozon_inventory()
                results['Ozon'] = ozon_result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon: {e}")
                results['Ozon'] = SyncResult(
                    source='Ozon',
                    status=SyncStatus.FAILED,
                    records_processed=0,
                    records_updated=0,
                    records_inserted=0,
                    records_failed=0,
                    started_at=datetime.now(),
                    completed_at=datetime.now(),
                    error_message=str(e)
                )
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Wildberries
            logger.info("=" * 50)
            logger.info("–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í WILDBERRIES")
            logger.info("=" * 50)
            
            try:
                wb_result = self.sync_wb_inventory()
                results['Wildberries'] = wb_result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Wildberries: {e}")
                results['Wildberries'] = SyncResult(
                    source='Wildberries',
                    status=SyncStatus.FAILED,
                    records_processed=0,
                    records_updated=0,
                    records_inserted=0,
                    records_failed=0,
                    started_at=datetime.now(),
                    completed_at=datetime.now(),
                    error_message=str(e)
                )
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_sync_summary(results)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            if self.sync_logger:
                health_report = self.sync_logger.get_sync_health_report()
                logger.info(f"üìä –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {health_report.get('overall_health', 'unknown')}")
            
            logger.info("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            raise
        finally:
            self.close_database_connection()
        
        return results

    # –ú–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
    def get_product_id_by_ozon_sku(self, sku_ozon: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Ozon."""
        if not sku_ozon:
            return None
        try:
            self.cursor.execute("SELECT id FROM dim_products WHERE sku_ozon = %s", (sku_ozon,))
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            if self.sync_logger:
                self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_ozon {sku_ozon}: {e}")
            return None

    def get_product_id_by_wb_sku(self, sku_wb: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Wildberries."""
        if not sku_wb:
            return None
        try:
            self.cursor.execute("SELECT id FROM dim_products WHERE sku_wb = %s", (str(sku_wb),))
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            if self.sync_logger:
                self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_wb {sku_wb}: {e}")
            return None

    def get_product_id_by_barcode(self, barcode: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É."""
        if not barcode:
            return None
        try:
            self.cursor.execute("SELECT id FROM dim_products WHERE barcode = %s", (barcode,))
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            if self.sync_logger:
                self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ barcode {barcode}: {e}")
            return None

    def update_inventory_data(self, inventory_records: List[InventoryRecord], source: str) -> Tuple[int, int, int]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã inventory_data —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UPSERT –ª–æ–≥–∏–∫–∏."""
        if self.sync_logger:
            self.sync_logger.log_info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ inventory_data –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}")
        
        if not inventory_records:
            if self.sync_logger:
                self.sync_logger.log_warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ {source}")
            return 0, 0, 0
        
        updated_count = 0
        inserted_count = 0
        failed_count = 0
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –¥–∞—Ç—ã
            today = date.today()
            delete_query = "DELETE FROM inventory_data WHERE source = %s AND snapshot_date = %s"
            self.cursor.execute(delete_query, (source, today))
            deleted_count = self.cursor.rowcount
            
            if self.sync_logger:
                self.sync_logger.log_info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {source} –∑–∞ {today}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            insert_query = """
                INSERT INTO inventory_data 
                (product_id, sku, source, warehouse_name, stock_type, 
                 snapshot_date, current_stock, reserved_stock, available_stock,
                 quantity_present, quantity_reserved, last_sync_at)
                VALUES (%(product_id)s, %(sku)s, %(source)s, %(warehouse_name)s, %(stock_type)s,
                       %(snapshot_date)s, %(current_stock)s, %(reserved_stock)s, %(available_stock)s,
                       %(quantity_present)s, %(quantity_reserved)s, NOW())
            """
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
            batch_size = 100
            for i in range(0, len(inventory_records), batch_size):
                batch = inventory_records[i:i + batch_size]
                batch_data = []
                
                for record in batch:
                    try:
                        record_data = {
                            'product_id': record.product_id,
                            'sku': record.sku,
                            'source': record.source,
                            'warehouse_name': record.warehouse_name,
                            'stock_type': record.stock_type,
                            'snapshot_date': record.snapshot_date,
                            'current_stock': record.current_stock,
                            'reserved_stock': record.reserved_stock,
                            'available_stock': record.available_stock,
                            'quantity_present': record.quantity_present,
                            'quantity_reserved': record.quantity_reserved
                        }
                        batch_data.append(record_data)
                    except Exception as e:
                        if self.sync_logger:
                            self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                        failed_count += 1
                
                if batch_data:
                    try:
                        self.cursor.executemany(insert_query, batch_data)
                        inserted_count += len(batch_data)
                        if self.sync_logger:
                            self.sync_logger.log_info(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(batch_data)} –∑–∞–ø–∏—Å–µ–π (–±–∞—Ç—á {i//batch_size + 1})")
                    except Exception as e:
                        if self.sync_logger:
                            self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞: {e}")
                        failed_count += len(batch_data)
            
            self.connection.commit()
            
            if self.sync_logger:
                self.sync_logger.log_info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ inventory_data –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count}, –æ—à–∏–±–æ–∫ {failed_count}")
            
        except Exception as e:
            if self.sync_logger:
                self.sync_logger.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ inventory_data: {e}")
            self.connection.rollback()
            raise
        
        return updated_count, inserted_count, failed_count

    def validate_inventory_data(self, inventory_records: List[InventoryRecord], source: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î."""
        if self.sync_logger:
            self.sync_logger.log_info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –æ—Ç {source}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º InventoryRecord –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        records_dict = []
        for record in inventory_records:
            record_dict = {
                'product_id': record.product_id,
                'sku': record.sku,
                'source': record.source,
                'warehouse_name': record.warehouse_name,
                'stock_type': record.stock_type,
                'current_stock': record.current_stock,
                'reserved_stock': record.reserved_stock,
                'available_stock': record.available_stock,
                'quantity_present': record.quantity_present,
                'quantity_reserved': record.quantity_reserved,
                'snapshot_date': record.snapshot_date
            }
            records_dict.append(record_dict)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        validation_result = self.validator.validate_inventory_records(records_dict, source)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î
        if inventory_records:
            product_ids = [record.product_id for record in inventory_records if record.product_id]
            if product_ids:
                existence_result = self.validator.validate_product_existence(product_ids, self.cursor)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                validation_result.issues.extend(existence_result.issues)
                if not existence_result.is_valid:
                    validation_result.is_valid = False
        
        return validation_result

    def filter_valid_records(self, inventory_records: List[InventoryRecord], 
                           validation_result: ValidationResult) -> List[InventoryRecord]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        if validation_result.is_valid:
            return inventory_records
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–µ–π —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
        error_record_ids = set()
        for issue in validation_result.issues:
            if issue.severity.value == 'error' and issue.record_id:
                error_record_ids.add(issue.record_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
        valid_records = []
        for i, record in enumerate(inventory_records):
            record_id = f"{record.source}_{i}"
            if record_id not in error_record_ids:
                valid_records.append(record)
        
        if self.sync_logger:
            self.sync_logger.log_info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(valid_records)} –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(inventory_records)}")
        
        return valid_records

    def check_data_anomalies(self, inventory_records: List[InventoryRecord], source: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö."""
        if self.sync_logger:
            self.sync_logger.log_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö {source}")
        
        anomalies = {
            'source': source,
            'total_records': len(inventory_records),
            'anomalies': [],
            'statistics': {}
        }
        
        if not inventory_records:
            return anomalies
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º
        quantities = [record.quantity_present for record in inventory_records]
        reserved_quantities = [record.quantity_reserved for record in inventory_records]
        
        anomalies['statistics'] = {
            'total_present': sum(quantities),
            'total_reserved': sum(reserved_quantities),
            'avg_present': sum(quantities) / len(quantities),
            'max_present': max(quantities),
            'min_present': min(quantities),
            'zero_stock_count': len([q for q in quantities if q == 0]),
            'high_stock_count': len([q for q in quantities if q > 1000])
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π
        # (–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
        
        if self.sync_logger:
            self.sync_logger.log_info(f"–ù–∞–π–¥–µ–Ω–æ {len(anomalies['anomalies'])} —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö {source}")
        
        return anomalies

    def print_sync_summary(self, results: Dict[str, SyncResult]) -> None:
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        logger.info("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
        logger.info("=" * 50)
        
        for source, result in results.items():
            logger.info(f"{source}:")
            logger.info(f"  –°—Ç–∞—Ç—É—Å: {result.status.value}")
            logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.records_processed}")
            logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result.records_updated}")
            logger.info(f"  –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
            logger.info(f"  –û—à–∏–±–æ–∫: {result.records_failed}")
            logger.info(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.duration_seconds} —Å–µ–∫")
            if result.error_message:
                logger.info(f"  –û—à–∏–±–∫–∞: {result.error_message}")
            logger.info("-" * 30)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."""
    service = EnhancedInventorySyncService()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        service.connect_to_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        results = service.run_full_sync()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        for source, result in results.items():
            logger.info(f"{source}: {result.status.value} - {result.records_inserted} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
    finally:
        service.close_database_connection()


if __name__ == "__main__":
    main()