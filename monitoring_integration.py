#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç SyncMonitor –∏ AlertManager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
—Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import logging
import time
try:
    import schedule
except ImportError:
    schedule = None
from datetime import datetime, timedelta, date
from typing import Dict, Any, List, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from sync_monitor import SyncMonitor, HealthStatus, AnomalyType
    from alert_manager import AlertManager, AlertLevel, NotificationType, Alert
    from sync_logger import SyncLogger
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã sync_monitor.py –∏ alert_manager.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    exit(1)


@dataclass
class MonitoringConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    health_check_interval_minutes: int = 30
    anomaly_check_interval_minutes: int = 60
    weekly_report_day: str = "monday"  # –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    weekly_report_time: str = "09:00"  # –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    stale_data_threshold_hours: int = 6
    critical_error_threshold: int = 5
    enable_auto_monitoring: bool = True


class MonitoringIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    - –î–µ—Ç–µ–∫—Ü–∏—é –∞–Ω–æ–º–∞–ª–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, db_cursor, db_connection, config: Optional[MonitoringConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.
        
        Args:
            db_cursor: –ö—É—Ä—Å–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        self.cursor = db_cursor
        self.connection = db_connection
        self.config = config or MonitoringConfig()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.monitor = SyncMonitor(db_cursor, db_connection, "MonitoringIntegration")
        self.alert_manager = AlertManager(db_cursor, db_connection, "MonitoringIntegration")
        
        self.logger = logging.getLogger("MonitoringIntegration")
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_health_check = None
        self.consecutive_errors = {}
        self.last_weekly_report = None
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.config.enable_auto_monitoring:
            self._setup_monitoring_schedule()
    
    def _setup_monitoring_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        try:
            if not schedule:
                self.logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å schedule –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            schedule.every(self.config.health_check_interval_minutes).minutes.do(
                self._scheduled_health_check
            )
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
            schedule.every(self.config.anomaly_check_interval_minutes).minutes.do(
                self._scheduled_anomaly_check
            )
            
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            getattr(schedule.every(), self.config.weekly_report_day).at(
                self.config.weekly_report_time
            ).do(self._scheduled_weekly_report)
            
            self.logger.info("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    def run_monitoring_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.logger.info("üîç –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            health_report = self.monitor.check_sync_health()
            self._process_health_report(health_report)
            
            # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
            anomalies = self.monitor.detect_data_anomalies()
            self._process_anomalies(anomalies)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            self._check_stale_data()
            
            self.logger.info("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            self.alert_manager.send_alert(
                Alert(
                    level=AlertLevel.ERROR,
                    type=NotificationType.SYSTEM_HEALTH,
                    title="–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    message=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}",
                    details={'error': str(e), 'timestamp': datetime.now().isoformat()}
                )
            )
    
    def _process_health_report(self, health_report):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (health_report.overall_status == HealthStatus.CRITICAL or
                self._health_status_changed(health_report)):
                
                sources_status = {}
                for source, data in health_report.sources.items():
                    sources_status[source] = data.get('health_status', HealthStatus.UNKNOWN).value
                
                self.alert_manager.send_system_health_alert(
                    overall_status=health_report.overall_status.value,
                    sources_status=sources_status,
                    anomalies_count=len(health_report.anomalies)
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É
            self.last_health_check = health_report
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.logger.info(
                f"üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health_report.overall_status.value}, "
                f"–∞–Ω–æ–º–∞–ª–∏–π: {len(health_report.anomalies)}"
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
    
    def _process_anomalies(self, anomalies):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π."""
        try:
            for anomaly in anomalies:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
                self.alert_manager.send_anomaly_alert(
                    anomaly_type=anomaly.type.value,
                    source=anomaly.source,
                    description=anomaly.description,
                    affected_records=anomaly.affected_records,
                    severity=anomaly.severity
                )
                
                self.logger.warning(
                    f"‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏—è {anomaly.type.value} –≤ {anomaly.source}: "
                    f"{anomaly.description} (–∑–∞—Ç—Ä–æ–Ω—É—Ç–æ: {anomaly.affected_records})"
                )
            
            if not anomalies:
                self.logger.info("‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π: {e}")
    
    def _check_stale_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            sources = ['Ozon', 'Wildberries']
            
            for source in sources:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                last_update = self._get_last_sync_time(source)
                
                if last_update:
                    hours_since_update = (datetime.now() - last_update).total_seconds() / 3600
                    
                    if hours_since_update > self.config.stale_data_threshold_hours:
                        self.alert_manager.send_stale_data_alert(
                            source=source,
                            hours_since_update=hours_since_update
                        )
                        
                        self.logger.warning(
                            f"‚è∞ –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ {source}: "
                            f"{hours_since_update:.1f} —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                        )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
                    self.alert_manager.send_stale_data_alert(
                        source=source,
                        hours_since_update=999  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    )
                    
                    self.logger.warning(f"‚è∞ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –¥–ª—è {source}")
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _get_last_sync_time(self, source: str) -> Optional[datetime]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            is_sqlite = hasattr(self.cursor, 'lastrowid') and 'sqlite' in str(type(self.cursor)).lower()
            
            if is_sqlite:
                query = """
                    SELECT MAX(completed_at) as last_sync
                    FROM sync_logs 
                    WHERE source = ? 
                      AND status = 'success'
                      AND sync_type = 'inventory'
                """
                self.cursor.execute(query, (source,))
            else:
                query = """
                    SELECT MAX(completed_at) as last_sync
                    FROM sync_logs 
                    WHERE source = %s 
                      AND status = 'success'
                      AND sync_type = 'inventory'
                """
                self.cursor.execute(query, (source,))
            
            result = self.cursor.fetchone()
            
            if result:
                last_sync = result['last_sync'] if isinstance(result, dict) else result[0]
                
                if last_sync:
                    if isinstance(last_sync, str):
                        return datetime.fromisoformat(last_sync.replace('Z', '+00:00'))
                    return last_sync
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return None
    
    def _health_status_changed(self, current_report) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
        if not self.last_health_check:
            return True  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if current_report.overall_status != self.last_health_check.overall_status:
            return True
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        for source in current_report.sources:
            current_status = current_report.sources[source].get('health_status')
            last_status = self.last_health_check.sources.get(source, {}).get('health_status')
            
            if current_status != last_status:
                return True
        
        return False
    
    def _scheduled_health_check(self):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
        self.logger.info("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            health_report = self.monitor.check_sync_health()
            self._process_health_report(health_report)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _scheduled_anomaly_check(self):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π."""
        self.logger.info("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π")
        
        try:
            anomalies = self.monitor.detect_data_anomalies()
            self._process_anomalies(anomalies)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π: {e}")
    
    def _scheduled_weekly_report(self):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        self.logger.info("‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
            report_data = self.monitor.generate_sync_report(period_hours=168)  # 7 –¥–Ω–µ–π
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.alert_manager.send_weekly_report(report_data)
            
            self.last_weekly_report = datetime.now()
            self.logger.info("üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def start_monitoring_daemon(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        if not self.config.enable_auto_monitoring:
            self.logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        try:
            while True:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if schedule:
                    schedule.run_pending()
                
                # –°–ø–∏–º 1 –º–∏–Ω—É—Ç—É
                time.sleep(60)
                
        except KeyboardInterrupt:
            self.logger.info("üõë –î–µ–º–æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç
            self.alert_manager.send_alert(
                Alert(
                    level=AlertLevel.CRITICAL,
                    type=NotificationType.SYSTEM_HEALTH,
                    title="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    message=f"–î–µ–º–æ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {str(e)}",
                    details={'error': str(e), 'timestamp': datetime.now().isoformat()}
                )
            )
    
    def generate_monitoring_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤
            recent_alerts = self.alert_manager.get_recent_alerts(hours=24)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ —Ç–∏–ø–∞–º
            alerts_by_type = {}
            for alert in recent_alerts:
                alert_type = alert.get('alert_type', 'unknown')
                if alert_type not in alerts_by_type:
                    alerts_by_type[alert_type] = 0
                alerts_by_type[alert_type] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            health_report = self.monitor.check_sync_health()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = {
                "generated_at": datetime.now(),
                "monitoring_config": {
                    "health_check_interval_minutes": self.config.health_check_interval_minutes,
                    "anomaly_check_interval_minutes": self.config.anomaly_check_interval_minutes,
                    "stale_data_threshold_hours": self.config.stale_data_threshold_hours,
                    "auto_monitoring_enabled": self.config.enable_auto_monitoring
                },
                "current_system_health": {
                    "overall_status": health_report.overall_status.value,
                    "sources_count": len(health_report.sources),
                    "anomalies_count": len(health_report.anomalies),
                    "last_check_time": health_report.generated_at
                },
                "alerts_24h": {
                    "total_alerts": len(recent_alerts),
                    "by_type": alerts_by_type,
                    "critical_alerts": len([a for a in recent_alerts if a.get('alert_level') == 'critical']),
                    "error_alerts": len([a for a in recent_alerts if a.get('alert_level') == 'error'])
                },
                "monitoring_status": {
                    "last_health_check": self.last_health_check.generated_at if self.last_health_check else None,
                    "last_weekly_report": self.last_weekly_report,
                    "consecutive_errors": dict(self.consecutive_errors)
                }
            }
            
            return report
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return {
                "error": str(e),
                "generated_at": datetime.now()
            }
    
    def test_monitoring_system(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        results = {
            "monitor_test": False,
            "alert_manager_test": False,
            "integration_test": False,
            "notification_channels": {},
            "errors": []
        }
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º SyncMonitor
            try:
                health_report = self.monitor.check_sync_health()
                results["monitor_test"] = True
                self.logger.info("‚úÖ SyncMonitor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                results["errors"].append(f"SyncMonitor error: {str(e)}")
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ SyncMonitor: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AlertManager
            try:
                notification_results = self.alert_manager.test_notification_channels()
                results["alert_manager_test"] = True
                results["notification_channels"] = notification_results
                self.logger.info("‚úÖ AlertManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                results["errors"].append(f"AlertManager error: {str(e)}")
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ AlertManager: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            try:
                self.run_monitoring_cycle()
                results["integration_test"] = True
                self.logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                results["errors"].append(f"Integration error: {str(e)}")
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            
            # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results["overall_success"] = (
                results["monitor_test"] and 
                results["alert_manager_test"] and 
                results["integration_test"]
            )
            
            return results
            
        except Exception as e:
            results["errors"].append(f"Test system error: {str(e)}")
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return results


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MonitoringIntegration
    import mysql.connector
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        connection = None
        cursor = None
        
        try:
            connection = mysql.connector.connect(
                host='localhost',
                database='test_db',
                user='test_user',
                password='test_password'
            )
            cursor = connection.cursor(dictionary=True)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except:
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        config = MonitoringConfig(
            health_check_interval_minutes=5,  # –î–ª—è –¥–µ–º–æ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            anomaly_check_interval_minutes=10,  # –î–ª—è –¥–µ–º–æ - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            enable_auto_monitoring=False  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        monitoring = MonitoringIntegration(cursor, connection, config)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        test_results = monitoring.test_monitoring_system()
        
        print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if test_results['overall_success'] else '‚ùå –û—à–∏–±–∫–∏'}")
        
        if test_results['errors']:
            print("–û—à–∏–±–∫–∏:")
            for error in test_results['errors']:
                print(f"  - {error}")
        
        # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\nüîç –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitoring.run_monitoring_cycle()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ...")
        monitoring_report = monitoring.generate_monitoring_report()
        
        print(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {monitoring_report['current_system_health']['overall_status']}")
        print(f"–ê–ª–µ—Ä—Ç–æ–≤ –∑–∞ 24—á: {monitoring_report['alerts_24h']['total_alerts']}")
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω–∞ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
        # monitoring.start_monitoring_daemon()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()