#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å SyncMonitor, AlertManager –∏ –∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import sqlite3
from datetime import datetime, timedelta, date
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

try:
    from sync_monitor import SyncMonitor, HealthStatus, AnomalyType, Anomaly
    from alert_manager import AlertManager, AlertLevel, NotificationType, Alert
    from monitoring_integration import MonitoringIntegration, MonitoringConfig
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    try:
        from sync_monitor import SyncMonitor
        print("‚úÖ sync_monitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e2:
        print(f"‚ùå sync_monitor: {e2}")
    
    try:
        from alert_manager import AlertManager
        print("‚úÖ alert_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e2:
        print(f"‚ùå alert_manager: {e2}")
    
    try:
        from monitoring_integration import MonitoringIntegration
        print("‚úÖ monitoring_integration –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e2:
        print(f"‚ùå monitoring_integration: {e2}")
    
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("MonitoringTest")


class MonitoringSystemTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã."""
        self.connection = None
        self.cursor = None
        self.monitor = None
        self.alert_manager = None
        self.integration = None
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –≤ –ø–∞–º—è—Ç–∏
        self._setup_test_database()
    
    def _setup_test_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –°–æ–∑–¥–∞–µ–º SQLite –ë–î –≤ –ø–∞–º—è—Ç–∏
            self.connection = sqlite3.connect(':memory:')
            self.connection.row_factory = sqlite3.Row  # –î–ª—è —Ä–∞–±–æ—Ç—ã –∫–∞–∫ —Å dict
            self.cursor = self.connection.cursor()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            self._create_test_tables()
            self._insert_test_data()
            
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {e}")
            raise
    
    def _create_test_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü."""
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.cursor.execute("""
            CREATE TABLE sync_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sync_type TEXT NOT NULL,
                source TEXT NOT NULL,
                status TEXT NOT NULL,
                records_processed INTEGER DEFAULT 0,
                records_updated INTEGER DEFAULT 0,
                records_inserted INTEGER DEFAULT 0,
                records_failed INTEGER DEFAULT 0,
                started_at TIMESTAMP NOT NULL,
                completed_at TIMESTAMP,
                duration_seconds INTEGER DEFAULT 0,
                api_requests_count INTEGER DEFAULT 0,
                error_message TEXT,
                warning_message TEXT
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        self.cursor.execute("""
            CREATE TABLE inventory_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id INTEGER NOT NULL,
                sku TEXT NOT NULL,
                source TEXT NOT NULL,
                warehouse_name TEXT DEFAULT 'Main Warehouse',
                stock_type TEXT DEFAULT 'FBO',
                current_stock INTEGER DEFAULT 0,
                reserved_stock INTEGER DEFAULT 0,
                available_stock INTEGER DEFAULT 0,
                quantity_present INTEGER DEFAULT 0,
                quantity_reserved INTEGER DEFAULT 0,
                snapshot_date DATE NOT NULL,
                last_sync_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–ª–µ—Ä—Ç–æ–≤
        self.cursor.execute("""
            CREATE TABLE alert_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                alert_level TEXT NOT NULL,
                alert_type TEXT NOT NULL,
                title TEXT NOT NULL,
                message TEXT,
                source TEXT,
                details TEXT,
                sent_successfully INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        self.connection.commit()
    
    def _insert_test_data(self):
        """–í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        test_sync_logs = [
            # –£—Å–ø–µ—à–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            ('inventory', 'Ozon', 'success', 100, 0, 95, 5, 
             datetime.now() - timedelta(hours=2), datetime.now() - timedelta(hours=2, minutes=-5), 300, 3, None, None),
            ('inventory', 'Wildberries', 'success', 80, 0, 75, 5,
             datetime.now() - timedelta(hours=1), datetime.now() - timedelta(hours=1, minutes=-3), 180, 2, None, None),
            
            # –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            ('inventory', 'Ozon', 'partial', 120, 0, 100, 20,
             datetime.now() - timedelta(hours=6), datetime.now() - timedelta(hours=6, minutes=-8), 480, 4, None, 'Some warnings'),
            
            # –ù–µ—É–¥–∞—á–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            ('inventory', 'Wildberries', 'failed', 0, 0, 0, 0,
             datetime.now() - timedelta(hours=8), datetime.now() - timedelta(hours=8, minutes=-1), 60, 1, 'API key invalid', None),
        ]
        
        for log_data in test_sync_logs:
            self.cursor.execute("""
                INSERT INTO sync_logs 
                (sync_type, source, status, records_processed, records_updated, records_inserted, 
                 records_failed, started_at, completed_at, duration_seconds, api_requests_count, 
                 error_message, warning_message)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, log_data)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        test_inventory_data = [
            # Ozon —Ç–æ–≤–∞—Ä—ã
            (1, 'OZON001', 'Ozon', 'Ozon Main', 'FBO', 50, 5, 45, 50, 5, date.today(), datetime.now() - timedelta(hours=2)),
            (2, 'OZON002', 'Ozon', 'Ozon Main', 'FBS', 0, 0, 0, 0, 0, date.today(), datetime.now() - timedelta(hours=2)),
            (3, 'OZON003', 'Ozon', 'Ozon Main', 'FBO', 100, 10, 90, 100, 10, date.today(), datetime.now() - timedelta(hours=2)),
            
            # Wildberries —Ç–æ–≤–∞—Ä—ã
            (4, 'WB001', 'Wildberries', 'WB Main', 'FBS', 25, 2, 23, 25, 2, date.today(), datetime.now() - timedelta(hours=1)),
            (5, 'WB002', 'Wildberries', 'WB Main', 'FBS', 0, 0, 0, 0, 0, date.today(), datetime.now() - timedelta(hours=1)),
            
            # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            (6, 'OLD001', 'Ozon', 'Ozon Main', 'FBO', 30, 3, 27, 30, 3, date.today() - timedelta(days=1), datetime.now() - timedelta(hours=25)),
        ]
        
        for inventory_data in test_inventory_data:
            self.cursor.execute("""
                INSERT INTO inventory_data 
                (product_id, sku, source, warehouse_name, stock_type, current_stock, 
                 reserved_stock, available_stock, quantity_present, quantity_reserved, 
                 snapshot_date, last_sync_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, inventory_data)
        
        self.connection.commit()
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã")
    
    def setup_monitoring_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º SyncMonitor
            self.monitor = SyncMonitor(self.cursor, self.connection, "TestMonitor")
            
            # –°–æ–∑–¥–∞–µ–º AlertManager (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            self.alert_manager = AlertManager(self.cursor, self.connection, "TestAlertManager")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            config = MonitoringConfig(
                health_check_interval_minutes=5,
                anomaly_check_interval_minutes=10,
                enable_auto_monitoring=False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            )
            self.integration = MonitoringIntegration(self.cursor, self.connection, config)
            
            logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def test_sync_monitor(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SyncMonitor."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SyncMonitor")
        
        results = {
            'health_check': False,
            'anomaly_detection': False,
            'sync_report': False,
            'errors': []
        }
        
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            try:
                health_report = self.monitor.check_sync_health()
                
                assert health_report is not None
                assert hasattr(health_report, 'overall_status')
                assert hasattr(health_report, 'sources')
                assert hasattr(health_report, 'anomalies')
                
                results['health_check'] = True
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {health_report.overall_status.value}")
                
            except Exception as e:
                results['errors'].append(f"Health check error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
            # –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
            try:
                anomalies = self.monitor.detect_data_anomalies()
                
                assert isinstance(anomalies, list)
                
                results['anomaly_detection'] = True
                logger.info(f"‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π: –Ω–∞–π–¥–µ–Ω–æ {len(anomalies)} –∞–Ω–æ–º–∞–ª–∏–π")
                
                # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
                for anomaly in anomalies:
                    logger.info(f"  - {anomaly.type.value} –≤ {anomaly.source}: {anomaly.description}")
                
            except Exception as e:
                results['errors'].append(f"Anomaly detection error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π: {e}")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            try:
                sync_report = self.monitor.generate_sync_report(24)
                
                assert isinstance(sync_report, dict)
                assert 'generated_at' in sync_report
                
                results['sync_report'] = True
                logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                
            except Exception as e:
                results['errors'].append(f"Sync report error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            
            results['success'] = all([
                results['health_check'],
                results['anomaly_detection'],
                results['sync_report']
            ])
            
            return results
            
        except Exception as e:
            results['errors'].append(f"General SyncMonitor error: {str(e)}")
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ SyncMonitor: {e}")
            return results
    
    def test_alert_manager(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AlertManager."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AlertManager")
        
        results = {
            'sync_failure_alert': False,
            'stale_data_alert': False,
            'anomaly_alert': False,
            'system_health_alert': False,
            'alert_logging': False,
            'errors': []
        }
        
        try:
            # –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞ –æ —Å–±–æ–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            try:
                success = self.alert_manager.send_sync_failure_alert(
                    source="TestSource",
                    error_message="Test error message",
                    failure_count=3
                )
                
                results['sync_failure_alert'] = True  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                logger.info("‚úÖ –ê–ª–µ—Ä—Ç –æ —Å–±–æ–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                
            except Exception as e:
                results['errors'].append(f"Sync failure alert error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ —Å–±–æ–µ: {e}")
            
            # –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞ –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            try:
                success = self.alert_manager.send_stale_data_alert(
                    source="TestSource",
                    hours_since_update=12.5
                )
                
                results['stale_data_alert'] = True
                logger.info("‚úÖ –ê–ª–µ—Ä—Ç –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
                
            except Exception as e:
                results['errors'].append(f"Stale data alert error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
            try:
                success = self.alert_manager.send_anomaly_alert(
                    anomaly_type="test_anomaly",
                    source="TestSource",
                    description="Test anomaly description",
                    affected_records=10,
                    severity="medium"
                )
                
                results['anomaly_alert'] = True
                logger.info("‚úÖ –ê–ª–µ—Ä—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏–∏")
                
            except Exception as e:
                results['errors'].append(f"Anomaly alert error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏: {e}")
            
            # –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            try:
                success = self.alert_manager.send_system_health_alert(
                    overall_status="warning",
                    sources_status={"TestSource1": "healthy", "TestSource2": "warning"},
                    anomalies_count=2
                )
                
                results['system_health_alert'] = True
                logger.info("‚úÖ –ê–ª–µ—Ä—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
                
            except Exception as e:
                results['errors'].append(f"System health alert error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            
            # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –≤ –ë–î
            try:
                recent_alerts = self.alert_manager.get_recent_alerts(hours=1)
                
                assert isinstance(recent_alerts, list)
                
                results['alert_logging'] = True
                logger.info(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(recent_alerts)} –∑–∞–ø–∏—Å–µ–π")
                
            except Exception as e:
                results['errors'].append(f"Alert logging error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            
            results['success'] = all([
                results['sync_failure_alert'],
                results['stale_data_alert'],
                results['anomaly_alert'],
                results['system_health_alert'],
                results['alert_logging']
            ])
            
            return results
            
        except Exception as e:
            results['errors'].append(f"General AlertManager error: {str(e)}")
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ AlertManager: {e}")
            return results
    
    def test_monitoring_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        results = {
            'monitoring_cycle': False,
            'monitoring_report': False,
            'system_test': False,
            'errors': []
        }
        
        try:
            # –¢–µ—Å—Ç —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                self.integration.run_monitoring_cycle()
                
                results['monitoring_cycle'] = True
                logger.info("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                
            except Exception as e:
                results['errors'].append(f"Monitoring cycle error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            try:
                monitoring_report = self.integration.generate_monitoring_report()
                
                assert isinstance(monitoring_report, dict)
                assert 'generated_at' in monitoring_report
                
                results['monitoring_report'] = True
                logger.info("‚úÖ –û—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")
                
            except Exception as e:
                results['errors'].append(f"Monitoring report error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            
            # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                system_test_results = self.integration.test_monitoring_system()
                
                assert isinstance(system_test_results, dict)
                
                results['system_test'] = system_test_results.get('overall_success', False)
                logger.info(f"‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã: {'—É—Å–ø–µ—à–Ω–æ' if results['system_test'] else '—Å –æ—à–∏–±–∫–∞–º–∏'}")
                
            except Exception as e:
                results['errors'].append(f"System test error: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            
            results['success'] = all([
                results['monitoring_cycle'],
                results['monitoring_report'],
                results['system_test']
            ])
            
            return results
            
        except Exception as e:
            results['errors'].append(f"General integration error: {str(e)}")
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return results
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        overall_results = {
            'sync_monitor': {},
            'alert_manager': {},
            'integration': {},
            'overall_success': False,
            'total_errors': 0
        }
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.setup_monitoring_components()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º SyncMonitor
            overall_results['sync_monitor'] = self.test_sync_monitor()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AlertManager
            overall_results['alert_manager'] = self.test_alert_manager()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            overall_results['integration'] = self.test_monitoring_integration()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            all_success = all([
                overall_results['sync_monitor'].get('success', False),
                overall_results['alert_manager'].get('success', False),
                overall_results['integration'].get('success', False)
            ])
            
            overall_results['overall_success'] = all_success
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
            total_errors = 0
            for component_results in overall_results.values():
                if isinstance(component_results, dict) and 'errors' in component_results:
                    total_errors += len(component_results['errors'])
            
            overall_results['total_errors'] = total_errors
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if all_success:
                logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏. –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
            
            return overall_results
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            overall_results['critical_error'] = str(e)
            return overall_results
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            if self.cursor:
                self.cursor.close()
            if self.connection:
                self.connection.close()
            logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –ê–õ–ï–†–¢–û–í")
    print("=" * 60)
    
    test_system = MonitoringSystemTest()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        results = test_system.run_all_tests()
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        print(f"\nüìä SyncMonitor:")
        sync_monitor_results = results['sync_monitor']
        print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ' if sync_monitor_results.get('health_check') else '‚ùå'}")
        print(f"  –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π: {'‚úÖ' if sync_monitor_results.get('anomaly_detection') else '‚ùå'}")
        print(f"  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤: {'‚úÖ' if sync_monitor_results.get('sync_report') else '‚ùå'}")
        
        print(f"\nüìß AlertManager:")
        alert_manager_results = results['alert_manager']
        print(f"  –ê–ª–µ—Ä—Ç—ã –æ —Å–±–æ—è—Ö: {'‚úÖ' if alert_manager_results.get('sync_failure_alert') else '‚ùå'}")
        print(f"  –ê–ª–µ—Ä—Ç—ã –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if alert_manager_results.get('stale_data_alert') else '‚ùå'}")
        print(f"  –ê–ª–µ—Ä—Ç—ã –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö: {'‚úÖ' if alert_manager_results.get('anomaly_alert') else '‚ùå'}")
        print(f"  –ê–ª–µ—Ä—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {'‚úÖ' if alert_manager_results.get('system_health_alert') else '‚ùå'}")
        print(f"  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤: {'‚úÖ' if alert_manager_results.get('alert_logging') else '‚ùå'}")
        
        print(f"\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:")
        integration_results = results['integration']
        print(f"  –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {'‚úÖ' if integration_results.get('monitoring_cycle') else '‚ùå'}")
        print(f"  –û—Ç—á–µ—Ç –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {'‚úÖ' if integration_results.get('monitoring_report') else '‚ùå'}")
        print(f"  –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã: {'‚úÖ' if integration_results.get('system_test') else '‚ùå'}")
        
        print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –£–°–ü–ï–®–ù–û' if results['overall_success'] else '‚ùå –° –û–®–ò–ë–ö–ê–ú–ò'}")
        print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {results['total_errors']}")
        
        # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if results['total_errors'] > 0:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for component, component_results in results.items():
                if isinstance(component_results, dict) and 'errors' in component_results:
                    for error in component_results['errors']:
                        print(f"  {component}: {error}")
        
        print("\n" + "=" * 60)
        
        return 0 if results['overall_success'] else 1
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1
    finally:
        test_system.cleanup()


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)