<?php
/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∏–Ω–¥–µ–∫—Å–æ–≤, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 * –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ 7: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */

require_once __DIR__ . '/../config.php';
require_once __DIR__ . '/../api/inventory_cache_manager.php';

class InventoryPerformanceOptimizationTest {
    private $pdo;
    private $cache;
    private $test_results = [];
    
    public function __construct() {
        $this->pdo = getDatabaseConnection();
        $this->cache = getInventoryCacheManager();
    }
    
    public function runAllTests() {
        echo "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ ===\n\n";
        
        $tests = [
            'testDatabaseIndexes' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            'testCacheSystem' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
            'testApiPerformance' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API',
            'testQueryOptimization' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
            'testCacheEfficiency' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞',
            'testErrorHandling' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫'
        ];
        
        foreach ($tests as $method => $description) {
            echo "üîç $description...\n";
            $this->runTest($method);
            echo "\n";
        }
        
        $this->generateSummary();
    }
    
    private function runTest($method) {
        $start_time = microtime(true);
        
        try {
            $result = $this->$method();
            $execution_time = microtime(true) - $start_time;
            
            $this->test_results[$method] = [
                'status' => 'success',
                'execution_time' => $execution_time,
                'details' => $result
            ];
            
            echo "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω –∑–∞ " . round($execution_time * 1000, 2) . " –º—Å\n";
            
            if (is_array($result) && !empty($result)) {
                foreach ($result as $detail) {
                    echo "   $detail\n";
                }
            }
            
        } catch (Exception $e) {
            $execution_time = microtime(true) - $start_time;
            
            $this->test_results[$method] = [
                'status' => 'error',
                'execution_time' => $execution_time,
                'error' => $e->getMessage()
            ];
            
            echo "‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private function testDatabaseIndexes() {
        $results = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è inventory_data
        $expected_indexes = [
            'idx_inventory_data_sku',
            'idx_inventory_data_warehouse',
            'idx_inventory_data_current_stock',
            'idx_inventory_data_main_query'
        ];
        
        $stmt = $this->pdo->prepare("
            SELECT INDEX_NAME, COLUMN_NAME, CARDINALITY
            FROM information_schema.STATISTICS 
            WHERE TABLE_SCHEMA = DATABASE() 
            AND TABLE_NAME = 'inventory_data'
            AND INDEX_NAME LIKE 'idx_%'
            ORDER BY INDEX_NAME, SEQ_IN_INDEX
        ");
        $stmt->execute();
        $indexes = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $found_indexes = array_unique(array_column($indexes, 'INDEX_NAME'));
        
        foreach ($expected_indexes as $expected) {
            if (in_array($expected, $found_indexes)) {
                $results[] = "‚úÖ –ò–Ω–¥–µ–∫—Å $expected –Ω–∞–π–¥–µ–Ω";
            } else {
                $results[] = "‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å $expected –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
        $low_cardinality_indexes = array_filter($indexes, function($idx) {
            return $idx['CARDINALITY'] < 10;
        });
        
        if (!empty($low_cardinality_indexes)) {
            $results[] = "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã —Å –Ω–∏–∑–∫–æ–π –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é";
        } else {
            $results[] = "‚úÖ –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –Ω–æ—Ä–º–µ";
        }
        
        return $results;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private function testCacheSystem() {
        $results = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—ç—à–∞
        if (!$this->cache->isEnabled()) {
            throw new Exception("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
        }
        
        $results[] = "‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ";
        
        // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è
        $test_key = 'performance_test_' . time();
        $test_data = ['test' => true, 'timestamp' => time()];
        
        $write_success = $this->cache->set($test_key, $test_data, 60);
        if (!$write_success) {
            throw new Exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à");
        }
        
        $results[] = "‚úÖ –ó–∞–ø–∏—Å—å –≤ –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç";
        
        $read_data = $this->cache->get($test_key);
        if (!$read_data || $read_data['test'] !== true) {
            throw new Exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞");
        }
        
        $results[] = "‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç";
        
        // –¢–µ—Å—Ç TTL
        $this->cache->set($test_key . '_ttl', ['ttl_test' => true], 1);
        sleep(2);
        $expired_data = $this->cache->get($test_key . '_ttl');
        
        if ($expired_data === null) {
            $results[] = "‚úÖ TTL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ";
        } else {
            $results[] = "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å TTL";
        }
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $this->cache->delete($test_key);
        $this->cache->delete($test_key . '_ttl');
        
        return $results;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
     */
    private function testApiPerformance() {
        $results = [];
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
        require_once __DIR__ . '/../api/inventory-analytics.php';
        
        $functions_to_test = [
            'getInventoryDashboardData' => 'Dashboard data',
            'getCriticalProducts' => 'Critical products',
            'getWarehouseSummary' => 'Warehouse summary'
        ];
        
        foreach ($functions_to_test as $function => $name) {
            if (function_exists($function)) {
                $start = microtime(true);
                
                try {
                    $result = $function($this->pdo);
                    $execution_time = microtime(true) - $start;
                    $time_ms = round($execution_time * 1000, 2);
                    
                    if ($execution_time < 0.5) {
                        $results[] = "‚úÖ $name: {$time_ms} –º—Å (–±—ã—Å—Ç—Ä–æ)";
                    } elseif ($execution_time < 1.0) {
                        $results[] = "‚ö†Ô∏è  $name: {$time_ms} –º—Å (–ø—Ä–∏–µ–º–ª–µ–º–æ)";
                    } else {
                        $results[] = "‚ùå $name: {$time_ms} –º—Å (–º–µ–¥–ª–µ–Ω–Ω–æ)";
                    }
                    
                    if (is_array($result) && isset($result['data'])) {
                        $results[] = "   üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ";
                    }
                    
                } catch (Exception $e) {
                    $results[] = "‚ùå $name: " . $e->getMessage();
                }
            } else {
                $results[] = "‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è $function –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
            }
        }
        
        return $results;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private function testQueryOptimization() {
        $results = [];
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–∞—à–±–æ—Ä–¥–∞
        $main_query = "
            SELECT 
                i.sku,
                i.warehouse_name,
                SUM(i.current_stock) as total_stock,
                CASE
                    WHEN SUM(i.current_stock) <= 5 THEN 'critical'
                    WHEN SUM(i.current_stock) <= 20 THEN 'low'
                    WHEN SUM(i.current_stock) > 100 THEN 'overstock'
                    ELSE 'normal'
                END as stock_status
            FROM inventory_data i
            WHERE i.current_stock IS NOT NULL
            GROUP BY i.sku, i.warehouse_name
            LIMIT 100
        ";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        $explain_stmt = $this->pdo->prepare("EXPLAIN " . $main_query);
        $explain_stmt->execute();
        $explain = $explain_stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $uses_index = false;
        $estimated_rows = 0;
        
        foreach ($explain as $row) {
            if ($row['key'] && $row['key'] !== 'NULL') {
                $uses_index = true;
                $results[] = "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å: " . $row['key'];
            }
            $estimated_rows += $row['rows'];
        }
        
        if (!$uses_index) {
            $results[] = "‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å—ã";
        }
        
        if ($estimated_rows > 10000) {
            $results[] = "‚ö†Ô∏è  –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Å—Ç—Ä–æ–∫: " . number_format($estimated_rows);
        } else {
            $results[] = "‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Å—Ç—Ä–æ–∫: " . number_format($estimated_rows);
        }
        
        // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        $start = microtime(true);
        $stmt = $this->pdo->prepare($main_query);
        $stmt->execute();
        $results_count = $stmt->rowCount();
        $execution_time = microtime(true) - $start;
        
        $time_ms = round($execution_time * 1000, 2);
        
        if ($execution_time < 0.1) {
            $results[] = "‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {$time_ms} –º—Å";
        } elseif ($execution_time < 0.5) {
            $results[] = "‚ö†Ô∏è  –ü—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è: {$time_ms} –º—Å";
        } else {
            $results[] = "‚ùå –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {$time_ms} –º—Å";
        }
        
        return $results;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
     */
    private function testCacheEfficiency() {
        $results = [];
        
        if (!$this->cache->isEnabled()) {
            throw new Exception("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
        }
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        $this->cache->clear();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à –Ω–∞–ø—Ä—è–º—É—é —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        require_once __DIR__ . '/../api/inventory-analytics.php';
        
        if (function_exists('getInventoryDashboardData')) {
            // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –≤ –ë–î)
            $cache_key = InventoryCacheKeys::getDashboardKey();
            
            $start = microtime(true);
            $result1 = getInventoryDashboardData($this->pdo);
            $time1 = microtime(true) - $start;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            $this->cache->set($cache_key, $result1, 300);
            
            // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –∏–∑ –∫—ç—à–∞)
            $start = microtime(true);
            $cached_result = $this->cache->get($cache_key);
            $time2 = microtime(true) - $start;
            
            if ($cached_result) {
                $speedup = $time1 / $time2;
                
                if ($speedup > 10) {
                    $results[] = "‚úÖ –ö—ç—à —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ " . round($speedup, 1) . " —Ä–∞–∑";
                } else {
                    $results[] = "‚ö†Ô∏è  –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –∫—ç—à–∞: " . round($speedup, 1) . "x";
                }
                
                $results[] = "üìä –ó–∞–ø—Ä–æ—Å –∏–∑ –ë–î: " . round($time1 * 1000, 2) . " –º—Å";
                $results[] = "üìä –ó–∞–ø—Ä–æ—Å –∏–∑ –∫—ç—à–∞: " . round($time2 * 1000, 2) . " –º—Å";
                $results[] = "‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ";
            } else {
                $results[] = "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞";
            }
        } else {
            $results[] = "‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è getInventoryDashboardData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
        }
        
        return $results;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
     */
    private function testErrorHandling() {
        $results = [];
        
        // –¢–µ—Å—Ç –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        $invalid_key = 'invalid/key\\with*special?chars';
        
        try {
            $this->cache->set($invalid_key, ['test' => true]);
            $this->cache->get($invalid_key);
            $results[] = "‚úÖ –ö—ç—à –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã";
        } catch (Exception $e) {
            $results[] = "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫—ç—à–µ";
        }
        
        // –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º PDO –æ–±—ä–µ–∫—Ç–æ–º
            $invalid_pdo = null;
            
            require_once __DIR__ . '/../api/inventory-analytics.php';
            
            if (function_exists('validateDatabaseConnection')) {
                $validation_result = validateDatabaseConnection($this->pdo);
                if ($validation_result) {
                    $results[] = "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç";
                } else {
                    $results[] = "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î";
                }
            }
            
            // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (function_exists('validateInput')) {
                $validation_errors = validateInput('invalid_action');
                if (!empty($validation_errors)) {
                    $results[] = "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç";
                } else {
                    $results[] = "‚ö†Ô∏è  –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç";
                }
            }
            
        } catch (Exception $e) {
            $results[] = "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: " . $e->getMessage();
        }
        
        return $results;
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     */
    private function generateSummary() {
        echo "=== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô ===\n\n";
        
        $total_tests = count($this->test_results);
        $successful_tests = count(array_filter($this->test_results, function($r) { 
            return $r['status'] === 'success'; 
        }));
        $failed_tests = $total_tests - $successful_tests;
        
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:\n";
        echo "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests\n";
        echo "   –£—Å–ø–µ—à–Ω—ã—Ö: $successful_tests\n";
        echo "   –ù–µ—É–¥–∞—á–Ω—ã—Ö: $failed_tests\n";
        echo "   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " . round(($successful_tests / $total_tests) * 100, 1) . "%\n\n";
        
        echo "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n";
        $total_time = 0;
        foreach ($this->test_results as $test => $result) {
            $status_icon = $result['status'] === 'success' ? '‚úÖ' : '‚ùå';
            $time = round($result['execution_time'] * 1000, 2);
            $total_time += $result['execution_time'];
            echo "   $status_icon " . str_replace('test', '', $test) . ": {$time} –º—Å\n";
        }
        
        echo "\nüìà –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " . round($total_time * 1000, 2) . " –º—Å\n\n";
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        echo "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
        
        if ($failed_tests > 0) {
            echo "   ‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö\n";
        }
        
        if ($successful_tests === $total_tests) {
            echo "   ‚úÖ –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
            echo "   üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n";
        }
        
        echo "   üîÑ –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ\n";
        echo "   üìà –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (php_sapi_name() === 'cli') {
    $tester = new InventoryPerformanceOptimizationTest();
    $tester->runAllTests();
} else {
    echo "–≠—Ç–∏ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
}
?>