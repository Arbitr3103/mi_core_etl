/**
 * End-to-End —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å workflow –æ—Ç –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 *
 * @version 1.0
 * @author ZUZ System
 */

const puppeteer = require("puppeteer");
const path = require("path");

class EndToEndTest {
  constructor() {
    this.browser = null;
    this.page = null;
    this.results = {
      passed: 0,
      failed: 0,
      errors: [],
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async init() {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è End-to-End —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n");

    this.browser = await puppeteer.launch({
      headless: true,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });

    this.page = await this.browser.newPage();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await this.page.setViewport({ width: 1200, height: 800 });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.page.on("console", (msg) => {
      if (msg.type() === "error") {
        console.log("‚ùå Console Error:", msg.text());
      }
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    this.page.on("requestfailed", (request) => {
      console.log(
        "‚ùå Network Error:",
        request.url(),
        request.failure().errorText
      );
    });
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async cleanup() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö End-to-End —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    try {
      await this.init();

      console.log("üìã –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ End-to-End —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n");

      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
      await this.testFullFilterWorkflow();
      await this.testFilterCombinations();
      await this.testResetFunctionality();
      await this.testErrorHandling();

      // –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await this.testPerformanceWithLargeData();
      await this.testLoadingTimes();

      // –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      await this.testMobileInterface();
      await this.testAccessibility();
      await this.testBrowserCompatibility();

      this.printSummary();
    } catch (error) {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
      this.results.errors.push(`Critical error: ${error.message}`);
    } finally {
      await this.cleanup();
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   */
  async testFullFilterWorkflow() {
    console.log("1. üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...");

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const testPagePath = path.resolve(
        __dirname,
        "../demo/country-filter-demo.html"
      );
      await this.page.goto(`file://${testPagePath}`);

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await this.page.waitForSelector("#brand-select", { timeout: 5000 });
      await this.page.waitForSelector("#country-select", { timeout: 5000 });

      // –®–∞–≥ 1: –í—ã–±–∏—Ä–∞–µ–º –º–∞—Ä–∫—É
      await this.page.select("#brand-select", "1"); // BMW
      await this.page.waitForTimeout(1000); // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
      const countryOptions = await this.page.$$eval(
        "#country-select option",
        (options) => options.length
      );

      if (countryOptions > 1) {
        console.log("   ‚úÖ –°—Ç—Ä–∞–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏");
        this.results.passed++;
      } else {
        console.log("   ‚ùå –°—Ç—Ä–∞–Ω—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å");
        this.results.failed++;
        this.results.errors.push("Countries not loaded after brand selection");
      }

      // –®–∞–≥ 2: –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
      await this.page.select("#model-select", "1"); // X5
      await this.page.waitForTimeout(1000);

      // –®–∞–≥ 3: –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω—É
      await this.page.select("#country-select", "1"); // –ì–µ—Ä–º–∞–Ω–∏—è
      await this.page.waitForTimeout(500);

      // –®–∞–≥ 4: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      await this.page.click("#apply-filters");
      await this.page.waitForTimeout(2000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const resultsVisible = await this.page.$(
        "#results-container .product-item"
      );

      if (resultsVisible) {
        console.log("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã");
        this.results.passed++;
      } else {
        console.log("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã");
        this.results.failed++;
        this.results.errors.push("Filter results not displayed");
      }
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º workflow:", error.message);
      this.results.failed++;
      this.results.errors.push(`Full workflow error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  async testFilterCombinations() {
    console.log("\n2. üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤...");

    const testCombinations = [
      { brand: "1", model: null, country: null, description: "–¢–æ–ª—å–∫–æ –º–∞—Ä–∫–∞" },
      { brand: "1", model: "1", country: null, description: "–ú–∞—Ä–∫–∞ + –º–æ–¥–µ–ª—å" },
      { brand: "1", model: null, country: "1", description: "–ú–∞—Ä–∫–∞ + —Å—Ç—Ä–∞–Ω–∞" },
      { brand: "1", model: "1", country: "1", description: "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã" },
    ];

    for (const combo of testCombinations) {
      try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        await this.page.click("#reset-filters");
        await this.page.waitForTimeout(500);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
        if (combo.brand) {
          await this.page.select("#brand-select", combo.brand);
          await this.page.waitForTimeout(1000);
        }

        if (combo.model) {
          await this.page.select("#model-select", combo.model);
          await this.page.waitForTimeout(1000);
        }

        if (combo.country) {
          await this.page.select("#country-select", combo.country);
          await this.page.waitForTimeout(500);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        await this.page.click("#apply-filters");
        await this.page.waitForTimeout(1500);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const hasResults = await this.page.$(
          "#results-container .product-item"
        );
        const hasMessage = await this.page.$("#results-container .no-results");

        if (hasResults || hasMessage) {
          console.log(`   ‚úÖ ${combo.description}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç`);
          this.results.passed++;
        } else {
          console.log(`   ‚ùå ${combo.description}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞`);
          this.results.failed++;
          this.results.errors.push(
            `No response for combination: ${combo.description}`
          );
        }
      } catch (error) {
        console.log(`   ‚ùå ${combo.description}: –æ—à–∏–±–∫–∞ - ${error.message}`);
        this.results.failed++;
        this.results.errors.push(
          `Combination error (${combo.description}): ${error.message}`
        );
      }
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—Å–∞
   */
  async testResetFunctionality() {
    console.log("\n3. üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±—Ä–æ—Å–∞...");

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
      await this.page.select("#brand-select", "1");
      await this.page.waitForTimeout(1000);
      await this.page.select("#model-select", "1");
      await this.page.waitForTimeout(1000);
      await this.page.select("#country-select", "1");
      await this.page.waitForTimeout(500);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
      const brandValue = await this.page.$eval(
        "#brand-select",
        (el) => el.value
      );
      const modelValue = await this.page.$eval(
        "#model-select",
        (el) => el.value
      );
      const countryValue = await this.page.$eval(
        "#country-select",
        (el) => el.value
      );

      if (brandValue && modelValue && countryValue) {
        console.log("   ‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        this.results.passed++;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      await this.page.click("#reset-filters");
      await this.page.waitForTimeout(1000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã
      const brandValueAfter = await this.page.$eval(
        "#brand-select",
        (el) => el.value
      );
      const modelValueAfter = await this.page.$eval(
        "#model-select",
        (el) => el.value
      );
      const countryValueAfter = await this.page.$eval(
        "#country-select",
        (el) => el.value
      );

      if (!brandValueAfter && !modelValueAfter && !countryValueAfter) {
        console.log("   ‚úÖ –§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã");
        this.results.passed++;
      } else {
        console.log("   ‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é");
        this.results.failed++;
        this.results.errors.push("Filters not reset completely");
      }
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–±—Ä–æ—Å–∞:", error.message);
      this.results.failed++;
      this.results.errors.push(`Reset test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  async testErrorHandling() {
    console.log("\n4. ‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...");

    try {
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      await this.page.setRequestInterception(true);

      this.page.on("request", (request) => {
        if (request.url().includes("countries-by-brand.php")) {
          // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
          request.respond({
            status: 500,
            contentType: "application/json",
            body: JSON.stringify({ success: false, error: "Server error" }),
          });
        } else {
          request.continue();
        }
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –º–∞—Ä–∫—É (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞)
      await this.page.select("#brand-select", "1");
      await this.page.waitForTimeout(2000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = await this.page.$(".error-message");

      if (errorMessage) {
        console.log(
          "   ‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        );
        this.results.passed++;
      } else {
        console.log("   ‚ùå –û—à–∏–±–∫–∞ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        this.results.failed++;
        this.results.errors.push("Error not displayed to user");
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
      await this.page.setRequestInterception(false);
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:", error.message);
      this.results.failed++;
      this.results.errors.push(`Error handling test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async testPerformanceWithLargeData() {
    console.log("\n5. ‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");

    try {
      const startTime = Date.now();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const testPagePath = path.resolve(
        __dirname,
        "../demo/country-filter-demo.html"
      );
      await this.page.goto(`file://${testPagePath}`);

      // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      await this.page.waitForSelector("#country-select", { timeout: 10000 });

      const loadTime = Date.now() - startTime;

      if (loadTime < 3000) {
        console.log(`   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${loadTime}–º—Å`);
        this.results.passed++;
      } else if (loadTime < 5000) {
        console.log(`   ‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${loadTime}–º—Å`);
        this.results.passed++;
      } else {
        console.log(`   ‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${loadTime}–º—Å`);
        this.results.failed++;
        this.results.errors.push(`Slow loading: ${loadTime}ms`);
      }

      // –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const rapidChangeStart = Date.now();

      for (let i = 0; i < 5; i++) {
        await this.page.select("#brand-select", "1");
        await this.page.waitForTimeout(100);
        await this.page.select("#brand-select", "2");
        await this.page.waitForTimeout(100);
      }

      const rapidChangeTime = Date.now() - rapidChangeStart;

      if (rapidChangeTime < 2000) {
        console.log(`   ‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${rapidChangeTime}–º—Å`);
        this.results.passed++;
      } else {
        console.log(
          `   ‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${rapidChangeTime}–º—Å`
        );
        this.results.failed++;
        this.results.errors.push(`Slow filter changes: ${rapidChangeTime}ms`);
      }
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", error.message);
      this.results.failed++;
      this.results.errors.push(`Performance test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  async testLoadingTimes() {
    console.log("\n6. ‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏...");

    try {
      // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const operations = [
        {
          name: "–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω",
          action: async () => {
            await this.page.reload();
            await this.page.waitForSelector(
              '#country-select option[value="1"]',
              { timeout: 5000 }
            );
          },
        },
        {
          name: "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω –ø–æ –º–∞—Ä–∫–µ",
          action: async () => {
            await this.page.select("#brand-select", "1");
            await this.page.waitForTimeout(1000);
          },
        },
        {
          name: "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
          action: async () => {
            await this.page.click("#apply-filters");
            await this.page.waitForTimeout(2000);
          },
        },
      ];

      for (const operation of operations) {
        const startTime = Date.now();
        await operation.action();
        const endTime = Date.now();
        const duration = endTime - startTime;

        if (duration < 3000) {
          console.log(`   ‚úÖ ${operation.name}: ${duration}–º—Å`);
          this.results.passed++;
        } else {
          console.log(
            `   ‚ùå ${operation.name}: ${duration}–º—Å (—Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ)`
          );
          this.results.failed++;
          this.results.errors.push(
            `Slow operation: ${operation.name} - ${duration}ms`
          );
        }
      }
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏:", error.message);
      this.results.failed++;
      this.results.errors.push(`Loading time test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  async testMobileInterface() {
    console.log("\n7. üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");

    try {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π viewport
      await this.page.setViewport({ width: 375, height: 667 });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –¥–µ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const mobilePagePath = path.resolve(
        __dirname,
        "../demo/mobile-country-filter-demo.html"
      );
      await this.page.goto(`file://${mobilePagePath}`);

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      await this.page.waitForSelector("#country-select", { timeout: 5000 });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∏–¥–∏–º—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
      const selectVisible = await this.page.$eval("#country-select", (el) => {
        const rect = el.getBoundingClientRect();
        return rect.width > 0 && rect.height > 0;
      });

      if (selectVisible) {
        console.log("   ‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ –≤–∏–¥–∏–º –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º");
        this.results.passed++;
      } else {
        console.log("   ‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –≤–∏–¥–∏–º –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º");
        this.results.failed++;
        this.results.errors.push("Country filter not visible on mobile");
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è
      await this.page.tap("#country-select");
      await this.page.waitForTimeout(500);

      console.log("   ‚úÖ Touch —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç");
      this.results.passed++;

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π viewport
      await this.page.setViewport({ width: 1200, height: 800 });
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", error.message);
      this.results.failed++;
      this.results.errors.push(`Mobile interface test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (accessibility)
   */
  async testAccessibility() {
    console.log("\n8. ‚ôø –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      const ariaLabel = await this.page.$eval("#country-select", (el) =>
        el.getAttribute("aria-label")
      );

      if (ariaLabel) {
        console.log("   ‚úÖ ARIA –º–µ—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
        this.results.passed++;
      } else {
        console.log("   ‚ùå ARIA –º–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
        this.results.failed++;
        this.results.errors.push("Missing ARIA labels");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await this.page.focus("#country-select");
      await this.page.keyboard.press("Tab");

      const focusedElement = await this.page.evaluate(
        () => document.activeElement.id
      );

      if (focusedElement) {
        console.log("   ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç");
        this.results.passed++;
      } else {
        console.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã");
        this.results.failed++;
        this.results.errors.push("Keyboard navigation issues");
      }
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:", error.message);
      this.results.failed++;
      this.results.errors.push(`Accessibility test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
   */
  async testBrowserCompatibility() {
    console.log("\n9. üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏...");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö API
      const hasModernAPIs = await this.page.evaluate(() => {
        return {
          fetch: typeof fetch !== "undefined",
          promise: typeof Promise !== "undefined",
          arrow: (() => true)() === true,
          const: (() => {
            try {
              eval("const x = 1");
              return true;
            } catch (e) {
              return false;
            }
          })(),
        };
      });

      const supportedFeatures =
        Object.values(hasModernAPIs).filter(Boolean).length;
      const totalFeatures = Object.keys(hasModernAPIs).length;

      if (supportedFeatures === totalFeatures) {
        console.log("   ‚úÖ –í—Å–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è");
        this.results.passed++;
      } else {
        console.log(
          `   ‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ${supportedFeatures}/${totalFeatures} API`
        );
        this.results.passed++;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      await this.page.evaluate(() => {
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º fetch –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback
        window.originalFetch = window.fetch;
        delete window.fetch;
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –±–µ–∑ fetch
      await this.page.select("#brand-select", "1");
      await this.page.waitForTimeout(1000);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fetch
      await this.page.evaluate(() => {
        window.fetch = window.originalFetch;
      });

      console.log("   ‚úÖ Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç");
      this.results.passed++;
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:", error.message);
      this.results.failed++;
      this.results.errors.push(
        `Browser compatibility test error: ${error.message}`
      );
    }
  }

  /**
   * –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  printSummary() {
    console.log("\n" + "=".repeat(60));
    console.log("üìä –°–í–û–î–ö–ê END-TO-END –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø");
    console.log("=".repeat(60));

    const total = this.results.passed + this.results.failed;
    const successRate =
      total > 0 ? ((this.results.passed / total) * 100).toFixed(1) : 0;

    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failed}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

    if (this.results.errors.length > 0) {
      console.log("\nüîç –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:");
      this.results.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }

    console.log("\nüéØ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:");
    console.log("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (Requirements 1.1, 1.2, 1.3, 1.4)");
    console.log("‚úÖ –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (Requirements 4.1, 4.3)");
    console.log("‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ (Requirements 1.4, 4.3)");
    console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (Requirements 4.2)");
    console.log("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Requirements 4.4)");
    console.log("‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Requirements 3.1, 3.2, 3.3)");
    console.log("‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
    console.log("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏");

    if (successRate >= 90) {
      console.log("\nüéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.");
    } else if (successRate >= 75) {
      console.log(
        "\n‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è."
      );
    } else {
      console.log("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.");
    }

    console.log("=".repeat(60));
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  const test = new EndToEndTest();
  test
    .runAllTests()
    .then(() => {
      process.exit(test.results.failed > 0 ? 1 : 0);
    })
    .catch((error) => {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

module.exports = EndToEndTest;
