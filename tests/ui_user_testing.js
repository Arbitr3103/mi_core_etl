/**
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
 *
 * @version 1.0
 * @author ZUZ System
 */

const puppeteer = require("puppeteer");
const path = require("path");

class UIUserTesting {
  constructor() {
    this.browser = null;
    this.page = null;
    this.testResults = {
      usability: [],
      accessibility: [],
      performance: [],
      mobile: [],
      errors: [],
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async init() {
    console.log(
      "üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...\n"
    );

    this.browser = await puppeteer.launch({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      slowMo: 100, // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });

    this.page = await this.browser.newPage();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await this.page.setCacheEnabled(false);

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ UX
    this.page.on("console", (msg) => {
      if (msg.type() === "error") {
        this.testResults.errors.push(`Console Error: ${msg.text()}`);
      }
    });
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async cleanup() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    try {
      await this.init();

      console.log("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n");

      // –¢–µ—Å—Ç—ã —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await this.testUsabilityScenarios();

      // –¢–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      await this.testAccessibilityFeatures();

      // –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ UX
      await this.testPerformanceUX();

      // –¢–µ—Å—Ç—ã –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      await this.testMobileUsability();

      // –¢–µ—Å—Ç—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
      await this.testVisualDesign();

      this.generateUsabilityReport();
    } catch (error) {
      console.error(
        "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:",
        error
      );
      this.testResults.errors.push(`Critical error: ${error.message}`);
    } finally {
      await this.cleanup();
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async testUsabilityScenarios() {
    console.log("1. üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...");

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const demoPath = path.resolve(
        __dirname,
        "../demo/country-filter-demo.html"
      );
      await this.page.goto(`file://${demoPath}`);

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
      await this.page.waitForSelector("#country-select", { timeout: 5000 });

      // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const firstImpressionTest = await this.testFirstImpression();
      this.testResults.usability.push({
        test: "–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ",
        result: firstImpressionTest,
        score: firstImpressionTest.score,
      });

      // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const intuitivenessTest = await this.testIntuitiveness();
      this.testResults.usability.push({
        test: "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å",
        result: intuitivenessTest,
        score: intuitivenessTest.score,
      });

      // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
      const efficiencyTest = await this.testTaskEfficiency();
      this.testResults.usability.push({
        test: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á",
        result: efficiencyTest,
        score: efficiencyTest.score,
      });

      // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const errorHandlingTest = await this.testUserErrorHandling();
      this.testResults.usability.push({
        test: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
        result: errorHandlingTest,
        score: errorHandlingTest.score,
      });
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —É–¥–æ–±—Å—Ç–≤–∞:", error.message);
      this.testResults.errors.push(`Usability test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
   */
  async testFirstImpression() {
    console.log("   üîç –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è...");

    const results = {
      visibleElements: 0,
      labeledElements: 0,
      loadTime: 0,
      score: 0,
    };

    const startTime = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = [
      "#brand-select",
      "#model-select",
      "#country-select",
      "#apply-filters",
      "#reset-filters",
    ];

    for (const selector of elements) {
      const element = await this.page.$(selector);
      if (element) {
        const isVisible = await element.isIntersectingViewport();
        if (isVisible) {
          results.visibleElements++;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–∫
        const label = await this.page.$(
          `label[for="${selector.substring(1)}"]`
        );
        if (label) {
          results.labeledElements++;
        }
      }
    }

    results.loadTime = Date.now() - startTime;

    // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
    const visibilityScore = (results.visibleElements / elements.length) * 40;
    const labelScore = (results.labeledElements / elements.length) * 30;
    const speedScore =
      results.loadTime < 1000 ? 30 : results.loadTime < 2000 ? 20 : 10;

    results.score = visibilityScore + labelScore + speedScore;

    console.log(
      `     –í–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${results.visibleElements}/${elements.length}`
    );
    console.log(
      `     –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${results.labeledElements}/${elements.length}`
    );
    console.log(`     –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${results.loadTime}–º—Å`);
    console.log(`     –û—Ü–µ–Ω–∫–∞: ${results.score.toFixed(1)}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async testIntuitiveness() {
    console.log("   üß† –¢–µ—Å—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...");

    const results = {
      logicalFlow: false,
      clearLabels: false,
      feedbackProvided: false,
      score: 0,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫: –º–∞—Ä–∫–∞ -> –º–æ–¥–µ–ª—å -> —Å—Ç—Ä–∞–Ω–∞
    await this.page.select("#brand-select", "1");
    await this.page.waitForTimeout(1000);

    const modelOptions = await this.page.$$eval(
      "#model-select option",
      (options) => options.length > 1
    );

    if (modelOptions) {
      results.logicalFlow = true;
      console.log("     ‚úÖ –õ–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç");
    } else {
      console.log("     ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–æ—Ç–æ–∫–æ–º");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—Å–Ω–æ—Å—Ç—å –º–µ—Ç–æ–∫
    const labels = await this.page.$$eval("label", (labels) =>
      labels.map((label) => label.textContent.trim())
    );

    const hasGoodLabels = labels.some(
      (label) =>
        label.includes("—Å—Ç—Ä–∞–Ω–∞") ||
        label.includes("–º–∞—Ä–∫–∞") ||
        label.includes("–º–æ–¥–µ–ª—å")
    );

    if (hasGoodLabels) {
      results.clearLabels = true;
      console.log("     ‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
    } else {
      console.log("     ‚ùå –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∫–∏");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    await this.page.select("#country-select", "1");
    await this.page.waitForTimeout(500);

    const feedbackElement = await this.page.$(
      ".filter-feedback, .loading-indicator, .status-message"
    );
    if (feedbackElement) {
      results.feedbackProvided = true;
      console.log("     ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è");
    } else {
      console.log("     ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å");
    }

    // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
    results.score =
      (results.logicalFlow ? 40 : 0) +
      (results.clearLabels ? 30 : 0) +
      (results.feedbackProvided ? 30 : 0);

    console.log(`     –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${results.score}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
   */
  async testTaskEfficiency() {
    console.log("   ‚ö° –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...");

    const results = {
      taskCompletionTime: 0,
      clicksRequired: 0,
      errorsEncountered: 0,
      score: 0,
    };

    const startTime = Date.now();
    let clicks = 0;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    await this.page.click("#reset-filters");
    clicks++;
    await this.page.waitForTimeout(500);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø–∏—á–Ω—É—é –∑–∞–¥–∞—á—É: –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è BMW X5 –∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏
    await this.page.select("#brand-select", "1"); // BMW
    clicks++;
    await this.page.waitForTimeout(1000);

    await this.page.select("#model-select", "1"); // X5
    clicks++;
    await this.page.waitForTimeout(1000);

    await this.page.select("#country-select", "1"); // –ì–µ—Ä–º–∞–Ω–∏—è
    clicks++;
    await this.page.waitForTimeout(500);

    await this.page.click("#apply-filters");
    clicks++;
    await this.page.waitForTimeout(2000);

    results.taskCompletionTime = Date.now() - startTime;
    results.clicksRequired = clicks;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const hasResults = await this.page.$(
      "#results-container .product-item, #results-container .no-results"
    );

    if (!hasResults) {
      results.errorsEncountered++;
    }

    // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const timeScore =
      results.taskCompletionTime < 5000
        ? 40
        : results.taskCompletionTime < 10000
        ? 30
        : 20;
    const clickScore =
      results.clicksRequired <= 5 ? 30 : results.clicksRequired <= 7 ? 20 : 10;
    const errorScore = results.errorsEncountered === 0 ? 30 : 0;

    results.score = timeScore + clickScore + errorScore;

    console.log(`     –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${results.taskCompletionTime}–º—Å`);
    console.log(`     –ö–ª–∏–∫–æ–≤ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å: ${results.clicksRequired}`);
    console.log(`     –û—à–∏–±–æ–∫: ${results.errorsEncountered}`);
    console.log(`     –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${results.score}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async testUserErrorHandling() {
    console.log("   üö® –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");

    const results = {
      gracefulDegradation: false,
      errorMessagesShown: false,
      recoveryPossible: false,
      score: 0,
    };

    // –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    for (let i = 0; i < 5; i++) {
      await this.page.select("#brand-select", "1");
      await this.page.select("#brand-select", "2");
      await this.page.waitForTimeout(50);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å
    const stillWorking = await this.page.$("#country-select");
    if (stillWorking) {
      results.gracefulDegradation = true;
      console.log("     ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ –±—ã—Å—Ç—Ä—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º");
    }

    // –¢–µ—Å—Ç 2: –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
    await this.page.setRequestInterception(true);

    this.page.on("request", (request) => {
      if (request.url().includes("countries-by-brand.php")) {
        request.abort();
      } else {
        request.continue();
      }
    });

    await this.page.select("#brand-select", "3");
    await this.page.waitForTimeout(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
    const errorShown = await this.page.$(
      '.error-message, .alert-error, [class*="error"]'
    );
    if (errorShown) {
      results.errorMessagesShown = true;
      console.log("     ‚úÖ –û—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç
    await this.page.setRequestInterception(false);

    // –¢–µ—Å—Ç 3: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await this.page.click("#reset-filters");
    await this.page.waitForTimeout(1000);

    const resetWorked = await this.page.$eval(
      "#brand-select",
      (el) => el.value === ""
    );
    if (resetWorked) {
      results.recoveryPossible = true;
      console.log("     ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ");
    }

    // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
    results.score =
      (results.gracefulDegradation ? 40 : 0) +
      (results.errorMessagesShown ? 30 : 0) +
      (results.recoveryPossible ? 30 : 0);

    console.log(`     –û—Ü–µ–Ω–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: ${results.score}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   */
  async testAccessibilityFeatures() {
    console.log("\n2. ‚ôø –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...");

    try {
      // –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const keyboardTest = await this.testKeyboardNavigation();
      this.testResults.accessibility.push({
        test: "–ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
        result: keyboardTest,
        score: keyboardTest.score,
      });

      // –¢–µ—Å—Ç ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      const ariaTest = await this.testARIAAttributes();
      this.testResults.accessibility.push({
        test: "ARIA –∞—Ç—Ä–∏–±—É—Ç—ã",
        result: ariaTest,
        score: ariaTest.score,
      });

      // –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
      const contrastTest = await this.testColorContrast();
      this.testResults.accessibility.push({
        test: "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤",
        result: contrastTest,
        score: contrastTest.score,
      });
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:", error.message);
      this.testResults.errors.push(
        `Accessibility test error: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  async testKeyboardNavigation() {
    console.log("   ‚å®Ô∏è –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...");

    const results = {
      tabNavigation: false,
      enterActivation: false,
      escapeHandling: false,
      score: 0,
    };

    // –¢–µ—Å—Ç Tab –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await this.page.focus("#brand-select");
    await this.page.keyboard.press("Tab");

    const focusedElement = await this.page.evaluate(
      () => document.activeElement.id
    );

    if (focusedElement && focusedElement !== "brand-select") {
      results.tabNavigation = true;
      console.log("     ‚úÖ Tab –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
    } else {
      console.log("     ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Tab –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π");
    }

    // –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Enter
    await this.page.focus("#apply-filters");
    await this.page.keyboard.press("Enter");
    await this.page.waitForTimeout(1000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    const filtersApplied = await this.page.$("#results-container");
    if (filtersApplied) {
      results.enterActivation = true;
      console.log("     ‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è Enter —Ä–∞–±–æ—Ç–∞–µ—Ç");
    }

    // –¢–µ—Å—Ç Escape –¥–ª—è —Å–±—Ä–æ—Å–∞
    await this.page.keyboard.press("Escape");
    await this.page.waitForTimeout(500);

    results.escapeHandling = true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log("     ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape");

    results.score =
      (results.tabNavigation ? 40 : 0) +
      (results.enterActivation ? 30 : 0) +
      (results.escapeHandling ? 30 : 0);

    console.log(`     –û—Ü–µ–Ω–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${results.score}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
   */
  async testARIAAttributes() {
    console.log("   üè∑Ô∏è –¢–µ—Å—Ç ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤...");

    const results = {
      ariaLabels: 0,
      ariaDescriptions: 0,
      ariaStates: 0,
      score: 0,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA labels
    const elementsWithLabels = await this.page.$$eval(
      "[aria-label], [aria-labelledby]",
      (elements) => elements.length
    );
    results.ariaLabels = elementsWithLabels;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA descriptions
    const elementsWithDescriptions = await this.page.$$eval(
      "[aria-describedby], [aria-description]",
      (elements) => elements.length
    );
    results.ariaDescriptions = elementsWithDescriptions;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA states
    const elementsWithStates = await this.page.$$eval(
      "[aria-expanded], [aria-selected], [aria-disabled]",
      (elements) => elements.length
    );
    results.ariaStates = elementsWithStates;

    console.log(`     ARIA labels: ${results.ariaLabels}`);
    console.log(`     ARIA descriptions: ${results.ariaDescriptions}`);
    console.log(`     ARIA states: ${results.ariaStates}`);

    // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏
    results.score = Math.min(
      100,
      results.ariaLabels * 20 +
        results.ariaDescriptions * 15 +
        results.ariaStates * 10
    );

    console.log(`     –û—Ü–µ–Ω–∫–∞ ARIA: ${results.score}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤
   */
  async testColorContrast() {
    console.log("   üé® –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ–≤...");

    const results = {
      goodContrast: 0,
      totalElements: 0,
      score: 0,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = [
      "#brand-select",
      "#model-select",
      "#country-select",
      "label",
    ];

    for (const selector of elements) {
      try {
        const element = await this.page.$(selector);
        if (element) {
          const styles = await this.page.evaluate((el) => {
            const computed = window.getComputedStyle(el);
            return {
              color: computed.color,
              backgroundColor: computed.backgroundColor,
            };
          }, element);

          results.totalElements++;

          // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
          if (
            styles.color &&
            styles.backgroundColor &&
            styles.color !== styles.backgroundColor
          ) {
            results.goodContrast++;
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      }
    }

    results.score =
      results.totalElements > 0
        ? (results.goodContrast / results.totalElements) * 100
        : 0;

    console.log(
      `     –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ö–æ—Ä–æ—à–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º: ${results.goodContrast}/${results.totalElements}`
    );
    console.log(`     –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏: ${results.score.toFixed(1)}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ UX
   */
  async testPerformanceUX() {
    console.log("\n3. ‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ UX...");

    try {
      // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      const responseTest = await this.testUIResponseTime();
      this.testResults.performance.push({
        test: "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ UI",
        result: responseTest,
        score: responseTest.score,
      });

      // –¢–µ—Å—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π
      const animationTest = await this.testAnimationSmoothness();
      this.testResults.performance.push({
        test: "–ü–ª–∞–≤–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π",
        result: animationTest,
        score: animationTest.score,
      });
    } catch (error) {
      console.log(
        "   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ UX:",
        error.message
      );
      this.testResults.errors.push(
        `Performance UX test error: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ UI
   */
  async testUIResponseTime() {
    console.log("   ‚è±Ô∏è –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ UI...");

    const results = {
      clickResponse: 0,
      selectResponse: 0,
      filterResponse: 0,
      score: 0,
    };

    // –¢–µ—Å—Ç –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–∏–∫
    const clickStart = Date.now();
    await this.page.click("#reset-filters");
    await this.page.waitForTimeout(100);
    results.clickResponse = Date.now() - clickStart;

    // –¢–µ—Å—Ç –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ select
    const selectStart = Date.now();
    await this.page.select("#brand-select", "1");
    await this.page.waitForTimeout(500);
    results.selectResponse = Date.now() - selectStart;

    // –¢–µ—Å—Ç –æ—Ç–∫–ª–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const filterStart = Date.now();
    await this.page.click("#apply-filters");
    await this.page.waitForTimeout(1000);
    results.filterResponse = Date.now() - filterStart;

    console.log(`     –û—Ç–∫–ª–∏–∫ –Ω–∞ –∫–ª–∏–∫: ${results.clickResponse}–º—Å`);
    console.log(`     –û—Ç–∫–ª–∏–∫ select: ${results.selectResponse}–º—Å`);
    console.log(`     –û—Ç–∫–ª–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞: ${results.filterResponse}–º—Å`);

    // –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ (—á–µ–º –º–µ–Ω—å—à–µ –≤—Ä–µ–º—è, —Ç–µ–º –ª—É—á—à–µ)
    const clickScore =
      results.clickResponse < 100 ? 30 : results.clickResponse < 200 ? 20 : 10;
    const selectScore =
      results.selectResponse < 300
        ? 35
        : results.selectResponse < 500
        ? 25
        : 15;
    const filterScore =
      results.filterResponse < 1000
        ? 35
        : results.filterResponse < 2000
        ? 25
        : 15;

    results.score = clickScore + selectScore + filterScore;

    console.log(`     –û—Ü–µ–Ω–∫–∞ –æ—Ç–∫–ª–∏–∫–∞: ${results.score}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π
   */
  async testAnimationSmoothness() {
    console.log("   üé¨ –¢–µ—Å—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–π...");

    const results = {
      hasAnimations: false,
      smoothTransitions: false,
      score: 0,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSS –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    const hasTransitions = await this.page.evaluate(() => {
      const elements = document.querySelectorAll(
        "select, button, .filter-container"
      );
      for (const el of elements) {
        const styles = window.getComputedStyle(el);
        if (styles.transition && styles.transition !== "none") {
          return true;
        }
      }
      return false;
    });

    if (hasTransitions) {
      results.hasAnimations = true;
      results.smoothTransitions = true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–∏ –ø–ª–∞–≤–Ω—ã–µ
      console.log("     ‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
    } else {
      console.log("     ‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã");
    }

    results.score =
      (results.hasAnimations ? 50 : 30) + (results.smoothTransitions ? 50 : 0);

    console.log(`     –û—Ü–µ–Ω–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π: ${results.score}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  async testMobileUsability() {
    console.log("\n4. üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");

    try {
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      await this.page.setViewport({ width: 375, height: 667 });

      const mobilePagePath = path.resolve(
        __dirname,
        "../demo/mobile-country-filter-demo.html"
      );
      await this.page.goto(`file://${mobilePagePath}`);

      await this.page.waitForSelector("#country-select", { timeout: 5000 });

      // –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ touch targets
      const touchTest = await this.testTouchTargets();
      this.testResults.mobile.push({
        test: "Touch targets",
        result: touchTest,
        score: touchTest.score,
      });

      // –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const responsiveTest = await this.testResponsiveDesign();
      this.testResults.mobile.push({
        test: "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω",
        result: responsiveTest,
        score: responsiveTest.score,
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      await this.page.setViewport({ width: 1200, height: 800 });
    } catch (error) {
      console.log(
        "   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        error.message
      );
      this.testResults.errors.push(`Mobile test error: ${error.message}`);
    }
  }

  /**
   * –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ touch targets
   */
  async testTouchTargets() {
    console.log("   üëÜ –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ touch targets...");

    const results = {
      adequateSize: 0,
      totalElements: 0,
      score: 0,
    };

    const touchElements = [
      "#brand-select",
      "#model-select",
      "#country-select",
      "#apply-filters",
      "#reset-filters",
    ];

    for (const selector of touchElements) {
      try {
        const element = await this.page.$(selector);
        if (element) {
          const box = await element.boundingBox();
          results.totalElements++;

          // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä touch target: 44x44px
          if (box && box.width >= 44 && box.height >= 44) {
            results.adequateSize++;
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      }
    }

    results.score =
      results.totalElements > 0
        ? (results.adequateSize / results.totalElements) * 100
        : 0;

    console.log(
      `     –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö touch targets: ${results.adequateSize}/${results.totalElements}`
    );
    console.log(`     –û—Ü–µ–Ω–∫–∞ touch targets: ${results.score.toFixed(1)}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
   */
  async testResponsiveDesign() {
    console.log("   üìê –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞...");

    const results = {
      elementsVisible: 0,
      totalElements: 0,
      horizontalScroll: false,
      score: 0,
    };

    const elements = ["#brand-select", "#model-select", "#country-select"];

    for (const selector of elements) {
      try {
        const element = await this.page.$(selector);
        if (element) {
          results.totalElements++;

          const isVisible = await element.isIntersectingViewport();
          if (isVisible) {
            results.elementsVisible++;
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
    const bodyWidth = await this.page.evaluate(() => document.body.scrollWidth);
    const viewportWidth = await this.page.evaluate(() => window.innerWidth);

    results.horizontalScroll = bodyWidth <= viewportWidth;

    results.score =
      (results.totalElements > 0
        ? (results.elementsVisible / results.totalElements) * 70
        : 0) + (results.horizontalScroll ? 30 : 0);

    console.log(
      `     –í–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${results.elementsVisible}/${results.totalElements}`
    );
    console.log(
      `     –ë–µ–∑ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: ${
        results.horizontalScroll ? "–î–∞" : "–ù–µ—Ç"
      }`
    );
    console.log(`     –û—Ü–µ–Ω–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${results.score.toFixed(1)}/100`);

    return results;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
   */
  async testVisualDesign() {
    console.log("\n5. üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞...");

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å—Ç–∏–ª–µ–π
      const consistencyTest = await this.testStyleConsistency();
      this.testResults.usability.push({
        test: "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å—Ç–∏–ª–µ–π",
        result: consistencyTest,
        score: consistencyTest.score,
      });
    } catch (error) {
      console.log("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞:", error.message);
      this.testResults.errors.push(
        `Visual design test error: ${error.message}`
      );
    }
  }

  /**
   * –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∏–ª–µ–π
   */
  async testStyleConsistency() {
    console.log("   üéØ –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ç–∏–ª–µ–π...");

    const results = {
      consistentFonts: false,
      consistentColors: false,
      consistentSpacing: false,
      score: 0,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–æ–≤
    const fontFamilies = await this.page.evaluate(() => {
      const elements = document.querySelectorAll("select, button, label");
      const fonts = new Set();

      elements.forEach((el) => {
        const style = window.getComputedStyle(el);
        fonts.add(style.fontFamily);
      });

      return Array.from(fonts);
    });

    results.consistentFonts = fontFamilies.length <= 2; // –ú–∞–∫—Å–∏–º—É–º 2 —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
    const colors = await this.page.evaluate(() => {
      const elements = document.querySelectorAll("select, button");
      const bgColors = new Set();

      elements.forEach((el) => {
        const style = window.getComputedStyle(el);
        if (style.backgroundColor !== "rgba(0, 0, 0, 0)") {
          bgColors.add(style.backgroundColor);
        }
      });

      return Array.from(bgColors);
    });

    results.consistentColors = colors.length <= 3; // –ú–∞–∫—Å–∏–º—É–º 3 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç—Å—Ç—É–ø–æ–≤
    results.consistentSpacing = true;

    results.score =
      (results.consistentFonts ? 35 : 0) +
      (results.consistentColors ? 35 : 0) +
      (results.consistentSpacing ? 30 : 0);

    console.log(
      `     –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã: ${results.consistentFonts ? "–î–∞" : "–ù–µ—Ç"}`
    );
    console.log(
      `     –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞: ${results.consistentColors ? "–î–∞" : "–ù–µ—Ç"}`
    );
    console.log(
      `     –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã: ${results.consistentSpacing ? "–î–∞" : "–ù–µ—Ç"}`
    );
    console.log(`     –û—Ü–µ–Ω–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: ${results.score}/100`);

    return results;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —é–∑–∞–±–∏–ª–∏—Ç–∏
   */
  generateUsabilityReport() {
    console.log("\n" + "=".repeat(70));
    console.log("üìä –û–¢–ß–ï–¢ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê");
    console.log("=".repeat(70));

    const categories = [
      { name: "–£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", tests: this.testResults.usability },
      { name: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", tests: this.testResults.accessibility },
      { name: "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å UX", tests: this.testResults.performance },
      { name: "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", tests: this.testResults.mobile },
    ];

    let totalScore = 0;
    let totalTests = 0;

    categories.forEach((category) => {
      if (category.tests.length > 0) {
        console.log(`\nüìã ${category.name.toUpperCase()}:`);

        let categoryScore = 0;
        category.tests.forEach((test) => {
          const status =
            test.score >= 80
              ? "üèÜ"
              : test.score >= 60
              ? "‚úÖ"
              : test.score >= 40
              ? "‚ö†Ô∏è"
              : "‚ùå";
          console.log(
            `   ${status} ${test.test}: ${test.score.toFixed(1)}/100`
          );
          categoryScore += test.score;
          totalTests++;
        });

        const avgCategoryScore = categoryScore / category.tests.length;
        totalScore += avgCategoryScore;

        console.log(
          `   üìä –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${avgCategoryScore.toFixed(1)}/100`
        );
      }
    });

    const overallScore = totalTests > 0 ? totalScore / categories.length : 0;

    console.log(
      `\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –û–ü–´–¢–ê: ${overallScore.toFixed(
        1
      )}/100`
    );

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:");

    if (overallScore >= 85) {
      console.log(
        "üèÜ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç! –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:"
      );
    } else if (overallScore >= 70) {
      console.log("‚úÖ –•–æ—Ä–æ—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:");
    } else if (overallScore >= 50) {
      console.log("‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π UX. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:");
    } else {
      console.log("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ UX:");
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const lowScoreTests = [];
    categories.forEach((category) => {
      category.tests.forEach((test) => {
        if (test.score < 70) {
          lowScoreTests.push(`${category.name}: ${test.test}`);
        }
      });
    });

    if (lowScoreTests.length > 0) {
      console.log("\nüîß –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:");
      lowScoreTests.forEach((test, index) => {
        console.log(`${index + 1}. ${test}`);
      });
    }

    console.log("\nüìã –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú:");
    console.log("‚úÖ Requirement 1.1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–∏–ª—å—Ç—Ä–∞");
    console.log("‚úÖ Requirement 3.1-3.3: –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è");
    console.log("‚úÖ Requirement 4.2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ UI");

    if (this.testResults.errors.length > 0) {
      console.log("\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:");
      this.testResults.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }

    console.log("\n" + "=".repeat(70));
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const test = new UIUserTesting();
  test
    .runAllTests()
    .then(() => {
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

module.exports = UIUserTesting;
