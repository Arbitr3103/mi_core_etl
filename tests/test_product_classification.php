<?php
/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ—Å—Ç–∞—Ç–∫–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º 2.1, 2.2, 2.3
 */

require_once __DIR__ . '/../config.php';

class ProductClassificationTest {
    private $pdo;
    private $test_results = [];
    
    public function __construct() {
        $this->pdo = getDatabaseConnection();
    }
    
    /**
     * –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (‚â§5 –µ–¥–∏–Ω–∏—Ü)
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2.1: –ö–û–ì–î–ê —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ <= 5 –µ–¥–∏–Ω–∏—Ü, –¢–û —Å–∏—Å—Ç–µ–º–∞ –î–û–õ–ñ–ù–ê –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
     */
    public function testCriticalStockClassification() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤...\n";
        
        try {
            $test_cases = [
                ['stock' => 0, 'expected' => 'critical', 'description' => '–ù—É–ª–µ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫'],
                ['stock' => 1, 'expected' => 'critical', 'description' => '1 –µ–¥–∏–Ω–∏—Ü–∞'],
                ['stock' => 3, 'expected' => 'critical', 'description' => '3 –µ–¥–∏–Ω–∏—Ü—ã'],
                ['stock' => 5, 'expected' => 'critical', 'description' => '5 –µ–¥–∏–Ω–∏—Ü (–≥—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)'],
            ];
            
            foreach ($test_cases as $case) {
                $classification = $this->classifyStock($case['stock']);
                $this->assertEquals('critical', $classification, 
                    "–¢–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–æ–º {$case['stock']} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ 'critical' ({$case['description']})");
                echo "  ‚úÖ {$case['description']}: {$case['stock']} ‚Üí {$classification}\n";
            }
            
            $this->test_results['critical_classification'] = 'PASSED';
            echo "‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['critical_classification'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (6-20 –µ–¥–∏–Ω–∏—Ü)
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2.2: –ö–û–ì–î–ê —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç 6 –¥–æ 20 –µ–¥–∏–Ω–∏—Ü, –¢–û —Å–∏—Å—Ç–µ–º–∞ –î–û–õ–ñ–ù–ê –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ "–Ω–∏–∑–∫–∏–π"
     */
    public function testLowStockClassification() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º...\n";
        
        try {
            $test_cases = [
                ['stock' => 6, 'expected' => 'low', 'description' => '6 –µ–¥–∏–Ω–∏—Ü (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)'],
                ['stock' => 10, 'expected' => 'low', 'description' => '10 –µ–¥–∏–Ω–∏—Ü'],
                ['stock' => 15, 'expected' => 'low', 'description' => '15 –µ–¥–∏–Ω–∏—Ü'],
                ['stock' => 20, 'expected' => 'low', 'description' => '20 –µ–¥–∏–Ω–∏—Ü (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)'],
            ];
            
            foreach ($test_cases as $case) {
                $classification = $this->classifyStock($case['stock']);
                $this->assertEquals('low', $classification, 
                    "–¢–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–æ–º {$case['stock']} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ 'low' ({$case['description']})");
                echo "  ‚úÖ {$case['description']}: {$case['stock']} ‚Üí {$classification}\n";
            }
            
            $this->test_results['low_classification'] = 'PASSED';
            echo "‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['low_classification'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–±—ã—Ç–∫–æ–º (>100 –µ–¥–∏–Ω–∏—Ü)
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2.3: –ö–û–ì–î–ê —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ > 100 –µ–¥–∏–Ω–∏—Ü, –¢–û —Å–∏—Å—Ç–µ–º–∞ –î–û–õ–ñ–ù–ê –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ "–∏–∑–±—ã—Ç–æ–∫"
     */
    public function testOverstockClassification() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–±—ã—Ç–∫–æ–º...\n";
        
        try {
            $test_cases = [
                ['stock' => 101, 'expected' => 'overstock', 'description' => '101 –µ–¥–∏–Ω–∏—Ü–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–∑–±—ã—Ç–æ–∫)'],
                ['stock' => 150, 'expected' => 'overstock', 'description' => '150 –µ–¥–∏–Ω–∏—Ü'],
                ['stock' => 500, 'expected' => 'overstock', 'description' => '500 –µ–¥–∏–Ω–∏—Ü'],
                ['stock' => 1000, 'expected' => 'overstock', 'description' => '1000 –µ–¥–∏–Ω–∏—Ü'],
            ];
            
            foreach ($test_cases as $case) {
                $classification = $this->classifyStock($case['stock']);
                $this->assertEquals('overstock', $classification, 
                    "–¢–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–æ–º {$case['stock']} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ 'overstock' ({$case['description']})");
                echo "  ‚úÖ {$case['description']}: {$case['stock']} ‚Üí {$classification}\n";
            }
            
            $this->test_results['overstock_classification'] = 'PASSED';
            echo "‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–±—ã—Ç–∫–æ–º –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['overstock_classification'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–±—ã—Ç–∫–æ–º –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (21-100 –µ–¥–∏–Ω–∏—Ü)
     */
    public function testNormalStockClassification() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...\n";
        
        try {
            $test_cases = [
                ['stock' => 21, 'expected' => 'normal', 'description' => '21 –µ–¥–∏–Ω–∏—Ü–∞ (–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º—ã)'],
                ['stock' => 50, 'expected' => 'normal', 'description' => '50 –µ–¥–∏–Ω–∏—Ü'],
                ['stock' => 75, 'expected' => 'normal', 'description' => '75 –µ–¥–∏–Ω–∏—Ü'],
                ['stock' => 100, 'expected' => 'normal', 'description' => '100 –µ–¥–∏–Ω–∏—Ü (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º—ã)'],
            ];
            
            foreach ($test_cases as $case) {
                $classification = $this->classifyStock($case['stock']);
                $this->assertEquals('normal', $classification, 
                    "–¢–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–æ–º {$case['stock']} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ 'normal' ({$case['description']})");
                echo "  ‚úÖ {$case['description']}: {$case['stock']} ‚Üí {$classification}\n";
            }
            
            $this->test_results['normal_classification'] = 'PASSED';
            echo "‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['normal_classification'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    public function testBoundaryValues() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n";
        
        try {
            $boundary_cases = [
                // –ì—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É critical –∏ low
                ['stock' => 5, 'expected' => 'critical', 'description' => '–ì—Ä–∞–Ω–∏—Ü–∞ critical/low: 5'],
                ['stock' => 6, 'expected' => 'low', 'description' => '–ì—Ä–∞–Ω–∏—Ü–∞ critical/low: 6'],
                
                // –ì—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É low –∏ normal
                ['stock' => 20, 'expected' => 'low', 'description' => '–ì—Ä–∞–Ω–∏—Ü–∞ low/normal: 20'],
                ['stock' => 21, 'expected' => 'normal', 'description' => '–ì—Ä–∞–Ω–∏—Ü–∞ low/normal: 21'],
                
                // –ì—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É normal –∏ overstock
                ['stock' => 100, 'expected' => 'normal', 'description' => '–ì—Ä–∞–Ω–∏—Ü–∞ normal/overstock: 100'],
                ['stock' => 101, 'expected' => 'overstock', 'description' => '–ì—Ä–∞–Ω–∏—Ü–∞ normal/overstock: 101'],
            ];
            
            foreach ($boundary_cases as $case) {
                $classification = $this->classifyStock($case['stock']);
                $this->assertEquals($case['expected'], $classification, 
                    "–ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {$case['stock']} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ '{$case['expected']}'");
                echo "  ‚úÖ {$case['description']}: {$case['stock']} ‚Üí {$classification}\n";
            }
            
            $this->test_results['boundary_values'] = 'PASSED';
            echo "‚úÖ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['boundary_values'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
     */
    public function testDatabaseClassification() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã...\n";
        
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            $this->setupTestData();
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            $stmt = $this->pdo->prepare("
                SELECT 
                    i.sku,
                    SUM(i.current_stock) as total_stock,
                    CASE
                        WHEN SUM(i.current_stock) <= 5 THEN 'critical'
                        WHEN SUM(i.current_stock) <= 20 THEN 'low'
                        WHEN SUM(i.current_stock) > 100 THEN 'overstock'
                        ELSE 'normal'
                    END as stock_status
                FROM inventory_data i
                WHERE i.sku LIKE 'TEST-CLASS-%'
                GROUP BY i.sku
                ORDER BY i.sku
            ");
            
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $expected_results = [
                'TEST-CLASS-CRITICAL' => 'critical',
                'TEST-CLASS-LOW' => 'low',
                'TEST-CLASS-NORMAL' => 'normal',
                'TEST-CLASS-OVERSTOCK' => 'overstock'
            ];
            
            foreach ($results as $result) {
                $expected = $expected_results[$result['sku']] ?? null;
                $this->assertNotNull($expected, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π SKU –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {$result['sku']}");
                $this->assertEquals($expected, $result['stock_status'], 
                    "SKU {$result['sku']} —Å –æ—Å—Ç–∞—Ç–∫–æ–º {$result['total_stock']} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å '{$expected}', –ø–æ–ª—É—á–µ–Ω '{$result['stock_status']}'");
                echo "  ‚úÖ {$result['sku']}: {$result['total_stock']} –µ–¥–∏–Ω–∏—Ü ‚Üí {$result['stock_status']}\n";
            }
            
            // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            $this->cleanupTestData();
            
            $this->test_results['database_classification'] = 'PASSED';
            echo "‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->cleanupTestData();
            $this->test_results['database_classification'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    public function testClassificationPerformance() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n";
        
        try {
            $start_time = microtime(true);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é 1000 —Ç–æ–≤–∞—Ä–æ–≤
            for ($i = 0; $i < 1000; $i++) {
                $stock = rand(0, 200);
                $classification = $this->classifyStock($stock);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
                if ($stock <= 5) {
                    $this->assertEquals('critical', $classification);
                } elseif ($stock <= 20) {
                    $this->assertEquals('low', $classification);
                } elseif ($stock > 100) {
                    $this->assertEquals('overstock', $classification);
                } else {
                    $this->assertEquals('normal', $classification);
                }
            }
            
            $end_time = microtime(true);
            $execution_time = ($end_time - $start_time) * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            echo "  ‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ 1000 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ " . number_format($execution_time, 2) . " –º—Å\n";
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ–µ (< 100 –º—Å)
            $this->assertTrue($execution_time < 100, 
                "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è 1000 —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 100 –º—Å, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ " . number_format($execution_time, 2) . " –º—Å");
            
            $this->test_results['classification_performance'] = 'PASSED';
            echo "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['classification_performance'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –§—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (—Ä–µ–ø–ª–∏—Ü–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ API)
     */
    private function classifyStock($stock) {
        if ($stock <= 5) {
            return 'critical';
        } elseif ($stock <= 20) {
            return 'low';
        } elseif ($stock > 100) {
            return 'overstock';
        } else {
            return 'normal';
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    private function setupTestData() {
        try {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            $this->pdo->exec("DELETE FROM inventory_data WHERE sku LIKE 'TEST-CLASS-%'");
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            $test_data = [
                ['sku' => 'TEST-CLASS-CRITICAL', 'stock' => 3],
                ['sku' => 'TEST-CLASS-LOW', 'stock' => 15],
                ['sku' => 'TEST-CLASS-NORMAL', 'stock' => 50],
                ['sku' => 'TEST-CLASS-OVERSTOCK', 'stock' => 150]
            ];
            
            $stmt = $this->pdo->prepare("
                INSERT INTO inventory_data (sku, warehouse_name, current_stock, available_stock, reserved_stock, last_sync_at) 
                VALUES (?, '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥', ?, ?, 0, NOW())
            ");
            
            foreach ($test_data as $data) {
                $stmt->execute([$data['sku'], $data['stock'], $data['stock']]);
            }
            
        } catch (Exception $e) {
            throw new Exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private function cleanupTestData() {
        try {
            $this->pdo->exec("DELETE FROM inventory_data WHERE sku LIKE 'TEST-CLASS-%'");
        } catch (Exception $e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        }
    }
    
    /**
     * –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ assert –¥–ª—è —Ç–µ—Å—Ç–æ–≤
     */
    private function assertEquals($expected, $actual, $message = '') {
        if ($expected !== $actual) {
            throw new Exception($message ?: "Expected '$expected', got '$actual'");
        }
    }
    
    private function assertTrue($condition, $message = '') {
        if (!$condition) {
            throw new Exception($message ?: 'Assertion failed');
        }
    }
    
    private function assertNotNull($value, $message = '') {
        if ($value === null) {
            throw new Exception($message ?: 'Value should not be null');
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    public function runAllTests() {
        echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ—Å—Ç–∞—Ç–∫–æ–≤\n";
        echo "=" . str_repeat("=", 70) . "\n";
        
        $start_time = microtime(true);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        $this->testCriticalStockClassification();
        $this->testLowStockClassification();
        $this->testOverstockClassification();
        $this->testNormalStockClassification();
        $this->testBoundaryValues();
        $this->testDatabaseClassification();
        $this->testClassificationPerformance();
        
        $end_time = microtime(true);
        $execution_time = round($end_time - $start_time, 2);
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        echo "\n" . str_repeat("=", 70) . "\n";
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –¢–û–í–ê–†–û–í\n";
        echo str_repeat("=", 70) . "\n";
        
        $passed = 0;
        $total = count($this->test_results);
        
        foreach ($this->test_results as $test_name => $result) {
            $status = strpos($result, 'PASSED') !== false ? '‚úÖ PASSED' : '‚ùå FAILED';
            echo sprintf("%-50s %s\n", $test_name, $status);
            
            if (strpos($result, 'PASSED') !== false) {
                $passed++;
            } else {
                echo "   –î–µ—Ç–∞–ª–∏: " . str_replace('FAILED: ', '', $result) . "\n";
            }
        }
        
        echo str_repeat("-", 70) . "\n";
        echo sprintf("–ü—Ä–æ–π–¥–µ–Ω–æ: %d/%d —Ç–µ—Å—Ç–æ–≤ (%.1f%%)\n", $passed, $total, ($passed / $total) * 100);
        echo "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$execution_time} —Å–µ–∫\n";
        
        if ($passed === $total) {
            echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
            return true;
        } else {
            echo "‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ù–ï –ü–†–û–ô–î–ï–ù–´\n";
            return false;
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (basename(__FILE__) === basename($_SERVER['SCRIPT_NAME'])) {
    try {
        $tester = new ProductClassificationTest();
        $success = $tester->runAllTests();
        exit($success ? 0 : 1);
    } catch (Exception $e) {
        echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: " . $e->getMessage() . "\n";
        exit(1);
    }
}
?>