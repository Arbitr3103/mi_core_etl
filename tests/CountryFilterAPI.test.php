<?php
/**
 * Unit –∏ Integration —Ç–µ—Å—Ç—ã –¥–ª—è CountryFilterAPI
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ API endpoints –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è,
 * –≤–∫–ª—é—á–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—é, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 *
 * @version 1.0
 * @author ZUZ System
 */

require_once __DIR__ . '/../CountryFilterAPI.php';

class CountryFilterAPITest {
    private $api;
    private $testResults = [];
    private $totalTests = 0;
    private $passedTests = 0;
    private $failedTests = 0;
    
    public function __construct() {
        echo "üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–°–¢–û–í CountryFilterAPI\n";
        echo "=" . str_repeat("=", 80) . "\n";
        
        try {
            $this->api = new CountryFilterAPI();
            echo "‚úÖ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ\n";
        } catch (Exception $e) {
            echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å API: " . $e->getMessage() . "\n";
            exit(1);
        }
        
        echo "=" . str_repeat("=", 80) . "\n\n";
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    public function runAllTests() {
        echo "üß™ –ó–ê–ü–£–°–ö –í–°–ï–• API –¢–ï–°–¢–û–í\n\n";
        
        // Unit —Ç–µ—Å—Ç—ã
        $this->testGetAllCountries();
        $this->testGetCountriesByBrand();
        $this->testGetCountriesByModel();
        $this->testFilterProducts();
        $this->testValidateFilters();
        $this->testValidateFilterExistence();
        
        // Integration —Ç–µ—Å—Ç—ã
        $this->testFullFilteringWorkflow();
        $this->testErrorHandling();
        $this->testCaching();
        $this->testPerformance();
        
        // Edge cases
        $this->testEdgeCases();
        
        $this->printTestResults();
    }
    
    /**
     * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
     */
    private function testGetAllCountries() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getAllCountries()\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $result = $this->api->getAllCountries();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            $this->assert(
                isset($result['success']),
                "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'success'"
            );
            
            if ($result['success']) {
                $this->assert(
                    isset($result['data']) && is_array($result['data']),
                    "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ 'data'"
                );
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
                if (!empty($result['data'])) {
                    $country = $result['data'][0];
                    $this->assert(
                        isset($country['id']) && isset($country['name']),
                        "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'id' –∏ 'name'"
                    );
                    
                    $this->assert(
                        is_int($country['id']) && is_string($country['name']),
                        "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, name - —Å—Ç—Ä–æ–∫–æ–π"
                    );
                }
            }
            
            echo "‚úÖ getAllCountries() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
            
        } catch (Exception $e) {
            $this->assert(false, "getAllCountries() –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –ø–æ –º–∞—Ä–∫–µ
     */
    private function testGetCountriesByBrand() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getCountriesByBrand()\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º ID
        try {
            $result = $this->api->getCountriesByBrand(1);
            
            $this->assert(
                isset($result['success']),
                "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'success'"
            );
            
            if ($result['success']) {
                $this->assert(
                    isset($result['data']) && is_array($result['data']),
                    "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ 'data'"
                );
            }
            
            echo "‚úÖ getCountriesByBrand() —Å –≤–∞–ª–∏–¥–Ω—ã–º ID —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
            
        } catch (Exception $e) {
            $this->assert(false, "getCountriesByBrand() –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ID
        $result = $this->api->getCountriesByBrand(-1);
        $this->assert(
            !$result['success'],
            "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å success: false"
        );
        
        $result = $this->api->getCountriesByBrand("abc");
        $this->assert(
            !$result['success'],
            "–ù–µ—á–∏—Å–ª–æ–≤–æ–π ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å success: false"
        );
        
        $result = $this->api->getCountriesByBrand(1000000);
        $this->assert(
            !$result['success'],
            "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å success: false"
        );
        
        echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ getCountriesByBrand() —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –ø–æ –º–æ–¥–µ–ª–∏
     */
    private function testGetCountriesByModel() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getCountriesByModel()\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º ID
        try {
            $result = $this->api->getCountriesByModel(1);
            
            $this->assert(
                isset($result['success']),
                "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'success'"
            );
            
            if ($result['success']) {
                $this->assert(
                    isset($result['data']) && is_array($result['data']),
                    "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ 'data'"
                );
            }
            
            echo "‚úÖ getCountriesByModel() —Å –≤–∞–ª–∏–¥–Ω—ã–º ID —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
            
        } catch (Exception $e) {
            $this->assert(false, "getCountriesByModel() –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        $result = $this->api->getCountriesByModel(0);
        $this->assert(
            !$result['success'],
            "ID = 0 –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å success: false"
        );
        
        echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ getCountriesByModel() —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function testFilterProducts() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ filterProducts()\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        // –¢–µ—Å—Ç –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        try {
            $result = $this->api->filterProducts([]);
            
            $this->assert(
                isset($result['success']),
                "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'success'"
            );
            
            if ($result['success']) {
                $this->assert(
                    isset($result['data']) && is_array($result['data']),
                    "–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ 'data'"
                );
                
                $this->assert(
                    isset($result['pagination']),
                    "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"
                );
                
                $this->assert(
                    isset($result['filters_applied']),
                    "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"
                );
            }
            
            echo "‚úÖ filterProducts() –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
            
        } catch (Exception $e) {
            $this->assert(false, "filterProducts() –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        // –¢–µ—Å—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        $filters = [
            'brand_id' => 1,
            'country_id' => 1,
            'limit' => 10,
            'offset' => 0
        ];
        
        try {
            $result = $this->api->filterProducts($filters);
            
            if ($result['success']) {
                $this->assert(
                    $result['pagination']['limit'] == 10,
                    "–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É"
                );
                
                $this->assert(
                    $result['filters_applied']['brand_id'] == 1,
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º"
                );
            }
            
            echo "‚úÖ filterProducts() —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
            
        } catch (Exception $e) {
            $this->assert(false, "filterProducts() —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    private function testValidateFilters() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ validateFilters()\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        // –í–∞–ª–∏–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        $validFilters = [
            'brand_id' => 1,
            'model_id' => 1,
            'year' => 2020,
            'country_id' => 1,
            'limit' => 50,
            'offset' => 0
        ];
        
        $result = $this->api->validateFilters($validFilters);
        $this->assert(
            $result['valid'] === true,
            "–í–∞–ª–∏–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        );
        
        // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        $invalidFilters = [
            'brand_id' => -1,
            'model_id' => 'abc',
            'year' => 1800,
            'country_id' => 0,
            'limit' => -5,
            'offset' => -1
        ];
        
        $result = $this->api->validateFilters($invalidFilters);
        $this->assert(
            $result['valid'] === false,
            "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é"
        );
        
        $this->assert(
            !empty($result['errors']),
            "–î–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        );
        
        echo "‚úÖ validateFilters() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
     */
    private function testValidateFilterExistence() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ validateFilterExistence()\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        // –¢–µ—Å—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        $existingFilters = [
            'brand_id' => 1,
            'country_id' => 1
        ];
        
        try {
            $result = $this->api->validateFilterExistence($existingFilters);
            
            $this->assert(
                isset($result['valid']),
                "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'valid'"
            );
            
            echo "‚úÖ validateFilterExistence() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫\n";
            
        } catch (Exception $e) {
            $this->assert(false, "validateFilterExistence() –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        // –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        $nonExistingFilters = [
            'brand_id' => 999999,
            'model_id' => 999999,
            'country_id' => 999999
        ];
        
        try {
            $result = $this->api->validateFilterExistence($nonExistingFilters);
            
            $this->assert(
                $result['valid'] === false,
                "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é"
            );
            
            echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç\n";
            
        } catch (Exception $e) {
            // –û—à–∏–±–∫–∏ –ë–î –æ–∂–∏–¥–∞–µ–º—ã –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            echo "‚ÑπÔ∏è  –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π (–æ–∂–∏–¥–∞–µ–º–æ)\n";
        }
        
        echo "\n";
    }
    
    /**
     * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private function testFullFilteringWorkflow() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã
            $countries = $this->api->getAllCountries();
            $this->assert(
                $countries['success'],
                "–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
            );
            
            // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –º–∞—Ä–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if (!empty($countries['data'])) {
                $brandCountries = $this->api->getCountriesByBrand(1);
                $this->assert(
                    isset($brandCountries['success']),
                    "–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω –¥–ª—è –º–∞—Ä–∫–∏ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
                );
            }
            
            // 3. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
            $products = $this->api->filterProducts(['limit' => 5]);
            $this->assert(
                $products['success'],
                "–®–∞–≥ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
            );
            
            if ($products['success']) {
                $this->assert(
                    count($products['data']) <= 5,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç"
                );
            }
            
            echo "‚úÖ –ü–æ–ª–Ω—ã–π workflow —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
            
        } catch (Exception $e) {
            $this->assert(false, "Workflow —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
     */
    private function testErrorHandling() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        $result = $this->api->getCountriesByBrand([]);
        $this->assert(
            !$result['success'],
            "–ú–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É"
        );
        
        $result = $this->api->getCountriesByModel(null);
        $this->assert(
            !$result['success'],
            "null –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É"
        );
        
        // –¢–µ—Å—Ç —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        $result = $this->api->filterProducts([
            'brand_id' => PHP_INT_MAX,
            'limit' => 10000,
            'offset' => -100
        ]);
        
        $this->assert(
            !$result['success'],
            "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        );
        
        echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private function testCaching() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            // –û—á–∏—â–∞–µ–º –∫—ç—à
            $this->api->clearCache();
            
            // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
            $start1 = microtime(true);
            $result1 = $this->api->getAllCountries();
            $time1 = microtime(true) - $start1;
            
            // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
            $start2 = microtime(true);
            $result2 = $this->api->getAllCountries();
            $time2 = microtime(true) - $start2;
            
            $this->assert(
                $result1 == $result2,
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ –Ω–µ–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            );
            
            // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (–∫—ç—à)
            if ($time1 > 0.001) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª –∑–∞–º–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
                $this->assert(
                    $time2 < $time1,
                    "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ"
                );
            }
            
            echo "‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
            
        } catch (Exception $e) {
            $this->assert(false, "–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private function testPerformance() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            // –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            $start = microtime(true);
            
            for ($i = 0; $i < 10; $i++) {
                $this->api->getAllCountries();
            }
            
            $totalTime = microtime(true) - $start;
            $avgTime = $totalTime / 10;
            
            $this->assert(
                $avgTime < 1.0,
                "–°—Ä–µ–¥–Ω–∏–π –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã"
            );
            
            echo "‚úÖ –°—Ä–µ–¥–Ω–∏–π –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: " . round($avgTime * 1000, 2) . "ms\n";
            
            // –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
            $start = microtime(true);
            $result = $this->api->filterProducts(['limit' => 1000]);
            $time = microtime(true) - $start;
            
            $this->assert(
                $time < 5.0,
                "–ó–∞–ø—Ä–æ—Å —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥"
            );
            
            echo "‚úÖ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Å –ª–∏–º–∏—Ç–æ–º 1000: " . round($time * 1000, 2) . "ms\n";
            
        } catch (Exception $e) {
            $this->assert(false, "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
        }
        
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
     */
    private function testEdgeCases() {
        echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        $result = $this->api->getCountriesByBrand("");
        $this->assert(
            !$result['success'],
            "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É"
        );
        
        // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        $longString = str_repeat("a", 1000);
        $result = $this->api->filterProducts(['brand_id' => $longString]);
        $this->assert(
            !$result['success'],
            "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É"
        );
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        $result = $this->api->getCountriesByBrand("'; DROP TABLE brands; --");
        $this->assert(
            !$result['success'],
            "SQL –∏–Ω—ä–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
        );
        
        // –ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        $result = $this->api->filterProducts([
            'brand_id' => null,
            'model_id' => null,
            'year' => null,
            'country_id' => null
        ]);
        $this->assert(
            $result['success'],
            "–ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        );
        
        echo "‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
        echo "\n";
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
     */
    private function assert($condition, $message) {
        $this->totalTests++;
        
        if ($condition) {
            $this->passedTests++;
            $this->testResults[] = "‚úÖ " . $message;
        } else {
            $this->failedTests++;
            $this->testResults[] = "‚ùå " . $message;
            echo "‚ùå –ü–†–û–í–ê–õ: " . $message . "\n";
        }
    }
    
    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private function printTestResults() {
        echo "\n" . str_repeat("=", 80) . "\n";
        echo "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø CountryFilterAPI\n";
        echo "=" . str_repeat("=", 80) . "\n";
        
        echo "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n";
        echo "  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$this->totalTests}\n";
        echo "  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$this->passedTests}\n";
        echo "  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$this->failedTests}\n";
        
        if ($this->totalTests > 0) {
            $successRate = round(($this->passedTests / $this->totalTests) * 100, 1);
            echo "  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$successRate}%\n";
        }
        
        echo "\nüìã –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:\n";
        echo "  ‚úÖ API Endpoints:\n";
        echo "     - GET /api/countries (getAllCountries)\n";
        echo "     - GET /api/countries-by-brand (getCountriesByBrand)\n";
        echo "     - GET /api/countries-by-model (getCountriesByModel)\n";
        echo "     - GET /api/products-filter (filterProducts)\n";
        
        echo "\n  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è:\n";
        echo "     - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n";
        echo "     - –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –ë–î\n";
        echo "     - –ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π\n";
        echo "     - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤\n";
        
        echo "\n  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n";
        echo "     - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n";
        echo "     - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n";
        echo "     - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏\n";
        
        echo "\n  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:\n";
        echo "     - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n";
        echo "     - –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n";
        echo "     - –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è\n";
        
        echo "\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú:\n";
        echo "  ‚úÖ Requirement 4.1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n";
        echo "  ‚úÖ Requirement 4.2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ backend\n";
        echo "  ‚úÖ Requirement 2.1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—Ç—Ä–∞–Ω–∞—Ö –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n";
        echo "  ‚úÖ Requirement 2.2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ\n";
        
        if ($this->failedTests === 0) {
            echo "\nüéâ –í–°–ï API –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
            echo "CountryFilterAPI –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.\n";
        } else {
            echo "\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í API!\n";
            echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {$this->failedTests} –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤.\n";
        }
        
        echo "\n" . str_repeat("=", 80) . "\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (basename(__FILE__) == basename($_SERVER['SCRIPT_NAME'])) {
    try {
        $apiTest = new CountryFilterAPITest();
        $apiTest->runAllTests();
    } catch (Exception $e) {
        echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API: " . $e->getMessage() . "\n";
        exit(1);
    }
}