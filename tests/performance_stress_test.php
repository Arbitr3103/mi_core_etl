<?php
/**
 * –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
 * 
 * @version 1.0
 * @author ZUZ System
 */

require_once 'CountryFilterAPI.php';

class PerformanceStressTest {
    private $api;
    private $results = [];
    private $errors = [];
    
    public function __construct() {
        $this->api = new CountryFilterAPI();
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤
     */
    public function runAllTests() {
        echo "=== –°–¢–†–ï–°–°-–¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –§–ò–õ–¨–¢–†–ê –ü–û –°–¢–†–ê–ù–ê–ú ===\n\n";
        
        $this->testHighVolumeRequests();
        $this->testConcurrentRequests();
        $this->testLargeDatasetFiltering();
        $this->testMemoryUsage();
        $this->testDatabasePerformance();
        
        $this->printDetailedSummary();
    }
    
    /**
     * –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private function testHighVolumeRequests() {
        echo "1. üöÄ –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ–π —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n";
        
        $requestCount = 100;
        $times = [];
        $errors = 0;
        
        $startTime = microtime(true);
        
        for ($i = 0; $i < $requestCount; $i++) {
            $requestStart = microtime(true);
            
            try {
                $result = $this->api->getAllCountries();
                
                if (!$result['success']) {
                    $errors++;
                }
                
            } catch (Exception $e) {
                $errors++;
                $this->errors[] = "Request $i failed: " . $e->getMessage();
            }
            
            $requestEnd = microtime(true);
            $times[] = ($requestEnd - $requestStart) * 1000;
        }
        
        $totalTime = microtime(true) - $startTime;
        $avgTime = array_sum($times) / count($times);
        $maxTime = max($times);
        $minTime = min($times);
        $requestsPerSecond = $requestCount / $totalTime;
        
        echo "   –û–±—â–µ–µ –≤—Ä–µ–º—è: " . number_format($totalTime, 2) . " —Å–µ–∫\n";
        echo "   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: " . number_format($requestsPerSecond, 2) . "\n";
        echo "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: " . number_format($avgTime, 2) . " –º—Å\n";
        echo "   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: " . number_format($minTime, 2) . " –º—Å\n";
        echo "   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: " . number_format($maxTime, 2) . " –º—Å\n";
        echo "   –û—à–∏–±–æ–∫: $errors –∏–∑ $requestCount\n";
        
        $this->results['high_volume'] = [
            'total_time' => $totalTime,
            'requests_per_second' => $requestsPerSecond,
            'avg_time' => $avgTime,
            'max_time' => $maxTime,
            'min_time' => $minTime,
            'errors' => $errors,
            'success_rate' => (($requestCount - $errors) / $requestCount) * 100
        ];
        
        if ($requestsPerSecond > 50 && $errors == 0) {
            echo "   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n";
        } elseif ($requestsPerSecond > 20 && $errors < 5) {
            echo "   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n";
        } else {
            echo "   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
     */
    private function testConcurrentRequests() {
        echo "2. üîÑ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n";
        
        $concurrentUsers = 10;
        $requestsPerUser = 10;
        $times = [];
        $errors = 0;
        
        $startTime = microtime(true);
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        for ($user = 0; $user < $concurrentUsers; $user++) {
            for ($req = 0; $req < $requestsPerUser; $req++) {
                $requestStart = microtime(true);
                
                try {
                    // –ß–µ—Ä–µ–¥—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
                    switch ($req % 4) {
                        case 0:
                            $result = $this->api->getAllCountries();
                            break;
                        case 1:
                            $result = $this->api->getCountriesByBrand(1);
                            break;
                        case 2:
                            $result = $this->api->getCountriesByModel(1);
                            break;
                        case 3:
                            $result = $this->api->filterProducts(['brand_id' => 1, 'country_id' => 1]);
                            break;
                    }
                    
                    if (!$result['success']) {
                        $errors++;
                    }
                    
                } catch (Exception $e) {
                    $errors++;
                    $this->errors[] = "Concurrent request failed: " . $e->getMessage();
                }
                
                $requestEnd = microtime(true);
                $times[] = ($requestEnd - $requestStart) * 1000;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                usleep(10000); // 10ms
            }
        }
        
        $totalTime = microtime(true) - $startTime;
        $totalRequests = $concurrentUsers * $requestsPerUser;
        $avgTime = array_sum($times) / count($times);
        $throughput = $totalRequests / $totalTime;
        
        echo "   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $concurrentUsers\n";
        echo "   –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $requestsPerUser\n";
        echo "   –û–±—â–µ–µ –≤—Ä–µ–º—è: " . number_format($totalTime, 2) . " —Å–µ–∫\n";
        echo "   –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: " . number_format($throughput, 2) . " –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫\n";
        echo "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: " . number_format($avgTime, 2) . " –º—Å\n";
        echo "   –û—à–∏–±–æ–∫: $errors –∏–∑ $totalRequests\n";
        
        $this->results['concurrent'] = [
            'users' => $concurrentUsers,
            'total_requests' => $totalRequests,
            'throughput' => $throughput,
            'avg_time' => $avgTime,
            'errors' => $errors,
            'success_rate' => (($totalRequests - $errors) / $totalRequests) * 100
        ];
        
        if ($throughput > 30 && $errors == 0) {
            echo "   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n";
        } elseif ($throughput > 15 && $errors < 10) {
            echo "   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n";
        } else {
            echo "   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π\n\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
     */
    private function testLargeDatasetFiltering() {
        echo "3. üìä –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö:\n";
        
        $complexFilters = [
            ['brand_id' => 1],
            ['brand_id' => 1, 'country_id' => 1],
            ['brand_id' => 1, 'model_id' => 1],
            ['brand_id' => 1, 'model_id' => 1, 'country_id' => 1],
            ['brand_id' => 1, 'model_id' => 1, 'country_id' => 1, 'year' => 2020]
        ];
        
        foreach ($complexFilters as $index => $filters) {
            $iterations = 5;
            $times = [];
            $resultCounts = [];
            
            for ($i = 0; $i < $iterations; $i++) {
                $start = microtime(true);
                
                try {
                    $result = $this->api->filterProducts($filters);
                    
                    if ($result['success']) {
                        $resultCounts[] = count($result['data']);
                    }
                    
                } catch (Exception $e) {
                    $this->errors[] = "Large dataset filter failed: " . $e->getMessage();
                }
                
                $end = microtime(true);
                $times[] = ($end - $start) * 1000;
            }
            
            $avgTime = array_sum($times) / count($times);
            $avgResults = count($resultCounts) > 0 ? array_sum($resultCounts) / count($resultCounts) : 0;
            
            $filterDesc = implode(', ', array_map(function($k, $v) {
                return "$k=$v";
            }, array_keys($filters), $filters));
            
            echo "   –§–∏–ª—å—Ç—Ä " . ($index + 1) . " ($filterDesc):\n";
            echo "     –í—Ä–µ–º—è: " . number_format($avgTime, 2) . " –º—Å\n";
            echo "     –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: " . number_format($avgResults, 0) . "\n";
            
            if ($avgTime < 500) {
                echo "     ‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n";
            } elseif ($avgTime < 1000) {
                echo "     ‚úÖ –ü—Ä–∏–µ–º–ª–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n";
            } else {
                echo "     ‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n";
            }
        }
        
        echo "\n";
    }
    
    /**
     * –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    private function testMemoryUsage() {
        echo "4. üíæ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:\n";
        
        $initialMemory = memory_get_usage(true);
        $peakMemory = memory_get_peak_usage(true);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏
        for ($i = 0; $i < 50; $i++) {
            $result = $this->api->getAllCountries();
            $result = $this->api->getCountriesByBrand(1);
            $result = $this->api->filterProducts(['brand_id' => 1]);
        }
        
        $finalMemory = memory_get_usage(true);
        $finalPeakMemory = memory_get_peak_usage(true);
        
        $memoryUsed = $finalMemory - $initialMemory;
        $peakMemoryUsed = $finalPeakMemory - $peakMemory;
        
        echo "   –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: " . $this->formatBytes($initialMemory) . "\n";
        echo "   –ö–æ–Ω–µ—á–Ω–∞—è –ø–∞–º—è—Ç—å: " . $this->formatBytes($finalMemory) . "\n";
        echo "   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: " . $this->formatBytes($memoryUsed) . "\n";
        echo "   –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " . $this->formatBytes($peakMemoryUsed) . "\n";
        
        $this->results['memory'] = [
            'initial' => $initialMemory,
            'final' => $finalMemory,
            'used' => $memoryUsed,
            'peak' => $peakMemoryUsed
        ];
        
        if ($memoryUsed < 5 * 1024 * 1024) { // 5MB
            echo "   ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n\n";
        } elseif ($memoryUsed < 10 * 1024 * 1024) { // 10MB
            echo "   ‚úÖ –ü—Ä–∏–µ–º–ª–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n\n";
        } else {
            echo "   ‚ùå –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏\n\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private function testDatabasePerformance() {
        echo "5. üóÑÔ∏è –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n";
        
        try {
            $db = new CountryFilterDatabase();
            $pdo = $db->getConnection();
            
            // –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö JOIN –∑–∞–ø—Ä–æ—Å–æ–≤
            $complexQuery = "
                SELECT DISTINCT r.id, r.name, COUNT(p.id) as product_count
                FROM regions r
                LEFT JOIN brands b ON r.id = b.region_id
                LEFT JOIN car_models cm ON b.id = cm.brand_id
                LEFT JOIN car_specifications cs ON cm.id = cs.car_model_id
                LEFT JOIN dim_products p ON cs.id = p.specification_id
                GROUP BY r.id, r.name
                ORDER BY product_count DESC
            ";
            
            $iterations = 10;
            $times = [];
            
            for ($i = 0; $i < $iterations; $i++) {
                $start = microtime(true);
                
                $stmt = $pdo->prepare($complexQuery);
                $stmt->execute();
                $results = $stmt->fetchAll();
                
                $end = microtime(true);
                $times[] = ($end - $start) * 1000;
            }
            
            $avgTime = array_sum($times) / count($times);
            $resultCount = count($results);
            
            echo "   –°–ª–æ–∂–Ω—ã–π JOIN –∑–∞–ø—Ä–æ—Å:\n";
            echo "     –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: " . number_format($avgTime, 2) . " –º—Å\n";
            echo "     –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $resultCount\n";
            
            if ($avgTime < 100) {
                echo "     ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î\n";
            } elseif ($avgTime < 500) {
                echo "     ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î\n";
            } else {
                echo "     ‚ùå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î\n";
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
            $this->checkDatabaseIndexes($pdo);
            
        } catch (Exception $e) {
            echo "   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: " . $e->getMessage() . "\n";
            $this->errors[] = "Database test failed: " . $e->getMessage();
        }
        
        echo "\n";
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private function checkDatabaseIndexes($pdo) {
        echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:\n";
        
        $indexQueries = [
            'brands.region_id' => "SHOW INDEX FROM brands WHERE Column_name = 'region_id'",
            'car_models.brand_id' => "SHOW INDEX FROM car_models WHERE Column_name = 'brand_id'",
            'car_specifications.car_model_id' => "SHOW INDEX FROM car_specifications WHERE Column_name = 'car_model_id'",
            'dim_products.specification_id' => "SHOW INDEX FROM dim_products WHERE Column_name = 'specification_id'"
        ];
        
        foreach ($indexQueries as $indexName => $query) {
            try {
                $stmt = $pdo->prepare($query);
                $stmt->execute();
                $indexes = $stmt->fetchAll();
                
                if (count($indexes) > 0) {
                    echo "     ‚úÖ $indexName: –∏–Ω–¥–µ–∫—Å –Ω–∞–π–¥–µ–Ω\n";
                } else {
                    echo "     ‚ùå $indexName: –∏–Ω–¥–µ–∫—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n";
                }
                
            } catch (Exception $e) {
                echo "     ‚ö†Ô∏è $indexName: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n";
            }
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö
     */
    private function formatBytes($bytes, $precision = 2) {
        $units = array('B', 'KB', 'MB', 'GB', 'TB');
        
        for ($i = 0; $bytes > 1024; $i++) {
            $bytes /= 1024;
        }
        
        return round($bytes, $precision) . ' ' . $units[$i];
    }
    
    /**
     * –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    private function printDetailedSummary() {
        echo "=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===\n\n";
        
        // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        $overallScore = 0;
        $maxScore = 0;
        
        if (isset($this->results['high_volume'])) {
            $hv = $this->results['high_volume'];
            echo "üìà –í–´–°–û–ö–ê–Ø –ß–ê–°–¢–û–¢–ê –ó–ê–ü–†–û–°–û–í:\n";
            echo "   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: " . number_format($hv['requests_per_second'], 2) . "\n";
            echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " . number_format($hv['success_rate'], 1) . "%\n";
            echo "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: " . number_format($hv['avg_time'], 2) . " –º—Å\n";
            
            if ($hv['requests_per_second'] > 50 && $hv['success_rate'] > 95) {
                $overallScore += 25;
                echo "   üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n";
            } elseif ($hv['requests_per_second'] > 20 && $hv['success_rate'] > 90) {
                $overallScore += 20;
                echo "   ‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n";
            } else {
                $overallScore += 10;
                echo "   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n\n";
            }
            $maxScore += 25;
        }
        
        if (isset($this->results['concurrent'])) {
            $cc = $this->results['concurrent'];
            echo "üîÑ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´:\n";
            echo "   –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: " . number_format($cc['throughput'], 2) . " –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫\n";
            echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " . number_format($cc['success_rate'], 1) . "%\n";
            echo "   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: " . number_format($cc['avg_time'], 2) . " –º—Å\n";
            
            if ($cc['throughput'] > 30 && $cc['success_rate'] > 95) {
                $overallScore += 25;
                echo "   üèÜ –û—Ç–ª–∏—á–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n";
            } elseif ($cc['throughput'] > 15 && $cc['success_rate'] > 90) {
                $overallScore += 20;
                echo "   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n";
            } else {
                $overallScore += 10;
                echo "   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é\n\n";
            }
            $maxScore += 25;
        }
        
        if (isset($this->results['memory'])) {
            $mem = $this->results['memory'];
            echo "üíæ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò:\n";
            echo "   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: " . $this->formatBytes($mem['used']) . "\n";
            echo "   –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " . $this->formatBytes($mem['peak']) . "\n";
            
            if ($mem['used'] < 5 * 1024 * 1024) {
                $overallScore += 25;
                echo "   üèÜ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n\n";
            } elseif ($mem['used'] < 10 * 1024 * 1024) {
                $overallScore += 20;
                echo "   ‚úÖ –ü—Ä–∏–µ–º–ª–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏\n\n";
            } else {
                $overallScore += 10;
                echo "   ‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏\n\n";
            }
            $maxScore += 25;
        }
        
        // –û—à–∏–±–∫–∏
        if (count($this->errors) > 0) {
            echo "‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:\n";
            foreach ($this->errors as $index => $error) {
                echo "   " . ($index + 1) . ". $error\n";
            }
            echo "\n";
        } else {
            $overallScore += 25;
            $maxScore += 25;
            echo "‚úÖ –û–®–ò–ë–û–ö –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û\n\n";
        }
        
        // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        $scorePercentage = $maxScore > 0 ? ($overallScore / $maxScore) * 100 : 0;
        
        echo "üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: " . number_format($scorePercentage, 1) . "%\n";
        
        if ($scorePercentage >= 90) {
            echo "üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã—Å–æ–∫–∏–º –Ω–∞–≥—Ä—É–∑–∫–∞–º.\n";
        } elseif ($scorePercentage >= 75) {
            echo "‚úÖ –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π.\n";
        } elseif ($scorePercentage >= 60) {
            echo "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.\n";
        } else {
            echo "‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.\n";
        }
        
        echo "\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:\n";
        
        if (isset($this->results['high_volume']) && $this->results['high_volume']['requests_per_second'] < 30) {
            echo "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ SQL –∑–∞–ø—Ä–æ—Å—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã\n";
        }
        
        if (isset($this->results['memory']) && $this->results['memory']['used'] > 10 * 1024 * 1024) {
            echo "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n";
        }
        
        if (count($this->errors) > 0) {
            echo "‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏\n";
        }
        
        echo "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è\n";
        echo "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ connection pooling –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n";
        echo "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ\n";
        
        echo "\n" . str_repeat("=", 60) . "\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤
if (php_sapi_name() === 'cli') {
    $test = new PerformanceStressTest();
    $test->runAllTests();
} else {
    header('Content-Type: text/plain; charset=utf-8');
    $test = new PerformanceStressTest();
    $test->runAllTests();
}
?>