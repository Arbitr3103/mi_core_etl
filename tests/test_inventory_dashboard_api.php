<?php
/**
 * –¢–µ—Å—Ç—ã –¥–ª—è API endpoints –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
 */

require_once __DIR__ . '/../config.php';

class InventoryDashboardApiTest {
    private $pdo;
    private $test_results = [];
    private $base_url;
    
    public function __construct() {
        $this->pdo = getDatabaseConnection();
        $this->base_url = 'http://localhost/api/inventory-analytics.php';
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        $this->setupTestData();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
     */
    private function setupTestData() {
        try {
            // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            $this->pdo->exec("DELETE FROM inventory_data WHERE sku LIKE 'TEST-%'");
            $this->pdo->exec("DELETE FROM dim_products WHERE sku_ozon LIKE 'TEST-%'");
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ dim_products
            $products_stmt = $this->pdo->prepare("
                INSERT INTO dim_products (sku_ozon, sku_wb, product_name, name, cost_price) VALUES
                ('TEST-CRITICAL-001', 'TEST-CRITICAL-001', '–¢–µ—Å—Ç–æ–≤—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä 1', '–¢–µ—Å—Ç–æ–≤—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä 1', 100.00),
                ('TEST-LOW-001', 'TEST-LOW-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º', '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º', 50.00),
                ('TEST-OVERSTOCK-001', 'TEST-OVERSTOCK-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –∏–∑–±—ã—Ç–∫–æ–º', '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –∏–∑–±—ã—Ç–∫–æ–º', 25.00),
                ('TEST-NORMAL-001', 'TEST-NORMAL-001', '–¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä', '–¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä', 75.00),
                ('TEST-NO-NAME-001', 'TEST-NO-NAME-001', NULL, NULL, 30.00)
            ");
            $products_stmt->execute();
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ inventory_data
            $inventory_stmt = $this->pdo->prepare("
                INSERT INTO inventory_data (sku, warehouse_name, current_stock, available_stock, reserved_stock, last_sync_at) VALUES
                ('TEST-CRITICAL-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ 1', 3, 3, 0, NOW()),
                ('TEST-CRITICAL-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ 2', 2, 2, 0, NOW()),
                ('TEST-LOW-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ 1', 15, 12, 3, NOW()),
                ('TEST-OVERSTOCK-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ 1', 150, 140, 10, NOW()),
                ('TEST-NORMAL-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ 1', 50, 45, 5, NOW()),
                ('TEST-NO-NAME-001', '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ 1', 8, 8, 0, NOW())
            ");
            $inventory_stmt->execute();
            
            echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ\n";
            
        } catch (Exception $e) {
            echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n";
            throw $e;
        }
    }
    
    /**
     * –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ dashboard endpoint
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 1.1, 1.2, 2.1, 2.2, 2.3
     */
    public function testDashboardEndpoint() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dashboard endpoint...\n";
        
        try {
            $response = $this->makeApiRequest('dashboard');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            $this->assertTrue(isset($response['status']), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'status'");
            $this->assertEquals('success', $response['status'], "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'success'");
            $this->assertTrue(isset($response['data']), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'data'");
            
            $data = $response['data'];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1.1)
            $required_fields = [
                'critical_stock_count', 'low_stock_count', 'overstock_count', 
                'total_inventory_value', 'critical_products', 'low_stock_products', 
                'overstock_products', 'warehouses_summary', 'recommendations'
            ];
            
            foreach ($required_fields as $field) {
                $this->assertTrue(isset($data[$field]), "–ü–æ–ª–µ '$field' –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            $this->assertTrue(is_int($data['critical_stock_count']), "critical_stock_count –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
            $this->assertTrue(is_array($data['critical_products']), "critical_products –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
            $this->assertTrue(is_array($data['warehouses_summary']), "warehouses_summary –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            $this->assertTrue($data['critical_stock_count'] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ–≤–∞—Ä");
            $this->assertTrue($data['low_stock_count'] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º");
            $this->assertTrue($data['overstock_count'] >= 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä —Å –∏–∑–±—ã—Ç–∫–æ–º");
            
            $this->test_results['dashboard_endpoint'] = 'PASSED';
            echo "‚úÖ Dashboard endpoint —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['dashboard_endpoint'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå Dashboard endpoint —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç endpoint –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 2.1
     */
    public function testCriticalProductsEndpoint() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ critical-products endpoint...\n";
        
        try {
            $response = $this->makeApiRequest('critical-products');
            
            $this->assertEquals('success', $response['status'], "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'success'");
            $this->assertTrue(isset($response['data']), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ");
            $this->assertTrue(is_array($response['data']), "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (‚â§5 –µ–¥–∏–Ω–∏—Ü)
            foreach ($response['data'] as $product) {
                $this->assertTrue($product['stock'] <= 5, 
                    "–¢–æ–≤–∞—Ä {$product['sku']} –∏–º–µ–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ {$product['stock']}, —á—Ç–æ –±–æ–ª—å—à–µ 5 –µ–¥–∏–Ω–∏—Ü");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞
                $required_product_fields = ['name', 'sku', 'stock', 'warehouse'];
                foreach ($required_product_fields as $field) {
                    $this->assertTrue(isset($product[$field]), 
                        "–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '$field'");
                }
            }
            
            $this->test_results['critical_products_endpoint'] = 'PASSED';
            echo "‚úÖ Critical products endpoint —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['critical_products_endpoint'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå Critical products endpoint —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç endpoint –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–±—ã—Ç–∫–æ–º
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 2.3
     */
    public function testOverstockProductsEndpoint() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ overstock-products endpoint...\n";
        
        try {
            $response = $this->makeApiRequest('overstock-products');
            
            $this->assertEquals('success', $response['status'], "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'success'");
            $this->assertTrue(is_array($response['data']), "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å –∏–∑–±—ã—Ç–∫–æ–º (>100 –µ–¥–∏–Ω–∏—Ü)
            foreach ($response['data'] as $product) {
                $this->assertTrue($product['stock'] > 100, 
                    "–¢–æ–≤–∞—Ä {$product['sku']} –∏–º–µ–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ {$product['stock']}, —á—Ç–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 100 –µ–¥–∏–Ω–∏—Ü");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è excess_stock
                $this->assertTrue(isset($product['excess_stock']), 
                    "–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'excess_stock'");
                $this->assertTrue($product['excess_stock'] > 0, 
                    "excess_stock –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
            }
            
            $this->test_results['overstock_products_endpoint'] = 'PASSED';
            echo "‚úÖ Overstock products endpoint —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['overstock_products_endpoint'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå Overstock products endpoint —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç endpoint –¥–ª—è —Å–≤–æ–¥–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 5.1, 5.2, 5.3
     */
    public function testWarehouseSummaryEndpoint() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ warehouse-summary endpoint...\n";
        
        try {
            $response = $this->makeApiRequest('warehouse-summary');
            
            $this->assertEquals('success', $response['status'], "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'success'");
            $this->assertTrue(is_array($response['data']), "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º
            foreach ($response['data'] as $warehouse) {
                $required_warehouse_fields = [
                    'warehouse_name', 'total_products', 'total_stock', 
                    'critical_count', 'low_count', 'overstock_count'
                ];
                
                foreach ($required_warehouse_fields as $field) {
                    $this->assertTrue(isset($warehouse[$field]), 
                        "–°–∫–ª–∞–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '$field'");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                $this->assertTrue(is_string($warehouse['warehouse_name']), 
                    "warehouse_name –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
                $this->assertTrue(is_numeric($warehouse['total_products']), 
                    "total_products –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
                $this->assertTrue(is_numeric($warehouse['total_stock']), 
                    "total_stock –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
            }
            
            $this->test_results['warehouse_summary_endpoint'] = 'PASSED';
            echo "‚úÖ Warehouse summary endpoint —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['warehouse_summary_endpoint'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå Warehouse summary endpoint —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç endpoint –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 4.1, 4.2, 4.3
     */
    public function testRecommendationsEndpoint() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ recommendations endpoint...\n";
        
        try {
            $response = $this->makeApiRequest('recommendations');
            
            $this->assertEquals('success', $response['status'], "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'success'");
            $this->assertTrue(is_array($response['data']), "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            foreach ($response['data'] as $recommendation) {
                $required_rec_fields = ['type', 'title', 'message', 'action'];
                
                foreach ($required_rec_fields as $field) {
                    $this->assertTrue(isset($recommendation[$field]), 
                        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ '$field'");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                $allowed_types = ['urgent', 'optimization', 'planning'];
                $this->assertTrue(in_array($recommendation['type'], $allowed_types), 
                    "–¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: " . implode(', ', $allowed_types));
            }
            
            $this->test_results['recommendations_endpoint'] = 'PASSED';
            echo "‚úÖ Recommendations endpoint —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['recommendations_endpoint'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå Recommendations endpoint —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
     * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 1.1, 3.2
     */
    public function testErrorHandling() {
        echo "\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...\n";
        
        try {
            // –¢–µ—Å—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ action
            $response = $this->makeApiRequest('invalid-action');
            $this->assertEquals('error', $response['status'], "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ action");
            $this->assertEquals('VALIDATION_ERROR', $response['error_code'], "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—à–∏–±–∫–∏ VALIDATION_ERROR");
            
            // –¢–µ—Å—Ç warehouse-details –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ warehouse
            $response = $this->makeApiRequest('warehouse-details');
            $this->assertEquals('error', $response['status'], "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ warehouse");
            
            $this->test_results['error_handling'] = 'PASSED';
            echo "‚úÖ Error handling —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω\n";
            
        } catch (Exception $e) {
            $this->test_results['error_handling'] = 'FAILED: ' . $e->getMessage();
            echo "‚ùå Error handling —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
     */
    private function makeApiRequest($action, $params = []) {
        $url = $this->base_url . '?action=' . $action;
        
        foreach ($params as $key => $value) {
            $url .= '&' . urlencode($key) . '=' . urlencode($value);
        }
        
        $context = stream_context_create([
            'http' => [
                'method' => 'GET',
                'timeout' => 30,
                'header' => 'Content-Type: application/json'
            ]
        ]);
        
        $response = file_get_contents($url, false, $context);
        
        if ($response === false) {
            throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API: $url");
        }
        
        $decoded = json_decode($response, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: " . json_last_error_msg());
        }
        
        return $decoded;
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert –¥–ª—è —Ç–µ—Å—Ç–æ–≤
     */
    private function assertTrue($condition, $message = '') {
        if (!$condition) {
            throw new Exception($message ?: 'Assertion failed');
        }
    }
    
    private function assertEquals($expected, $actual, $message = '') {
        if ($expected !== $actual) {
            throw new Exception($message ?: "Expected '$expected', got '$actual'");
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private function cleanupTestData() {
        try {
            $this->pdo->exec("DELETE FROM inventory_data WHERE sku LIKE 'TEST-%'");
            $this->pdo->exec("DELETE FROM dim_products WHERE sku_ozon LIKE 'TEST-%'");
            echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n";
        } catch (Exception $e) {
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    public function runAllTests() {
        echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API endpoints –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤\n";
        echo "=" . str_repeat("=", 60) . "\n";
        
        $start_time = microtime(true);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        $this->testDashboardEndpoint();
        $this->testCriticalProductsEndpoint();
        $this->testOverstockProductsEndpoint();
        $this->testWarehouseSummaryEndpoint();
        $this->testRecommendationsEndpoint();
        $this->testErrorHandling();
        
        $end_time = microtime(true);
        $execution_time = round($end_time - $start_time, 2);
        
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        $this->cleanupTestData();
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        echo "\n" . str_repeat("=", 60) . "\n";
        echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API ENDPOINTS\n";
        echo str_repeat("=", 60) . "\n";
        
        $passed = 0;
        $total = count($this->test_results);
        
        foreach ($this->test_results as $test_name => $result) {
            $status = strpos($result, 'PASSED') !== false ? '‚úÖ PASSED' : '‚ùå FAILED';
            echo sprintf("%-40s %s\n", $test_name, $status);
            
            if (strpos($result, 'PASSED') !== false) {
                $passed++;
            } else {
                echo "   –î–µ—Ç–∞–ª–∏: " . str_replace('FAILED: ', '', $result) . "\n";
            }
        }
        
        echo str_repeat("-", 60) . "\n";
        echo sprintf("–ü—Ä–æ–π–¥–µ–Ω–æ: %d/%d —Ç–µ—Å—Ç–æ–≤ (%.1f%%)\n", $passed, $total, ($passed / $total) * 100);
        echo "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {$execution_time} —Å–µ–∫\n";
        
        if ($passed === $total) {
            echo "üéâ –í–°–ï –¢–ï–°–¢–´ API ENDPOINTS –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
            return true;
        } else {
            echo "‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ API ENDPOINTS –ù–ï –ü–†–û–ô–î–ï–ù–´\n";
            return false;
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (basename(__FILE__) === basename($_SERVER['SCRIPT_NAME'])) {
    try {
        $tester = new InventoryDashboardApiTest();
        $success = $tester->runAllTests();
        exit($success ? 0 : 1);
    } catch (Exception $e) {
        echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: " . $e->getMessage() . "\n";
        exit(1);
    }
}
?>