<?php
/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * 
 * Requirements: 3.1, 3.2, 3.3
 */

require_once __DIR__ . '/config.php';

echo "üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò\n";
echo "======================================\n\n";

try {
    $pdo = new PDO(
        sprintf('mysql:host=%s;port=%s;dbname=%s;charset=utf8mb4', DB_HOST, DB_PORT, DB_NAME),
        DB_USER,
        DB_PASSWORD,
        [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
        ]
    );
    
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ\n\n";
    
    $validationResults = [
        'passed' => 0,
        'failed' => 0,
        'warnings' => 0,
        'details' => []
    ];
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã product_cross_reference
    echo "üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n";
    $test1 = validateDatabaseStructure($pdo);
    recordTestResult($validationResults, '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î', $test1);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ cross_reference
    echo "\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ product_cross_reference\n";
    $test2 = validateCrossReferenceData($pdo);
    recordTestResult($validationResults, '–î–∞–Ω–Ω—ã–µ cross_reference', $test2);
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å dim_products
    echo "\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å dim_products\n";
    $test3 = validateDimProductsLink($pdo);
    recordTestResult($validationResults, '–°–≤—è–∑—å —Å dim_products', $test3);
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
    echo "\nüìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤\n";
    $test4 = validateProductNames($pdo);
    recordTestResult($validationResults, '–ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π', $test4);
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    echo "\nüìã –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤\n";
    $test5 = validateSQLQueries($pdo);
    recordTestResult($validationResults, 'SQL –∑–∞–ø—Ä–æ—Å—ã', $test5);
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    echo "\n";
    echo "=" . str_repeat("=", 50) . "\n";
    echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢\n";
    echo "=" . str_repeat("=", 50) . "\n\n";
    
    echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {$validationResults['passed']}\n";
    echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {$validationResults['failed']}\n";
    echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {$validationResults['warnings']}\n\n";
    
    if ($validationResults['failed'] === 0) {
        echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
        echo "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n";
        exit(0);
    } else {
        echo "‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´\n";
        echo "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.\n\n";
        
        echo "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º:\n";
        foreach ($validationResults['details'] as $detail) {
            if ($detail['status'] === 'failed') {
                echo "  ‚ùå {$detail['test']}: {$detail['message']}\n";
            }
        }
        echo "\n";
        exit(1);
    }
    
} catch (Exception $e) {
    echo "\n‚ùå –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n\n";
    exit(1);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
function validateDatabaseStructure($pdo) {
    $requiredTables = [
        'product_cross_reference' => [
            'inventory_product_id',
            'ozon_product_id',
            'analytics_product_id',
            'sku_ozon',
            'cached_name',
            'cached_brand',
            'sync_status',
            'last_api_sync'
        ],
        'dim_products' => [
            'sku_ozon',
            'name',
            'cross_ref_id'
        ]
    ];
    
    foreach ($requiredTables as $table => $columns) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        $stmt = $pdo->query("SHOW TABLES LIKE '{$table}'");
        if ($stmt->rowCount() === 0) {
            return [
                'status' => 'failed',
                'message' => "–¢–∞–±–ª–∏—Ü–∞ {$table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            ];
        }
        
        echo "   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {$table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        $stmt = $pdo->query("DESCRIBE {$table}");
        $existingColumns = array_column($stmt->fetchAll(), 'Field');
        
        foreach ($columns as $column) {
            if (!in_array($column, $existingColumns)) {
                return [
                    'status' => 'failed',
                    'message' => "–ö–æ–ª–æ–Ω–∫–∞ {$column} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {$table}"
                ];
            }
        }
        
        echo "   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç\n";
    }
    
    return [
        'status' => 'passed',
        'message' => '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞'
    ];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ product_cross_reference
 */
function validateCrossReferenceData($pdo) {
    $sql = "
        SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN sync_status = 'synced' THEN 1 ELSE 0 END) as synced,
            SUM(CASE WHEN cached_name IS NOT NULL THEN 1 ELSE 0 END) as with_names
        FROM product_cross_reference
    ";
    
    $stmt = $pdo->query($sql);
    $stats = $stmt->fetch();
    
    echo "   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {$stats['total']}\n";
    echo "   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {$stats['synced']}\n";
    echo "   –° –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {$stats['with_names']}\n";
    
    if ($stats['total'] === 0) {
        return [
            'status' => 'warning',
            'message' => '–¢–∞–±–ª–∏—Ü–∞ product_cross_reference –ø—É—Å—Ç–∞'
        ];
    }
    
    return [
        'status' => 'passed',
        'message' => "–ù–∞–π–¥–µ–Ω–æ {$stats['total']} –∑–∞–ø–∏—Å–µ–π"
    ];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑—å —Å dim_products
 */
function validateDimProductsLink($pdo) {
    $sql = "
        SELECT 
            COUNT(DISTINCT dp.sku_ozon) as total_products,
            COUNT(DISTINCT pcr.id) as linked_products
        FROM dim_products dp
        LEFT JOIN product_cross_reference pcr ON dp.sku_ozon = pcr.sku_ozon
        WHERE dp.sku_ozon IS NOT NULL
    ";
    
    $stmt = $pdo->query($sql);
    $stats = $stmt->fetch();
    
    echo "   –¢–æ–≤–∞—Ä–æ–≤ –≤ dim_products: {$stats['total_products']}\n";
    echo "   –°–≤—è–∑–∞–Ω–æ —Å cross_reference: {$stats['linked_products']}\n";
    
    $linkPercentage = $stats['total_products'] > 0 
        ? round(($stats['linked_products'] / $stats['total_products']) * 100, 2)
        : 0;
    
    echo "   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö: {$linkPercentage}%\n";
    
    if ($linkPercentage < 50) {
        return [
            'status' => 'warning',
            'message' => "–¢–æ–ª—å–∫–æ {$linkPercentage}% —Ç–æ–≤–∞—Ä–æ–≤ —Å–≤—è–∑–∞–Ω—ã —Å cross_reference"
        ];
    }
    
    return [
        'status' => 'passed',
        'message' => "–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {$linkPercentage}% —Ç–æ–≤–∞—Ä–æ–≤"
    ];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
 */
function validateProductNames($pdo) {
    $sql = "
        SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN cached_name NOT LIKE '–¢–æ–≤–∞—Ä%ID%' AND cached_name IS NOT NULL THEN 1 ELSE 0 END) as real_names,
            SUM(CASE WHEN cached_name LIKE '–¢–æ–≤–∞—Ä%ID%' THEN 1 ELSE 0 END) as placeholder_names
        FROM product_cross_reference
    ";
    
    $stmt = $pdo->query($sql);
    $stats = $stmt->fetch();
    
    echo "   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {$stats['total']}\n";
    echo "   –° —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {$stats['real_names']}\n";
    echo "   –° –∑–∞–≥–ª—É—à–∫–∞–º–∏: {$stats['placeholder_names']}\n";
    
    $realNamesPercentage = $stats['total'] > 0 
        ? round(($stats['real_names'] / $stats['total']) * 100, 2)
        : 0;
    
    echo "   –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: {$realNamesPercentage}%\n";
    
    if ($realNamesPercentage < 30) {
        return [
            'status' => 'warning',
            'message' => "–¢–æ–ª—å–∫–æ {$realNamesPercentage}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è"
        ];
    }
    
    return [
        'status' => 'passed',
        'message' => "{$realNamesPercentage}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è"
    ];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã
 */
function validateSQLQueries($pdo) {
    // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å —Å DISTINCT –±–µ–∑ ORDER BY –ø—Ä–æ–±–ª–µ–º
    try {
        $sql = "
            SELECT DISTINCT 
                pcr.inventory_product_id,
                pcr.cached_name
            FROM product_cross_reference pcr
            WHERE pcr.cached_name IS NOT NULL
            LIMIT 5
        ";
        
        $stmt = $pdo->query($sql);
        $stmt->fetchAll();
        
        echo "   ‚úÖ –ó–∞–ø—Ä–æ—Å —Å DISTINCT —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } catch (Exception $e) {
        return [
            'status' => 'failed',
            'message' => '–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ —Å DISTINCT: ' . $e->getMessage()
        ];
    }
    
    // –¢–µ—Å—Ç 2: JOIN —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    try {
        $sql = "
            SELECT 
                i.product_id,
                pcr.cached_name
            FROM inventory_data i
            JOIN product_cross_reference pcr ON CAST(i.product_id AS CHAR) = pcr.inventory_product_id
            WHERE i.product_id != 0
            LIMIT 5
        ";
        
        $stmt = $pdo->query($sql);
        $stmt->fetchAll();
        
        echo "   ‚úÖ JOIN —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } catch (Exception $e) {
        return [
            'status' => 'failed',
            'message' => '–û—à–∏–±–∫–∞ –≤ JOIN –∑–∞–ø—Ä–æ—Å–µ: ' . $e->getMessage()
        ];
    }
    
    // –¢–µ—Å—Ç 3: –ü–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
    try {
        $sql = "
            SELECT product_id, product_name
            FROM (
                SELECT 
                    i.product_id,
                    pcr.cached_name as product_name,
                    i.quantity_present
                FROM inventory_data i
                JOIN product_cross_reference pcr ON CAST(i.product_id AS CHAR) = pcr.inventory_product_id
                WHERE i.product_id != 0
                ORDER BY i.quantity_present DESC
            ) ranked_products
            LIMIT 5
        ";
        
        $stmt = $pdo->query($sql);
        $stmt->fetchAll();
        
        echo "   ‚úÖ –ü–æ–¥–∑–∞–ø—Ä–æ—Å —Å ORDER BY —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    } catch (Exception $e) {
        return [
            'status' => 'failed',
            'message' => '–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–µ: ' . $e->getMessage()
        ];
    }
    
    return [
        'status' => 'passed',
        'message' => '–í—Å–µ SQL –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    ];
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
function recordTestResult(&$results, $testName, $testResult) {
    $results['details'][] = [
        'test' => $testName,
        'status' => $testResult['status'],
        'message' => $testResult['message']
    ];
    
    if ($testResult['status'] === 'passed') {
        $results['passed']++;
        echo "   ‚úÖ {$testResult['message']}\n";
    } elseif ($testResult['status'] === 'failed') {
        $results['failed']++;
        echo "   ‚ùå {$testResult['message']}\n";
    } else {
        $results['warnings']++;
        echo "   ‚ö†Ô∏è  {$testResult['message']}\n";
    }
}
