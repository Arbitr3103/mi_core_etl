<?php
/**
 * Unit Tests –¥–ª—è –∫–ª–∞—Å—Å–∞ ProductActivityChecker
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤:
 * - visibility = "VISIBLE"
 * - state = "processed" 
 * - present > 0 (–Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ)
 * - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∞
 * 
 * @version 1.0
 * @author ZUZ System
 */

require_once __DIR__ . '/../../../src/Services/ProductActivityChecker.php';

use Services\ProductActivityChecker;

class ProductActivityCheckerTest
{
    private $checker;
    private $validProductData;
    private $validStockData;
    private $validPriceData;
    private $testResults = [];

    public function __construct()
    {
        $this->checker = new ProductActivityChecker();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $this->validProductData = [
            'visibility' => 'VISIBLE',
            'state' => 'processed',
            'product_id' => 'TEST_001',
            'name' => 'Test Product'
        ];
        
        $this->validStockData = [
            'present' => 10,
            'reserved' => 2
        ];
        
        $this->validPriceData = [
            'price' => 99.99,
            'old_price' => 120.00
        ];
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    public function runAllTests()
    {
        echo "üß™ –ó–ê–ü–£–°–ö UNIT –¢–ï–°–¢–û–í –î–õ–Ø –ö–õ–ê–°–°–ê ProductActivityChecker\n";
        echo "=" . str_repeat("=", 70) . "\n\n";
        
        $this->testProductActiveWhenAllCriteriaMet();
        $this->testProductInactiveWhenVisibilityNotVisible();
        $this->testProductInactiveWhenStateNotProcessed();
        $this->testProductInactiveWhenStockIsZero();
        $this->testProductInactiveWhenPricingMissing();
        $this->testProductActiveWithOnlyCurrentPrice();
        $this->testActivityReasonForActiveProduct();
        $this->testActivityReasonForInactiveProduct();
        $this->testBatchProcessingMixedProducts();
        $this->testBatchProcessingEmptyProducts();
        $this->testConfigurationWithCustomThreshold();
        $this->testConfigurationWithPricingNotRequired();
        $this->testEdgeCasesWithMissingFields();
        $this->testEdgeCasesWithInvalidValues();
        $this->testPerformanceWithLargeBatch();
        
        $this->printResults();
    }

    /**
     * –¢–µ—Å—Ç: —Ç–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω –∫–æ–≥–¥–∞ –≤—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
     */
    private function testProductActiveWhenAllCriteriaMet()
    {
        echo "üìç –¢–µ—Å—Ç: –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $isActive = $this->checker->isProductActive(
                $this->validProductData,
                $this->validStockData,
                $this->validPriceData
            );
            
            $this->assert($isActive === true, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤');
            
            $this->testResults['productActiveAllCriteria'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['productActiveAllCriteria'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: —Ç–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∫–æ–≥–¥–∞ visibility –Ω–µ VISIBLE
     */
    private function testProductInactiveWhenVisibilityNotVisible()
    {
        echo "üìç –¢–µ—Å—Ç: –¢–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ visibility != VISIBLE\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $productData = array_merge($this->validProductData, ['visibility' => 'HIDDEN']);
            
            $isActive = $this->checker->isProductActive($productData, $this->validStockData, $this->validPriceData);
            
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ visibility = HIDDEN');
            
            // –¢–µ—Å—Ç —Å –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ visibility
            $productData['visibility'] = 'ARCHIVED';
            $isActive = $this->checker->isProductActive($productData, $this->validStockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ visibility = ARCHIVED');
            
            $this->testResults['productInactiveVisibility'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['productInactiveVisibility'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: —Ç–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∫–æ–≥–¥–∞ state –Ω–µ processed
     */
    private function testProductInactiveWhenStateNotProcessed()
    {
        echo "üìç –¢–µ—Å—Ç: –¢–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ state != processed\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $productData = array_merge($this->validProductData, ['state' => 'draft']);
            
            $isActive = $this->checker->isProductActive($productData, $this->validStockData, $this->validPriceData);
            
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ state = draft');
            
            // –¢–µ—Å—Ç —Å –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ state
            $productData['state'] = 'pending';
            $isActive = $this->checker->isProductActive($productData, $this->validStockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ state = pending');
            
            $this->testResults['productInactiveState'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['productInactiveState'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: —Ç–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∫–æ–≥–¥–∞ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é
     */
    private function testProductInactiveWhenStockIsZero()
    {
        echo "üìç –¢–µ—Å—Ç: –¢–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –Ω—É–ª–µ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $stockData = ['present' => 0];
            
            $isActive = $this->checker->isProductActive($this->validProductData, $stockData, $this->validPriceData);
            
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ present = 0');
            
            // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
            $stockData['present'] = -5;
            $isActive = $this->checker->isProductActive($this->validProductData, $stockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö');
            
            $this->testResults['productInactiveStock'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['productInactiveStock'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: —Ç–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∫–æ–≥–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö
     */
    private function testProductInactiveWhenPricingMissing()
    {
        echo "üìç –¢–µ—Å—Ç: –¢–æ–≤–∞—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ü–µ–Ω\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $priceData = [];
            
            $isActive = $this->checker->isProductActive($this->validProductData, $this->validStockData, $priceData);
            
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ü–µ–Ω');
            
            // –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            $priceData = ['price' => 0, 'old_price' => 0];
            $isActive = $this->checker->isProductActive($this->validProductData, $this->validStockData, $priceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –Ω—É–ª–µ–≤—ã—Ö —Ü–µ–Ω–∞—Ö');
            
            $this->testResults['productInactivePricing'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['productInactivePricing'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: —Ç–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω –∫–æ–≥–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
     */
    private function testProductActiveWithOnlyCurrentPrice()
    {
        echo "üìç –¢–µ—Å—Ç: –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $priceData = ['price' => 99.99, 'old_price' => 0];
            
            $isActive = $this->checker->isProductActive($this->validProductData, $this->validStockData, $priceData);
            
            $this->assert($isActive === true, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã');
            
            // –¢–µ—Å—Ç —Å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–æ–π
            $priceData = ['price' => 0, 'old_price' => 120.00];
            $isActive = $this->checker->isProductActive($this->validProductData, $this->validStockData, $priceData);
            $this->assert($isActive === true, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã');
            
            $this->testResults['productActivePrice'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['productActivePrice'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ø—Ä–∏—á–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
     */
    private function testActivityReasonForActiveProduct()
    {
        echo "üìç –¢–µ—Å—Ç: –ü—Ä–∏—á–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $reason = $this->checker->getActivityReason(
                $this->validProductData,
                $this->validStockData,
                $this->validPriceData
            );
            
            $this->assert($reason === 'Product is active - all criteria met', '–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞');
            
            $this->testResults['activityReasonActive'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['activityReasonActive'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
     */
    private function testActivityReasonForInactiveProduct()
    {
        echo "üìç –¢–µ—Å—Ç: –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $productData = [
                'visibility' => 'HIDDEN',
                'state' => 'draft'
            ];
            $stockData = ['present' => 0];
            $priceData = [];
            
            $reason = $this->checker->getActivityReason($productData, $stockData, $priceData);
            
            $this->assert(strpos($reason, 'Product is inactive:') !== false, '–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
            $this->assert(strpos($reason, 'visibility is \'HIDDEN\'') !== false, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å visibility');
            $this->assert(strpos($reason, 'state is \'draft\'') !== false, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å state');
            $this->assert(strpos($reason, 'stock is 0') !== false, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏');
            $this->assert(strpos($reason, 'pricing information missing') !== false, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ü–µ–Ω–∞–º–∏');
            
            // –¢–µ—Å—Ç —Å –æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π
            $productData = array_merge($this->validProductData, ['visibility' => 'ARCHIVED']);
            $reason = $this->checker->getActivityReason($productData, $this->validStockData, $this->validPriceData);
            
            $this->assert(strpos($reason, 'visibility is \'ARCHIVED\'') !== false, '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å visibility');
            $this->assert(strpos($reason, 'state is') === false, '–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º —Å state');
            
            $this->testResults['activityReasonInactive'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['activityReasonInactive'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function testBatchProcessingMixedProducts()
    {
        echo "üìç –¢–µ—Å—Ç: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $products = [
                'ACTIVE_001' => [
                    'product' => $this->validProductData,
                    'stock' => $this->validStockData,
                    'price' => $this->validPriceData
                ],
                'INACTIVE_001' => [
                    'product' => array_merge($this->validProductData, ['visibility' => 'HIDDEN']),
                    'stock' => $this->validStockData,
                    'price' => $this->validPriceData
                ],
                'INACTIVE_002' => [
                    'product' => $this->validProductData,
                    'stock' => ['present' => 0],
                    'price' => $this->validPriceData
                ]
            ];
            
            $results = $this->checker->batchCheckActivity($products);
            
            $this->assert(count($results) === 3, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ 3 —Ç–æ–≤–∞—Ä–∞');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            $this->assert($results['ACTIVE_001']['is_active'] === true, 'ACTIVE_001 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω');
            $this->assert($results['ACTIVE_001']['reason'] === 'Product is active - all criteria met', '–ü—Ä–∏—á–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π');
            $this->assert($results['ACTIVE_001']['criteria']['visibility_ok'] === true, '–ö—Ä–∏—Ç–µ—Ä–∏–π visibility –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω');
            $this->assert($results['ACTIVE_001']['criteria']['state_ok'] === true, '–ö—Ä–∏—Ç–µ—Ä–∏–π state –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω');
            $this->assert($results['ACTIVE_001']['criteria']['stock_ok'] === true, '–ö—Ä–∏—Ç–µ—Ä–∏–π stock –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω');
            $this->assert($results['ACTIVE_001']['criteria']['pricing_ok'] === true, '–ö—Ä–∏—Ç–µ—Ä–∏–π pricing –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            $this->assert($results['INACTIVE_001']['is_active'] === false, 'INACTIVE_001 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
            $this->assert($results['INACTIVE_001']['criteria']['visibility_ok'] === false, '–ö—Ä–∏—Ç–µ—Ä–∏–π visibility –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω');
            
            $this->assert($results['INACTIVE_002']['is_active'] === false, 'INACTIVE_002 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
            $this->assert($results['INACTIVE_002']['criteria']['stock_ok'] === false, '–ö—Ä–∏—Ç–µ—Ä–∏–π stock –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            foreach ($results as $productId => $result) {
                $this->assert(isset($result['is_active']), "–ü–æ–ª–µ is_active –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è {$productId}");
                $this->assert(isset($result['reason']), "–ü–æ–ª–µ reason –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è {$productId}");
                $this->assert(isset($result['checked_at']), "–ü–æ–ª–µ checked_at –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è {$productId}");
                $this->assert(isset($result['criteria']), "–ü–æ–ª–µ criteria –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è {$productId}");
                $this->assert(is_string($result['checked_at']), "–ü–æ–ª–µ checked_at –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è {$productId}");
            }
            
            $this->testResults['batchProcessingMixed'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['batchProcessingMixed'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function testBatchProcessingEmptyProducts()
    {
        echo "üìç –¢–µ—Å—Ç: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $results = $this->checker->batchCheckActivity([]);
            
            $this->assert(is_array($results), '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
            $this->assert(empty($results), '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º');
            
            // –¢–µ—Å—Ç —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            $products = [
                'INCOMPLETE_001' => [
                    'product' => ['visibility' => 'VISIBLE'], // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç state
                    'stock' => [], // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç present
                    'price' => [] // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç price
                ],
                'INCOMPLETE_002' => [
                    'product' => [], // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                    // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç stock –∏ price
                ]
            ];
            
            $results = $this->checker->batchCheckActivity($products);
            
            $this->assert(count($results) === 2, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ 2 —Ç–æ–≤–∞—Ä–∞ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
            
            foreach ($results as $result) {
                $this->assert($result['is_active'] === false, '–¢–æ–≤–∞—Ä—ã —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã');
                $this->assert(strpos($result['reason'], 'Product is inactive:') !== false, '–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
            }
            
            $this->testResults['batchProcessingEmpty'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['batchProcessingEmpty'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤
     */
    private function testConfigurationWithCustomThreshold()
    {
        echo "üìç –¢–µ—Å—Ç: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $checker = new ProductActivityChecker(['min_stock_threshold' => 5]);
            
            // –¢–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ = 3 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ = 5
            $stockData = ['present' => 3];
            $isActive = $checker->isProductActive($this->validProductData, $stockData, $this->validPriceData);
            
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞');
            
            // –¢–æ–≤–∞—Ä —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ = 6 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ = 5
            $stockData = ['present' => 6];
            $isActive = $checker->isProductActive($this->validProductData, $stockData, $this->validPriceData);
            
            $this->assert($isActive === true, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞—Ç–∫–∞—Ö –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞');
            
            // –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            $config = $checker->getConfig();
            $this->assert($config['min_stock_threshold'] === 5, '–ü–æ—Ä–æ–≥ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 5');
            
            $this->testResults['configurationThreshold'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['configurationThreshold'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
     */
    private function testConfigurationWithPricingNotRequired()
    {
        echo "üìç –¢–µ—Å—Ç: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ü–µ–Ω\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $checker = new ProductActivityChecker(['require_pricing' => false]);
            
            $isActive = $checker->isProductActive($this->validProductData, $this->validStockData, []);
            
            $this->assert($isActive === true, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –∫–æ–≥–¥–∞ —Ü–µ–Ω—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
            
            // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            $checker->updateConfig(['required_visibility' => 'ALL']);
            $config = $checker->getConfig();
            $this->assert($config['require_pricing'] === false, '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ require_pricing –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è false');
            $this->assert($config['required_visibility'] === 'ALL', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ required_visibility –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            
            $this->testResults['configurationPricing'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['configurationPricing'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
     */
    private function testEdgeCasesWithMissingFields()
    {
        echo "üìç –¢–µ—Å—Ç: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª–µ–º visibility
            $productData = ['state' => 'processed'];
            $isActive = $this->checker->isProductActive($productData, $this->validStockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ visibility');
            
            $reason = $this->checker->getActivityReason($productData, $this->validStockData, $this->validPriceData);
            $this->assert(strpos($reason, 'visibility is \'unknown\'') !== false, '–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é visibility');
            
            // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª–µ–º state
            $productData = ['visibility' => 'VISIBLE'];
            $isActive = $this->checker->isProductActive($productData, $this->validStockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ state');
            
            $reason = $this->checker->getActivityReason($productData, $this->validStockData, $this->validPriceData);
            $this->assert(strpos($reason, 'state is \'unknown\'') !== false, '–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π state');
            
            // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª–µ–º present –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö
            $stockData = ['reserved' => 2];
            $isActive = $this->checker->isProductActive($this->validProductData, $stockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—è present');
            
            $this->testResults['edgeCasesMissingFields'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['edgeCasesMissingFields'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
     */
    private function testEdgeCasesWithInvalidValues()
    {
        echo "üìç –¢–µ—Å—Ç: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
            $stockData = ['present' => -5];
            $isActive = $this->checker->isProductActive($this->validProductData, $stockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö');
            
            // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            $priceData = ['price' => -10.00, 'old_price' => -20.00];
            $isActive = $this->checker->isProductActive($this->validProductData, $this->validStockData, $priceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω–∞—Ö');
            
            // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
            $productData = [
                'visibility' => '',
                'state' => ''
            ];
            $isActive = $this->checker->isProductActive($productData, $this->validStockData, $this->validPriceData);
            $this->assert($isActive === false, '–¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö');
            
            $this->testResults['edgeCasesInvalidValues'] = ['status' => 'PASS', 'message' => '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã'];
            
        } catch (Exception $e) {
            $this->testResults['edgeCasesInvalidValues'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –¢–µ—Å—Ç: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –±–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
     */
    private function testPerformanceWithLargeBatch()
    {
        echo "üìç –¢–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –±–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π\n";
        echo "-" . str_repeat("-", 50) . "\n";
        
        try {
            $products = [];
            
            // –°–æ–∑–¥–∞–µ–º 100 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            for ($i = 1; $i <= 100; $i++) {
                $products["PERF_TEST_{$i}"] = [
                    'product' => array_merge($this->validProductData, ['product_id' => "PERF_TEST_{$i}"]),
                    'stock' => $this->validStockData,
                    'price' => $this->validPriceData
                ];
            }
            
            $startTime = microtime(true);
            $results = $this->checker->batchCheckActivity($products);
            $endTime = microtime(true);
            
            $executionTime = $endTime - $startTime;
            
            $this->assert(count($results) === 100, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ 100 —Ç–æ–≤–∞—Ä–æ–≤');
            $this->assert($executionTime < 1.0, '–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            foreach ($results as $result) {
                $this->assert($result['is_active'] === true, '–í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã');
                $this->assert($result['reason'] === 'Product is active - all criteria met', '–ü—Ä–∏—á–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π');
            }
            
            // –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            $initialMemory = memory_get_usage();
            
            for ($i = 1; $i <= 50; $i++) {
                $products["MEMORY_TEST_{$i}"] = [
                    'product' => $this->validProductData,
                    'stock' => $this->validStockData,
                    'price' => $this->validPriceData
                ];
            }
            
            $this->checker->batchCheckActivity($products);
            
            $finalMemory = memory_get_usage();
            $memoryIncrease = $finalMemory - $initialMemory;
            
            $this->assert($memoryIncrease < 5 * 1024 * 1024, '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (–º–µ–Ω–µ–µ 5MB)');
            
            $this->testResults['performanceLargeBatch'] = ['status' => 'PASS', 'message' => "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 100 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {$executionTime} —Å–µ–∫"];
            
        } catch (Exception $e) {
            $this->testResults['performanceLargeBatch'] = ['status' => 'FAIL', 'message' => $e->getMessage()];
        }
        
        echo "\n";
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
     */
    private function assert($condition, $message)
    {
        if (!$condition) {
            throw new Exception("Assertion failed: " . $message);
        }
        echo "‚úÖ " . $message . "\n";
    }

    /**
     * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private function printResults()
    {
        echo "üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–õ–ê–°–°–ê ProductActivityChecker\n";
        echo "=" . str_repeat("=", 70) . "\n";
        
        $passed = 0;
        $failed = 0;
        
        foreach ($this->testResults as $testName => $result) {
            $status = $result['status'] === 'PASS' ? '‚úÖ' : '‚ùå';
            echo "{$status} {$testName}: {$result['message']}\n";
            
            if ($result['status'] === 'PASS') {
                $passed++;
            } else {
                $failed++;
            }
        }
        
        echo "\nüìä –ò–¢–û–ì–û:\n";
        echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$passed}\n";
        echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$failed}\n";
        echo "üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " . round(($passed / ($passed + $failed)) * 100, 1) . "%\n";
        
        echo "\nüìã –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:\n";
        echo "  ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n";
        echo "  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è visibility (VISIBLE)\n";
        echo "  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è state (processed)\n";
        echo "  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ (present > 0)\n";
        echo "  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è —Ü–µ–Ω (price > 0 –∏–ª–∏ old_price > 0)\n";
        echo "  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n";
        echo "  ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n";
        echo "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n";
        echo "  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤\n";
        echo "  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        
        echo "\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú:\n";
        echo "  ‚úÖ Requirement 3.1: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤\n";
        echo "  ‚úÖ Requirement 3.1: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n";
        echo "  ‚úÖ Requirement 3.1: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n";
        
        if ($failed === 0) {
            echo "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
            echo "–ö–ª–∞—Å—Å ProductActivityChecker –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n";
            echo "–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞.\n";
        } else {
            echo "\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!\n";
            echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {$failed} –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤.\n";
        }
        
        echo "\n" . str_repeat("=", 70) . "\n";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (basename(__FILE__) == basename($_SERVER['SCRIPT_NAME'])) {
    try {
        $test = new ProductActivityCheckerTest();
        $test->runAllTests();
    } catch (Exception $e) {
        echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
    }
}