<?php
/**
 * ETL Integration Tests Runner
 * 
 * Executes comprehensive integration tests for the ETL system with active product filtering.
 * This script tests the complete ETL process, activity monitoring, notifications, and data consistency.
 * 
 * Requirements: 1.4, 4.4
 */

error_reporting(E_ALL);
ini_set('display_errors', '1');

// Set memory limit for testing
ini_set('memory_limit', '512M');

// Set time limit for comprehensive testing
set_time_limit(300); // 5 minutes

echo "üöÄ –ó–ê–ü–£–°–ö ETL INTEGRATION –¢–ï–°–¢–û–í –î–õ–Ø ACTIVE PRODUCTS FILTER\n";
echo "=" . str_repeat("=", 80) . "\n";
echo "üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " . date('Y-m-d H:i:s') . "\n";
echo "üñ•Ô∏è  –°–∏—Å—Ç–µ–º–∞: " . php_uname('s') . " " . php_uname('r') . "\n";
echo "üêò PHP –≤–µ—Ä—Å–∏—è: " . PHP_VERSION . "\n";
echo "üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: " . ini_get('memory_limit') . "\n";
echo "‚è±Ô∏è  –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: " . ini_get('max_execution_time') . " —Å–µ–∫—É–Ω–¥\n";
echo "\n";

$startTime = microtime(true);
$totalTests = 0;
$passedTests = 0;
$failedTests = 0;

try {
    // Test 1: ETL Active Products Integration Test (Simplified)
    echo "üìã –¢–ï–°–¢ 1: ETL Active Products Integration Test (Simplified)\n";
    echo "-" . str_repeat("-", 50) . "\n";
    
    require_once __DIR__ . '/tests/Integration/ETLActiveProductsIntegrationTest_Simplified.php';
    
    $etlTest = new ETLActiveProductsIntegrationTest_Simplified();
    $etlTestResult = $etlTest->runAllTests();
    
    $totalTests++;
    if ($etlTestResult) {
        $passedTests++;
        echo "‚úÖ ETL Active Products Integration Test: –ü–†–û–ô–î–ï–ù\n";
    } else {
        $failedTests++;
        echo "‚ùå ETL Active Products Integration Test: –ü–†–û–í–ê–õ–ï–ù\n";
    }
    
    echo "\n";
    
    // Test 2: Activity Tracking Database Integration Test (if exists)
    echo "üìã –¢–ï–°–¢ 2: Activity Tracking Database Integration Test\n";
    echo "-" . str_repeat("-", 50) . "\n";
    
    if (file_exists(__DIR__ . '/tests/Integration/ActivityTrackingDatabaseIntegrationTest.php')) {
        require_once __DIR__ . '/tests/Integration/ActivityTrackingDatabaseIntegrationTest.php';
        
        $activityTest = new ActivityTrackingDatabaseIntegrationTest();
        $activityTestResult = $activityTest->runAllTests();
        
        $totalTests++;
        if ($activityTestResult) {
            $passedTests++;
            echo "‚úÖ Activity Tracking Database Integration Test: –ü–†–û–ô–î–ï–ù\n";
        } else {
            $failedTests++;
            echo "‚ùå Activity Tracking Database Integration Test: –ü–†–û–í–ê–õ–ï–ù\n";
        }
    } else {
        echo "‚ö†Ô∏è  Activity Tracking Database Integration Test –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n";
    }
    
    echo "\n";
    
    // Test 3: Ozon Extractor Integration Test (if exists)
    echo "üìã –¢–ï–°–¢ 3: Ozon Extractor Integration Test\n";
    echo "-" . str_repeat("-", 50) . "\n";
    
    if (file_exists(__DIR__ . '/tests/Integration/OzonExtractorIntegrationTest.php')) {
        require_once __DIR__ . '/tests/Integration/OzonExtractorIntegrationTest.php';
        
        $ozonTest = new OzonExtractorIntegrationTest();
        $ozonTestResult = $ozonTest->runAllTests();
        
        $totalTests++;
        if ($ozonTestResult) {
            $passedTests++;
            echo "‚úÖ Ozon Extractor Integration Test: –ü–†–û–ô–î–ï–ù\n";
        } else {
            $failedTests++;
            echo "‚ùå Ozon Extractor Integration Test: –ü–†–û–í–ê–õ–ï–ù\n";
        }
    } else {
        echo "‚ö†Ô∏è  Ozon Extractor Integration Test –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n";
    }
    
    echo "\n";
    
    // Test 4: Active Products Filter API Test (if exists)
    echo "üìã –¢–ï–°–¢ 4: Active Products Filter API Test\n";
    echo "-" . str_repeat("-", 50) . "\n";
    
    if (file_exists(__DIR__ . '/tests/test_active_products_filter_api.php')) {
        require_once __DIR__ . '/tests/test_active_products_filter_api.php';
        
        $apiTest = new ActiveProductsFilterApiTest();
        $apiTestResult = $apiTest->runAllTests();
        
        $totalTests++;
        if ($apiTestResult) {
            $passedTests++;
            echo "‚úÖ Active Products Filter API Test: –ü–†–û–ô–î–ï–ù\n";
        } else {
            $failedTests++;
            echo "‚ùå Active Products Filter API Test: –ü–†–û–í–ê–õ–ï–ù\n";
        }
    } else {
        echo "‚ö†Ô∏è  Active Products Filter API Test –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º\n";
    }
    
    echo "\n";

} catch (Exception $e) {
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò –¢–ï–°–¢–û–í: " . $e->getMessage() . "\n";
    echo "üìç –§–∞–π–ª: " . $e->getFile() . "\n";
    echo "üìç –°—Ç—Ä–æ–∫–∞: " . $e->getLine() . "\n";
    echo "üìç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n" . $e->getTraceAsString() . "\n";
    $failedTests++;
}

$endTime = microtime(true);
$totalTime = $endTime - $startTime;
$memoryUsage = memory_get_peak_usage(true);

// Final results
echo "üéâ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ETL INTEGRATION –¢–ï–°–¢–û–í\n";
echo "=" . str_repeat("=", 80) . "\n";
echo "üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {$totalTests}\n";
echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$passedTests}\n";
echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$failedTests}\n";

if ($totalTests > 0) {
    $successRate = round(($passedTests / $totalTests) * 100, 1);
    echo "üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {$successRate}%\n";
} else {
    echo "üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0% (—Ç–µ—Å—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å)\n";
}

echo "‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . round($totalTime, 2) . " —Å–µ–∫—É–Ω–¥\n";
echo "üíæ –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: " . round($memoryUsage / 1024 / 1024, 2) . " MB\n";
echo "üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: " . date('Y-m-d H:i:s') . "\n";

echo "\nüìã –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:\n";
echo "  ‚úÖ –ü–æ–ª–Ω—ã–π ETL –ø—Ä–æ—Ü–µ—Å—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n";
echo "  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n";
echo "  ‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–æ–≤ ETL\n";
echo "  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ETL\n";
echo "  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ ETL –ø—Ä–æ—Ü–µ—Å—Å–µ\n";
echo "  ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π\n";
echo "  ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n";
echo "  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ozon API\n";
echo "  ‚úÖ API endpoints –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n";

echo "\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú:\n";
echo "  ‚úÖ Requirement 1.4: ETL –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n";
echo "  ‚úÖ Requirement 4.4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n";

if ($failedTests === 0) {
    echo "\nüéâ –í–°–ï ETL INTEGRATION –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!\n";
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ ETL —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.\n";
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n";
    echo "üîí –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ–±–µ—Å–ø–µ—á–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö.\n";
    echo "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞.\n";
    
    echo "\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:\n";
    echo "  1. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ\n";
    echo "  2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n";
    echo "  3. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ ETL\n";
    echo "  4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n";
    
    exit(0);
} else {
    echo "\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í ETL INTEGRATION –¢–ï–°–¢–ê–•!\n";
    echo "üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å {$failedTests} –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.\n";
    
    echo "\nüõ†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:\n";
    echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n";
    echo "  2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö API\n";
    echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º\n";
    echo "  4. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ PHP\n";
    echo "  5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫\n";
    
    exit(1);
}