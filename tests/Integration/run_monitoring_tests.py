#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö mock'–æ–≤.
"""

import unittest
import sys
import os
from datetime import datetime, timedelta, date
from unittest.mock import Mock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sync_monitor import SyncMonitor, HealthStatus, AnomalyType, Anomaly
from alert_manager import AlertManager, Alert, AlertLevel, NotificationType


class TestMonitoringCore(unittest.TestCase):
    """–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        self.mock_cursor = Mock()
        self.mock_connection = Mock()
        
        self.monitor = SyncMonitor(self.mock_cursor, self.mock_connection)
        self.alert_manager = AlertManager()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.alert_manager.config.email_enabled = False
        self.alert_manager.config.telegram_enabled = False
    
    def test_sync_monitor_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SyncMonitor."""
        self.assertIsNotNone(self.monitor)
        self.assertIsInstance(self.monitor.thresholds, dict)
        self.assertIn('data_freshness_hours', self.monitor.thresholds)
    
    def test_alert_manager_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AlertManager."""
        self.assertIsNotNone(self.alert_manager)
        self.assertIsInstance(self.alert_manager.alert_cooldowns, dict)
    
    def test_anomaly_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–∏."""
        anomaly = Anomaly(
            type=AnomalyType.ZERO_STOCK_SPIKE,
            severity='high',
            source='Ozon',
            description='Test anomaly',
            affected_records=100,
            detected_at=datetime.now(),
            details={'test': 'data'}
        )
        
        self.assertEqual(anomaly.type, AnomalyType.ZERO_STOCK_SPIKE)
        self.assertEqual(anomaly.severity, 'high')
        self.assertEqual(anomaly.source, 'Ozon')
        self.assertEqual(anomaly.affected_records, 100)
    
    def test_alert_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∞–ª–µ—Ä—Ç–∞."""
        alert = Alert(
            level=AlertLevel.WARNING,
            type=NotificationType.STALE_DATA,
            title='Test Alert',
            message='Test message',
            source='Wildberries'
        )
        
        self.assertEqual(alert.level, AlertLevel.WARNING)
        self.assertEqual(alert.type, NotificationType.STALE_DATA)
        self.assertEqual(alert.title, 'Test Alert')
        self.assertEqual(alert.source, 'Wildberries')
    
    def test_health_status_enum(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è."""
        self.assertEqual(HealthStatus.HEALTHY.value, 'healthy')
        self.assertEqual(HealthStatus.WARNING.value, 'warning')
        self.assertEqual(HealthStatus.CRITICAL.value, 'critical')
        self.assertEqual(HealthStatus.UNKNOWN.value, 'unknown')
    
    def test_anomaly_type_enum(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π."""
        self.assertEqual(AnomalyType.ZERO_STOCK_SPIKE.value, 'zero_stock_spike')
        self.assertEqual(AnomalyType.MASSIVE_STOCK_CHANGE.value, 'massive_stock_change')
        self.assertEqual(AnomalyType.MISSING_PRODUCTS.value, 'missing_products')
        self.assertEqual(AnomalyType.DUPLICATE_RECORDS.value, 'duplicate_records')
        self.assertEqual(AnomalyType.NEGATIVE_STOCK.value, 'negative_stock')
        self.assertEqual(AnomalyType.STALE_DATA.value, 'stale_data')
        self.assertEqual(AnomalyType.API_ERRORS.value, 'api_errors')
    
    def test_alert_level_enum(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –∞–ª–µ—Ä—Ç–æ–≤."""
        self.assertEqual(AlertLevel.INFO.value, 'info')
        self.assertEqual(AlertLevel.WARNING.value, 'warning')
        self.assertEqual(AlertLevel.ERROR.value, 'error')
        self.assertEqual(AlertLevel.CRITICAL.value, 'critical')
    
    def test_notification_type_enum(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.assertEqual(NotificationType.SYNC_FAILURE.value, 'sync_failure')
        self.assertEqual(NotificationType.STALE_DATA.value, 'stale_data')
        self.assertEqual(NotificationType.ANOMALY_DETECTED.value, 'anomaly_detected')
        self.assertEqual(NotificationType.SYSTEM_HEALTH.value, 'system_health')
        self.assertEqual(NotificationType.WEEKLY_REPORT.value, 'weekly_report')
        self.assertEqual(NotificationType.API_ERROR.value, 'api_error')
    
    def test_threshold_configuration(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.assertGreater(self.monitor.thresholds['data_freshness_hours'], 0)
        self.assertGreater(self.monitor.thresholds['success_rate_threshold'], 0)
        self.assertGreater(self.monitor.thresholds['massive_change_threshold'], 0)
        
        # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏
        original_threshold = self.monitor.thresholds['data_freshness_hours']
        self.monitor.thresholds['data_freshness_hours'] = 12
        
        self.assertEqual(self.monitor.thresholds['data_freshness_hours'], 12)
        self.assertNotEqual(self.monitor.thresholds['data_freshness_hours'], original_threshold)
    
    def test_cooldown_configuration(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cooldown –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cooldown –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
        self.assertIn(NotificationType.SYNC_FAILURE, self.alert_manager.alert_cooldowns)
        self.assertIn(NotificationType.STALE_DATA, self.alert_manager.alert_cooldowns)
        
        # –ò–∑–º–µ–Ω—è–µ–º cooldown
        original_cooldown = self.alert_manager.alert_cooldowns[NotificationType.SYNC_FAILURE]
        new_cooldown = timedelta(minutes=30)
        self.alert_manager.alert_cooldowns[NotificationType.SYNC_FAILURE] = new_cooldown
        
        self.assertEqual(
            self.alert_manager.alert_cooldowns[NotificationType.SYNC_FAILURE], 
            new_cooldown
        )
        self.assertNotEqual(
            self.alert_manager.alert_cooldowns[NotificationType.SYNC_FAILURE], 
            original_cooldown
        )
    
    def test_alert_should_send_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞."""
        alert = Alert(
            level=AlertLevel.ERROR,
            type=NotificationType.SYNC_FAILURE,
            title='Test Alert',
            message='Test message',
            source='Ozon'
        )
        
        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è
        should_send = self.alert_manager._should_send_alert(alert)
        self.assertTrue(should_send)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.alert_manager._update_sent_alerts(alert)
        
        # –¢–µ–ø–µ—Ä—å –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–∑-–∑–∞ cooldown
        should_send = self.alert_manager._should_send_alert(alert)
        self.assertFalse(should_send)
    
    def test_email_body_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–æ–æ–±—â–µ–Ω–∏—è."""
        alert = Alert(
            level=AlertLevel.CRITICAL,
            type=NotificationType.ANOMALY_DETECTED,
            title='Critical Issue',
            message='System has critical issues',
            source='System',
            details={'error_count': 50}
        )
        
        body = self.alert_manager._format_email_body(alert)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.assertIn('–ê–õ–ï–†–¢ –°–ò–°–¢–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò', body)
        self.assertIn('CRITICAL', body)
        self.assertIn('anomaly_detected', body)
        self.assertIn('System has critical issues', body)
        self.assertIn('error_count: 50', body)
    
    def test_telegram_message_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏—è."""
        alert = Alert(
            level=AlertLevel.WARNING,
            type=NotificationType.STALE_DATA,
            title='Data is Stale',
            message='Data has not been updated for 8 hours',
            source='Ozon'
        )
        
        message = self.alert_manager._format_telegram_message(alert)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self.assertIn('‚ö†Ô∏è', message)  # –≠–º–æ–¥–∑–∏ –¥–ª—è WARNING
        self.assertIn('*Data is Stale*', message)
        self.assertIn('*–£—Ä–æ–≤–µ–Ω—å:* WARNING', message)
        self.assertIn('*–ò—Å—Ç–æ—á–Ω–∏–∫:* Ozon', message)
        self.assertIn('Data has not been updated', message)


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestMonitoringCore)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"   üö´ –û—à–∏–±–∫–∏: {len(result.errors)}")
    print(f"   üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.testsRun} —Ç–µ—Å—Ç–æ–≤")
    
    if result.failures:
        print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:")
        for test, traceback in result.failures:
            print(f"   - {test}")
    
    if result.errors:
        print(f"\nüö´ –¢–µ—Å—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for test, traceback in result.errors:
            print(f"   - {test}")
    
    success_rate = (result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100
    print(f"\nüéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif success_rate >= 70:
        print("üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    
    return result.wasSuccessful()


if __name__ == '__main__':
    success = run_tests()
    sys.exit(0 if success else 1)