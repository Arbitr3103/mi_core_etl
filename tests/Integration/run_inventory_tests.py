#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö unit —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.

–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è:
- InventorySyncService (–º–µ—Ç–æ–¥—ã API, –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∑–∞–ø–∏—Å—å –≤ –ë–î)
- InventoryDataValidator (–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö)
- Integration —Ç–µ—Å—Ç—ã (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import unittest
import sys
import os
from io import StringIO

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from test_inventory_sync_service import *
from test_inventory_data_validator import *
from test_inventory_integration import *


class TestResult:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self):
        self.total_tests = 0
        self.passed_tests = 0
        self.failed_tests = 0
        self.error_tests = 0
        self.skipped_tests = 0
        self.failures = []
        self.errors = []
    
    def add_result(self, result):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.total_tests += result.testsRun
        self.failed_tests += len(result.failures)
        self.error_tests += len(result.errors)
        self.skipped_tests += len(result.skipped)
        self.passed_tests = self.total_tests - self.failed_tests - self.error_tests - self.skipped_tests
        
        self.failures.extend(result.failures)
        self.errors.extend(result.errors)
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        print("\n" + "="*80)
        print("–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*80)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:     {self.total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ:         {self.passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:        {self.failed_tests}")
        print(f"–û—à–∏–±–æ–∫:           {self.error_tests}")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ:        {self.skipped_tests}")
        print("-"*80)
        
        if self.passed_tests == self.total_tests:
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´")
            
            if self.failures:
                print(f"\n–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã ({len(self.failures)}):")
                for i, (test, traceback) in enumerate(self.failures[:5], 1):
                    print(f"  {i}. {test}")
                if len(self.failures) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(self.failures) - 5} —Ç–µ—Å—Ç–æ–≤")
            
            if self.errors:
                print(f"\n–¢–µ—Å—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ ({len(self.errors)}):")
                for i, (test, traceback) in enumerate(self.errors[:5], 1):
                    print(f"  {i}. {test}")
                if len(self.errors) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(self.errors) - 5} —Ç–µ—Å—Ç–æ–≤")
        
        print("="*80)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return 0 if self.passed_tests == self.total_tests else 1


def run_test_suite(test_class, suite_name):
    """
    –ó–∞–ø—É—Å–∫ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
    
    Args:
        test_class: –ö–ª–∞—Å—Å —Å —Ç–µ—Å—Ç–∞–º–∏
        suite_name: –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
        
    Returns:
        unittest.TestResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    """
    print(f"\n{'='*60}")
    print(f"–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í: {suite_name}")
    print(f"{'='*60}")
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(test_class)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    stream = StringIO()
    runner = unittest.TextTestRunner(
        stream=stream,
        verbosity=2,
        buffer=True
    )
    
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output = stream.getvalue()
    print(output)
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —ç—Ç–æ–º—É –Ω–∞–±–æ—Ä—É
    total = result.testsRun
    failed = len(result.failures)
    errors = len(result.errors)
    skipped = len(result.skipped)
    passed = total - failed - errors - skipped
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç {suite_name}:")
    print(f"  –í—Å–µ–≥–æ: {total}, –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}, –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}, –û—à–∏–±–æ–∫: {errors}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    
    if failed > 0 or errors > 0:
        print("  ‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
    else:
        print("  ‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´")
    
    return result


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üß™ –ó–ê–ü–£–°–ö UNIT –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –û–°–¢–ê–¢–ö–û–í")
    print("üìÖ –î–∞—Ç–∞:", "06 —è–Ω–≤–∞—Ä—è 2025")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    import logging
    logging.basicConfig(level=logging.CRITICAL)  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    overall_result = TestResult()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤
    test_suites = [
        # –¢–µ—Å—Ç—ã –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –ë–î
        (TestDatabaseMethods, "–ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"),
        
        # –¢–µ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API
        (TestAPIDataRetrieval, "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"),
        
        # –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        (TestDataValidation, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"),
        
        # –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π
        (TestDataAnomalies, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö"),
        
        # –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
        (TestInventoryRecord, "–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤"),
        (TestSyncResult, "–ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"),
        
        # –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        (TestValidationMethods, "–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
        (TestFieldValidation, "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"),
        (TestQuantityValidation, "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"),
        (TestStockLogicValidation, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤"),
        (TestStockTypeValidation, "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Å–∫–ª–∞–¥–æ–≤"),
        (TestWarehouseNameValidation, "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–∫–ª–∞–¥–æ–≤"),
        (TestSnapshotDateValidation, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å–Ω–∏–º–∫–∞"),
        (TestProductExistenceValidation, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"),
        
        # –¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        (TestValidationResult, "–ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
        (TestValidationIssue, "–ú–æ–¥–µ–ª—å –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"),
        
        # Integration —Ç–µ—Å—Ç—ã
        (TestOzonIntegrationFlow, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ozon API"),
        (TestWildberriesIntegrationFlow, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Wildberries API"),
        (TestFullSyncIntegration, "–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
        (TestDataFreshnessIntegration, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"),
        (TestStatisticsIntegration, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤"),
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
    for test_class, suite_name in test_suites:
        try:
            result = run_test_suite(test_class, suite_name)
            overall_result.add_result(result)
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {suite_name}: {e}")
            overall_result.error_tests += 1
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
    exit_code = overall_result.print_summary()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if exit_code == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.")
        print("\nüìã –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("  ‚úÖ –ú–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API Ozon –∏ Wildberries")
        print("  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
        print("  ‚úÖ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
        print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö")
        print("  ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö.")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.")
        print("\nüîß –î–ª—è –æ—Ç–ª–∞–¥–∫–∏:")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç: python -m unittest test_inventory_sync_service.TestClass.test_method")
        print("   - –í–∫–ª—é—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏: logging.basicConfig(level=logging.DEBUG)")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î")
    
    return exit_code


if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)