#!/usr/bin/env php
<?php
/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
 * –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ 7: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */

require_once __DIR__ . '/../config.php';

class InventoryPerformanceMonitor {
    private $pdo;
    private $results = [];
    
    public function __construct() {
        $this->pdo = getDatabaseConnection();
    }
    
    public function run($args = []) {
        echo "=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ ===\n\n";
        
        $tests = [
            'database_connection' => '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            'table_structure' => '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü',
            'index_analysis' => '–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤',
            'query_performance' => '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
            'cache_performance' => '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞',
            'api_performance' => '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API'
        ];
        
        foreach ($tests as $test => $description) {
            echo "üîç $description...\n";
            $this->runTest($test);
            echo "\n";
        }
        
        $this->generateReport();
    }
    
    private function runTest($test) {
        $start_time = microtime(true);
        
        try {
            switch ($test) {
                case 'database_connection':
                    $this->testDatabaseConnection();
                    break;
                case 'table_structure':
                    $this->analyzeTableStructure();
                    break;
                case 'index_analysis':
                    $this->analyzeIndexes();
                    break;
                case 'query_performance':
                    $this->testQueryPerformance();
                    break;
                case 'cache_performance':
                    $this->testCachePerformance();
                    break;
                case 'api_performance':
                    $this->testApiPerformance();
                    break;
            }
            
            $execution_time = microtime(true) - $start_time;
            $this->results[$test] = [
                'status' => 'success',
                'execution_time' => $execution_time,
                'message' => '–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
            ];
            
        } catch (Exception $e) {
            $execution_time = microtime(true) - $start_time;
            $this->results[$test] = [
                'status' => 'error',
                'execution_time' => $execution_time,
                'message' => $e->getMessage()
            ];
            echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
        }
    }
    
    private function testDatabaseConnection() {
        $start = microtime(true);
        $stmt = $this->pdo->query("SELECT 1");
        $connection_time = microtime(true) - $start;
        
        echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: " . round($connection_time * 1000, 2) . " –º—Å\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é MySQL
        $version_stmt = $this->pdo->query("SELECT VERSION() as version");
        $version = $version_stmt->fetch()['version'];
        echo "üìä –í–µ—Ä—Å–∏—è MySQL: $version\n";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        $this->checkMySQLSettings();
    }
    
    private function checkMySQLSettings() {
        $important_settings = [
            'innodb_buffer_pool_size',
            'query_cache_size',
            'tmp_table_size',
            'max_heap_table_size'
        ];
        
        foreach ($important_settings as $setting) {
            try {
                $stmt = $this->pdo->prepare("SHOW VARIABLES LIKE ?");
                $stmt->execute([$setting]);
                $result = $stmt->fetch();
                
                if ($result) {
                    echo "‚öôÔ∏è  $setting: {$result['Value']}\n";
                }
            } catch (Exception $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            }
        }
    }
    
    private function analyzeTableStructure() {
        $tables = ['inventory_data', 'dim_products', 'sku_cross_reference'];
        
        foreach ($tables as $table) {
            echo "üìã –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã $table:\n";
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                $stmt = $this->pdo->prepare("SHOW TABLES LIKE ?");
                $stmt->execute([$table]);
                
                if (!$stmt->fetch()) {
                    echo "  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
                    continue;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
                $stmt = $this->pdo->prepare("
                    SELECT 
                        TABLE_ROWS,
                        DATA_LENGTH,
                        INDEX_LENGTH,
                        (DATA_LENGTH + INDEX_LENGTH) as TOTAL_SIZE
                    FROM information_schema.TABLES 
                    WHERE TABLE_SCHEMA = DATABASE() AND TABLE_NAME = ?
                ");
                $stmt->execute([$table]);
                $info = $stmt->fetch();
                
                if ($info) {
                    echo "  üìä –°—Ç—Ä–æ–∫: " . number_format($info['TABLE_ROWS']) . "\n";
                    echo "  üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: " . $this->formatBytes($info['DATA_LENGTH']) . "\n";
                    echo "  üóÇÔ∏è  –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤: " . $this->formatBytes($info['INDEX_LENGTH']) . "\n";
                    echo "  üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: " . $this->formatBytes($info['TOTAL_SIZE']) . "\n";
                }
                
            } catch (Exception $e) {
                echo "  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . $e->getMessage() . "\n";
            }
        }
    }
    
    private function analyzeIndexes() {
        $tables = ['inventory_data', 'dim_products'];
        
        foreach ($tables as $table) {
            echo "üóÇÔ∏è  –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã $table:\n";
            
            try {
                $stmt = $this->pdo->prepare("SHOW INDEX FROM $table");
                $stmt->execute();
                $indexes = $stmt->fetchAll();
                
                $index_stats = [];
                foreach ($indexes as $index) {
                    $key_name = $index['Key_name'];
                    if (!isset($index_stats[$key_name])) {
                        $index_stats[$key_name] = [
                            'columns' => [],
                            'unique' => $index['Non_unique'] == 0,
                            'cardinality' => 0
                        ];
                    }
                    $index_stats[$key_name]['columns'][] = $index['Column_name'];
                    $index_stats[$key_name]['cardinality'] += $index['Cardinality'];
                }
                
                foreach ($index_stats as $index_name => $stats) {
                    $columns = implode(', ', $stats['columns']);
                    $unique = $stats['unique'] ? 'UNIQUE' : 'INDEX';
                    $cardinality = number_format($stats['cardinality']);
                    
                    echo "  üìå $index_name ($unique): $columns (Cardinality: $cardinality)\n";
                }
                
            } catch (Exception $e) {
                echo "  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: " . $e->getMessage() . "\n";
            }
        }
    }
    
    private function testQueryPerformance() {
        $queries = [
            'dashboard_main' => "
                SELECT 
                    i.sku,
                    i.warehouse_name,
                    SUM(i.current_stock) as total_stock,
                    CASE
                        WHEN SUM(i.current_stock) <= 5 THEN 'critical'
                        WHEN SUM(i.current_stock) <= 20 THEN 'low'
                        WHEN SUM(i.current_stock) > 100 THEN 'overstock'
                        ELSE 'normal'
                    END as stock_status
                FROM inventory_data i
                WHERE i.current_stock IS NOT NULL
                GROUP BY i.sku, i.warehouse_name
                LIMIT 100
            ",
            'critical_products' => "
                SELECT i.sku, i.warehouse_name, SUM(i.current_stock) as total_stock
                FROM inventory_data i
                WHERE i.current_stock IS NOT NULL
                GROUP BY i.sku, i.warehouse_name
                HAVING SUM(i.current_stock) <= 5
                LIMIT 50
            ",
            'warehouse_summary' => "
                SELECT 
                    i.warehouse_name,
                    COUNT(DISTINCT i.sku) as total_products,
                    SUM(i.current_stock) as total_stock
                FROM inventory_data i
                WHERE i.current_stock IS NOT NULL
                GROUP BY i.warehouse_name
            ",
            'product_names_join' => "
                SELECT i.sku, dp.product_name, i.current_stock
                FROM inventory_data i
                LEFT JOIN dim_products dp ON (i.sku = dp.sku_ozon OR i.sku = dp.sku_wb)
                WHERE i.current_stock IS NOT NULL
                LIMIT 100
            "
        ];
        
        foreach ($queries as $query_name => $sql) {
            echo "üîç –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ '$query_name':\n";
            
            try {
                // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                $this->pdo->exec("SET profiling = 1");
                
                $start = microtime(true);
                $stmt = $this->pdo->prepare($sql);
                $stmt->execute();
                $results = $stmt->fetchAll();
                $execution_time = microtime(true) - $start;
                
                echo "  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . round($execution_time * 1000, 2) . " –º—Å\n";
                echo "  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: " . count($results) . "\n";
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                $explain_stmt = $this->pdo->prepare("EXPLAIN " . $sql);
                $explain_stmt->execute();
                $explain = $explain_stmt->fetchAll();
                
                foreach ($explain as $row) {
                    $key = $row['key'] ?: 'NO INDEX';
                    $rows = number_format($row['rows']);
                    echo "  üóÇÔ∏è  –¢–∞–±–ª–∏—Ü–∞: {$row['table']}, –ò–Ω–¥–µ–∫—Å: $key, –°—Ç—Ä–æ–∫: $rows\n";
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                if ($execution_time > 1.0) {
                    echo "  ‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° (>1—Å)\n";
                } elseif ($execution_time > 0.1) {
                    echo "  ‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (>100–º—Å)\n";
                } else {
                    echo "  ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n";
                }
                
            } catch (Exception $e) {
                echo "  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . $e->getMessage() . "\n";
            }
            
            echo "\n";
        }
    }
    
    private function testCachePerformance() {
        require_once __DIR__ . '/../api/inventory_cache_manager.php';
        
        $cache = getInventoryCacheManager();
        
        if (!$cache->isEnabled()) {
            echo "‚ö†Ô∏è  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n";
            return;
        }
        
        echo "üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞:\n";
        
        // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        $write_times = [];
        for ($i = 0; $i < 10; $i++) {
            $start = microtime(true);
            $cache->set("perf_test_$i", ['data' => str_repeat('x', 1000), 'timestamp' => time()]);
            $write_times[] = microtime(true) - $start;
        }
        
        $avg_write = array_sum($write_times) / count($write_times);
        echo "  ‚úçÔ∏è  –°—Ä–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: " . round($avg_write * 1000, 2) . " –º—Å\n";
        
        // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        $read_times = [];
        for ($i = 0; $i < 10; $i++) {
            $start = microtime(true);
            $cache->get("perf_test_$i");
            $read_times[] = microtime(true) - $start;
        }
        
        $avg_read = array_sum($read_times) / count($read_times);
        echo "  üìñ –°—Ä–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ: " . round($avg_read * 1000, 2) . " –º—Å\n";
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for ($i = 0; $i < 10; $i++) {
            $cache->delete("perf_test_$i");
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        $stats = $cache->getStats();
        echo "  üìä –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {$stats['total_files']}\n";
        echo "  üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {$stats['total_size_mb']} MB\n";
    }
    
    private function testApiPerformance() {
        echo "üåê –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API:\n";
        
        $api_endpoints = [
            'dashboard' => '../api/inventory-analytics.php?action=dashboard',
            'critical-products' => '../api/inventory-analytics.php?action=critical-products',
            'warehouse-summary' => '../api/inventory-analytics.php?action=warehouse-summary'
        ];
        
        foreach ($api_endpoints as $endpoint_name => $url) {
            echo "  üîó –¢–µ—Å—Ç endpoint '$endpoint_name':\n";
            
            try {
                $start = microtime(true);
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                ob_start();
                $_GET['action'] = str_replace('../api/inventory-analytics.php?action=', '', $url);
                
                include __DIR__ . '/../api/inventory-analytics.php';
                
                $response = ob_get_clean();
                $execution_time = microtime(true) - $start;
                
                $data = json_decode($response, true);
                
                echo "    ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: " . round($execution_time * 1000, 2) . " –º—Å\n";
                
                if ($data && $data['status'] === 'success') {
                    echo "    ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç\n";
                    
                    if (isset($data['metadata']['cached'])) {
                        echo "    üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: " . ($data['metadata']['cached'] ? '–î–∞' : '–ù–µ—Ç') . "\n";
                    }
                } else {
                    echo "    ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ\n";
                }
                
                // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if ($execution_time > 3.0) {
                    echo "    ‚ö†Ô∏è  –û–ß–ï–ù–¨ –ú–ï–î–õ–ï–ù–ù–û (>3—Å)\n";
                } elseif ($execution_time > 1.0) {
                    echo "    ‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û (>1—Å)\n";
                } elseif ($execution_time > 0.5) {
                    echo "    ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (>500–º—Å)\n";
                } else {
                    echo "    ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n";
                }
                
            } catch (Exception $e) {
                echo "    ‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
            }
            
            // –û—á–∏—â–∞–µ–º $_GET –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            unset($_GET['action']);
        }
    }
    
    private function generateReport() {
        echo "=== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===\n\n";
        
        $total_tests = count($this->results);
        $successful_tests = count(array_filter($this->results, function($r) { return $r['status'] === 'success'; }));
        $failed_tests = $total_tests - $successful_tests;
        
        echo "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
        echo "  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests\n";
        echo "  –£—Å–ø–µ—à–Ω—ã—Ö: $successful_tests\n";
        echo "  –ù–µ—É–¥–∞—á–Ω—ã—Ö: $failed_tests\n";
        echo "  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " . round(($successful_tests / $total_tests) * 100, 1) . "%\n\n";
        
        echo "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:\n";
        foreach ($this->results as $test => $result) {
            $status_icon = $result['status'] === 'success' ? '‚úÖ' : '‚ùå';
            $time = round($result['execution_time'] * 1000, 2);
            echo "  $status_icon $test: {$time} –º—Å\n";
        }
        
        echo "\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
        $this->generateRecommendations();
    }
    
    private function generateRecommendations() {
        $recommendations = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        foreach ($this->results as $test => $result) {
            if ($result['status'] === 'error') {
                $recommendations[] = "‚ùå –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–µ '$test': {$result['message']}";
            } elseif ($result['execution_time'] > 1.0) {
                $recommendations[] = "‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å '$test' - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É";
            }
        }
        
        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        $recommendations[] = "üìà –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏";
        $recommendations[] = "üóÇÔ∏è  –ü—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –¥–∞–Ω–Ω—ã—Ö";
        $recommendations[] = "üíæ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞";
        $recommendations[] = "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ";
        
        foreach ($recommendations as $recommendation) {
            echo "  $recommendation\n";
        }
    }
    
    private function formatBytes($bytes) {
        $units = ['B', 'KB', 'MB', 'GB'];
        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);
        
        $bytes /= pow(1024, $pow);
        
        return round($bytes, 2) . ' ' . $units[$pow];
    }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
if (php_sapi_name() === 'cli') {
    $monitor = new InventoryPerformanceMonitor();
    $args = array_slice($argv, 1);
    $monitor->run($args);
} else {
    echo "–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
}
?>