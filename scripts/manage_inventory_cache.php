#!/usr/bin/env php
<?php
/**
 * –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—á–∏—â–∞—Ç—å, –ø—Ä–æ–≥—Ä–µ–≤–∞—Ç—å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫—ç—à
 * –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ 7: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */

require_once __DIR__ . '/../config.php';
require_once __DIR__ . '/../api/inventory_cache_manager.php';

class InventoryCacheManagerCLI {
    private $cache;
    private $pdo;
    
    public function __construct() {
        $this->cache = getInventoryCacheManager();
        $this->pdo = getDatabaseConnection();
    }
    
    public function run($args) {
        if (empty($args)) {
            $this->showHelp();
            return;
        }
        
        $command = $args[0];
        
        switch ($command) {
            case 'status':
                $this->showStatus();
                break;
                
            case 'clear':
                $this->clearCache();
                break;
                
            case 'warmup':
                $this->warmupCache();
                break;
                
            case 'clean':
                $this->cleanExpired();
                break;
                
            case 'stats':
                $this->showDetailedStats();
                break;
                
            case 'test':
                $this->testCache();
                break;
                
            case 'enable':
                $this->enableCache();
                break;
                
            case 'disable':
                $this->disableCache();
                break;
                
            default:
                echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command\n";
                $this->showHelp();
        }
    }
    
    private function showHelp() {
        echo "–£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤\n\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php manage_inventory_cache.php <–∫–æ–º–∞–Ω–¥–∞>\n\n";
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
        echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫—ç—à–∞\n";
        echo "  clear     - –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à\n";
        echo "  warmup    - –ü—Ä–æ–≥—Ä–µ—Ç—å –∫—ç—à –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n";
        echo "  clean     - –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞\n";
        echo "  stats     - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n";
        echo "  test      - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫—ç—à–∞\n";
        echo "  enable    - –í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n";
        echo "  disable   - –û—Ç–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n";
        echo "\n";
    }
    
    private function showStatus() {
        echo "=== –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–∞ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ ===\n\n";
        
        $stats = $this->cache->getStats();
        
        if (!$stats['enabled']) {
            echo "‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n";
            return;
        }
        
        echo "‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n";
        echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞: {$stats['cache_dir']}\n";
        echo "‚è±Ô∏è  TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {$stats['default_ttl']} —Å–µ–∫—É–Ω–¥\n";
        echo "üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {$stats['total_files']}\n";
        echo "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {$stats['valid_files']}\n";
        echo "‚ùå –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {$stats['expired_files']}\n";
        echo "üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {$stats['total_size_mb']} MB\n";
        
        if ($stats['expired_files'] > 0) {
            echo "\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã: php manage_inventory_cache.php clean\n";
        }
        
        echo "\n";
    }
    
    private function clearCache() {
        echo "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...\n";
        
        $cleared = $this->cache->clear();
        
        if ($cleared > 0) {
            echo "‚úÖ –û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $cleared\n";
        } else {
            echo "‚ÑπÔ∏è  –ö—ç—à —É–∂–µ –ø—É—Å—Ç –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n";
        }
    }
    
    private function warmupCache() {
        echo "–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n";
        
        if (!$this->cache->isEnabled()) {
            echo "‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n";
            return;
        }
        
        try {
            $success = InventoryCacheUtils::warmupCache($this->pdo);
            
            if ($success) {
                echo "‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥—Ä–µ—Ç\n";
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ–≤–∞
                $stats = $this->cache->getStats();
                echo "üìÑ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {$stats['total_files']}\n";
                echo "üíæ –†–∞–∑–º–µ—Ä: {$stats['total_size_mb']} MB\n";
            } else {
                echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞\n";
            }
        } catch (Exception $e) {
            echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
        }
    }
    
    private function cleanExpired() {
        echo "–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞...\n";
        
        $cleaned = $this->cache->cleanExpired();
        
        if ($cleaned > 0) {
            echo "‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: $cleaned\n";
        } else {
            echo "‚ÑπÔ∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n";
        }
    }
    
    private function showDetailedStats() {
        echo "=== –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ ===\n\n";
        
        $stats = $this->cache->getStats();
        
        if (!$stats['enabled']) {
            echo "‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n";
            return;
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        echo "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n";
        echo "  –°—Ç–∞—Ç—É—Å: " . ($stats['enabled'] ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω') . "\n";
        echo "  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {$stats['cache_dir']}\n";
        echo "  TTL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {$stats['default_ttl']} —Å–µ–∫\n";
        echo "\n";
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        echo "–§–∞–π–ª—ã –∫—ç—à–∞:\n";
        echo "  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {$stats['total_files']}\n";
        echo "  –ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö: {$stats['valid_files']}\n";
        echo "  –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö: {$stats['expired_files']}\n";
        echo "  –†–∞–∑–º–µ—Ä: {$stats['total_size_bytes']} –±–∞–π—Ç ({$stats['total_size_mb']} MB)\n";
        echo "\n";
        
        // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if ($stats['total_files'] > 0) {
            $hit_rate = ($stats['valid_files'] / $stats['total_files']) * 100;
            echo "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n";
            echo "  Hit rate: " . round($hit_rate, 1) . "%\n";
            
            if ($hit_rate < 70) {
                echo "  ‚ö†Ô∏è  –ù–∏–∑–∫–∏–π hit rate, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å TTL\n";
            } elseif ($hit_rate > 95) {
                echo "  ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π hit rate\n";
            } else {
                echo "  ‚úÖ –•–æ—Ä–æ—à–∏–π hit rate\n";
            }
        }
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        $this->showCacheFiles();
        
        echo "\n";
    }
    
    private function showCacheFiles() {
        if (!$this->cache->isEnabled()) {
            return;
        }
        
        $cache_dir = $this->cache->getStats()['cache_dir'];
        $files = glob($cache_dir . '/*.cache');
        
        if (empty($files)) {
            echo "  –§–∞–π–ª—ã –∫—ç—à–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n";
            return;
        }
        
        echo "\n–î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞:\n";
        echo str_pad("–§–∞–π–ª", 30) . str_pad("–†–∞–∑–º–µ—Ä", 10) . str_pad("–°—Ç–∞—Ç—É—Å", 12) . "–ò—Å—Ç–µ–∫–∞–µ—Ç\n";
        echo str_repeat("-", 70) . "\n";
        
        foreach ($files as $file) {
            $filename = basename($file, '.cache');
            $size = filesize($file);
            $size_kb = round($size / 1024, 1);
            
            $cache_data = json_decode(file_get_contents($file), true);
            if ($cache_data && isset($cache_data['expires_at'])) {
                $expires_at = $cache_data['expires_at'];
                $is_expired = time() > $expires_at;
                $status = $is_expired ? '–£—Å—Ç–∞—Ä–µ–ª' : '–ê–∫—Ç—É–∞–ª–µ–Ω';
                $expires_str = date('H:i:s', $expires_at);
            } else {
                $status = '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω';
                $expires_str = 'N/A';
            }
            
            echo str_pad(substr($filename, 0, 28), 30) . 
                 str_pad($size_kb . ' KB', 10) . 
                 str_pad($status, 12) . 
                 $expires_str . "\n";
        }
    }
    
    private function testCache() {
        echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞...\n\n";
        
        if (!$this->cache->isEnabled()) {
            echo "‚ùå –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n";
            return;
        }
        
        // –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ
        echo "–¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n";
        $test_key = 'test_' . time();
        $test_data = ['test' => true, 'timestamp' => time()];
        
        $write_success = $this->cache->set($test_key, $test_data, 60);
        echo "  –ó–∞–ø–∏—Å—å: " . ($write_success ? '‚úÖ' : '‚ùå') . "\n";
        
        $read_data = $this->cache->get($test_key);
        $read_success = $read_data && $read_data['test'] === true;
        echo "  –ß—Ç–µ–Ω–∏–µ: " . ($read_success ? '‚úÖ' : '‚ùå') . "\n";
        
        // –¢–µ—Å—Ç 2: TTL
        echo "\n–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL\n";
        $short_ttl_key = 'test_ttl_' . time();
        $this->cache->set($short_ttl_key, ['ttl_test' => true], 1);
        
        $immediate_read = $this->cache->get($short_ttl_key);
        echo "  –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ: " . ($immediate_read ? '‚úÖ' : '‚ùå') . "\n";
        
        sleep(2);
        $delayed_read = $this->cache->get($short_ttl_key);
        echo "  –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL: " . ($delayed_read === null ? '‚úÖ' : '‚ùå') . "\n";
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        echo "\n–¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n";
        $start_time = microtime(true);
        
        for ($i = 0; $i < 100; $i++) {
            $this->cache->set("perf_test_$i", ['data' => str_repeat('x', 1000)], 300);
        }
        
        $write_time = microtime(true) - $start_time;
        echo "  100 –∑–∞–ø–∏—Å–µ–π: " . round($write_time * 1000, 2) . " –º—Å\n";
        
        $start_time = microtime(true);
        
        for ($i = 0; $i < 100; $i++) {
            $this->cache->get("perf_test_$i");
        }
        
        $read_time = microtime(true) - $start_time;
        echo "  100 —á—Ç–µ–Ω–∏–π: " . round($read_time * 1000, 2) . " –º—Å\n";
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $this->cache->delete($test_key);
        for ($i = 0; $i < 100; $i++) {
            $this->cache->delete("perf_test_$i");
        }
        
        echo "\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n";
    }
    
    private function enableCache() {
        echo "–í–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...\n";
        $this->cache->setEnabled(true);
        echo "‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ\n";
    }
    
    private function disableCache() {
        echo "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...\n";
        $this->cache->setEnabled(false);
        echo "‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n";
    }
}

// –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã
if (php_sapi_name() === 'cli') {
    $manager = new InventoryCacheManagerCLI();
    $args = array_slice($argv, 1);
    $manager->run($args);
} else {
    echo "–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
}
?>