#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ BaseBuy API.
"""

import os
import requests
from dotenv import load_dotenv

load_dotenv()

def debug_basebuy_auth():
    """–û—Ç–ª–∞–¥–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ BaseBuy API."""
    
    api_key = os.getenv('BASEBUY_API_KEY')
    if not api_key:
        print("‚ùå BASEBUY_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    print(f"üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á: {api_key}")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL
    test_urls = [
        "https://api.basebuy.ru/api/auto/v1/mark.getAll.csv",
        "https://basebuy.ru/api/auto/v1/mark.getAll.csv",
        "https://api.basebuy.ru/v1/mark.getAll.csv",
        "https://basebuy.ru/v1/mark.getAll.csv"
    ]
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_methods = [
        {
            'name': 'Query Parameter (api_key)',
            'params': {'api_key': api_key, 'id_type': 1},
            'headers': {}
        },
        {
            'name': 'Authorization Bearer',
            'params': {'id_type': 1},
            'headers': {'Authorization': f'Bearer {api_key}'}
        },
        {
            'name': 'X-API-Key Header',
            'params': {'id_type': 1},
            'headers': {'X-API-Key': api_key}
        },
        {
            'name': 'API-Key Header',
            'params': {'id_type': 1},
            'headers': {'API-Key': api_key}
        },
        {
            'name': 'Authorization Basic',
            'params': {'id_type': 1},
            'headers': {'Authorization': f'Basic {api_key}'}
        }
    ]
    
    for url in test_urls:
        print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url}")
        print("-" * 60)
        
        for method in auth_methods:
            try:
                print(f"   üîê {method['name']}")
                
                response = requests.get(
                    url,
                    params=method['params'],
                    headers=method['headers'],
                    timeout=10
                )
                
                print(f"      –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    content_preview = response.text[:100].replace('\n', ' ')
                    print(f"      ‚úÖ –£—Å–ø–µ—Ö! –†–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"      üìÑ –ü—Ä–µ–≤—å—é: {content_preview}...")
                    return url, method  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                elif response.status_code == 401:
                    print(f"      ‚ùå 401 Unauthorized")
                elif response.status_code == 404:
                    print(f"      ‚ùå 404 Not Found")
                else:
                    print(f"      ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status_code}")
                    error_preview = response.text[:100].replace('\n', ' ')
                    print(f"      üìÑ –û—Ç–≤–µ—Ç: {error_preview}...")
                
            except Exception as e:
                print(f"      üí• –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    print("‚ùå –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    print("\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞
    try:
        response = requests.get("https://api.basebuy.ru", timeout=5)
        print(f"‚úÖ api.basebuy.ru –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
    except Exception as e:
        print(f"‚ùå api.basebuy.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω
    try:
        response = requests.get("https://basebuy.ru", timeout=5)
        print(f"‚úÖ basebuy.ru –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
    except Exception as e:
        print(f"‚ùå basebuy.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞
    print(f"\nüìã –ê–Ω–∞–ª–∏–∑ API –∫–ª—é—á–∞:")
    print(f"   –î–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –§–æ—Ä–º–∞—Ç: {'hex' if all(c in '0123456789abcdef' for c in api_key.lower()) else 'mixed'}")
    print(f"   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {api_key[:5]}...")
    print(f"   –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞: ...{api_key[-5:]}")
    
    return None

if __name__ == "__main__":
    result = debug_basebuy_auth()
    if result:
        url, method = result
        print(f"\nüéâ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î!")
        print(f"URL: {url}")
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {method['name']}")
    else:
        print(f"\nüí• –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î –ù–ï –ù–ê–ô–î–ï–ù")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
        print("2. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (100/–¥–µ–Ω—å)")
        print("3. –ò–∑–º–µ–Ω–∏–ª—Å—è —Ñ–æ—Ä–º–∞—Ç API –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
