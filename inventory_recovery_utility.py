#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.

–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, –æ—á–∏—Å—Ç–∫—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import argparse
from datetime import datetime, date, timedelta
from typing import Dict, Any, List, Optional, Tuple
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from importers.ozon_importer import connect_to_db
    from inventory_error_handler import DataRecoveryManager, FallbackManager
    from inventory_sync_service_with_error_handling import RobustInventorySyncService
    from sync_logger import SyncLogger, SyncType, SyncStatus
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class InventoryRecoveryUtility:
    """
    –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è:
    - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    - –û—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
    - –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç—ã."""
        self.connection = None
        self.cursor = None
        self.recovery_manager: Optional[DataRecoveryManager] = None
        self.fallback_manager: Optional[FallbackManager] = None
        self.sync_logger: Optional[SyncLogger] = None
        self.sync_service: Optional[RobustInventorySyncService] = None
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.recovery_manager = DataRecoveryManager(self.cursor, self.connection)
            self.fallback_manager = FallbackManager(self.cursor, self.connection)
            self.sync_logger = SyncLogger(self.cursor, self.connection, "RecoveryUtility")
            self.sync_service = RobustInventorySyncService()
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def force_resync(self, source: str, days_back: int = 7, run_sync: bool = True) -> Dict[str, Any]:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon', 'Wildberries' –∏–ª–∏ 'all')
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            run_sync: –ó–∞–ø—É—Å–∫–∞—Ç—å –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {source}")
        
        if not self.recovery_manager:
            return {'status': 'error', 'message': 'Recovery manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        results = {}
        
        try:
            sources = ['Ozon', 'Wildberries'] if source.lower() == 'all' else [source]
            
            for src in sources:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {src}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                resync_result = self.recovery_manager.force_resync(src, days_back)
                results[src] = {'resync': resync_result}
                
                if resync_result['status'] == 'success' and run_sync:
                    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {src}")
                    
                    # –ü–æ–¥–∫–ª—é—á–∞–µ–º sync_service –∫ –ë–î
                    if self.sync_service:
                        self.sync_service.connection = self.connection
                        self.sync_service.cursor = self.cursor
                        self.sync_service.recovery_manager = self.recovery_manager
                        self.sync_service.fallback_manager = self.fallback_manager
                        self.sync_service.sync_logger = self.sync_logger
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                        if src == 'Ozon':
                            sync_result = self.sync_service.sync_ozon_inventory_with_recovery()
                        elif src == 'Wildberries':
                            sync_result = self.sync_service.sync_wb_inventory_with_recovery()
                        else:
                            continue
                        
                        results[src]['sync'] = {
                            'status': sync_result.status.value,
                            'records_processed': sync_result.records_processed,
                            'records_inserted': sync_result.records_inserted,
                            'records_failed': sync_result.records_failed,
                            'duration_seconds': sync_result.duration_seconds,
                            'fallback_used': sync_result.fallback_used,
                            'recovery_actions': sync_result.recovery_actions
                        }
                        
                        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {src} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sync_result.status.value}")
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {src} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return {
                'status': 'success',
                'operation': 'force_resync',
                'sources_processed': sources,
                'days_back': days_back,
                'sync_executed': run_sync,
                'results': results,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'status': 'error',
                'operation': 'force_resync',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def cleanup_corrupted_data(self, source: str, days_back: int = 7) -> Dict[str, Any]:
        """
        –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon', 'Wildberries' –∏–ª–∏ 'all')
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
        """
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {source}")
        
        if not self.recovery_manager:
            return {'status': 'error', 'message': 'Recovery manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            sources = ['Ozon', 'Wildberries'] if source.lower() == 'all' else [source]
            results = {}
            
            for src in sources:
                logger.info(f"–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {src}")
                cleanup_result = self.recovery_manager.cleanup_corrupted_data(src, days_back)
                results[src] = cleanup_result
                
                if cleanup_result['status'] == 'success':
                    logger.info(f"–û—á–∏—Å—Ç–∫–∞ {src} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {cleanup_result['total_deleted']} –∑–∞–ø–∏—Å–µ–π")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {src}: {cleanup_result.get('error', 'Unknown error')}")
            
            return {
                'status': 'success',
                'operation': 'cleanup_corrupted_data',
                'sources_processed': sources,
                'days_back': days_back,
                'results': results,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'status': 'error',
                'operation': 'cleanup_corrupted_data',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def recover_from_failure(self, source: str, sync_session_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon', 'Wildberries' –∏–ª–∏ 'all')
            sync_session_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        logger.info(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è –¥–ª—è {source}")
        
        if not self.recovery_manager:
            return {'status': 'error', 'message': 'Recovery manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            sources = ['Ozon', 'Wildberries'] if source.lower() == 'all' else [source]
            results = {}
            
            for src in sources:
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {src}")
                recovery_result = self.recovery_manager.recover_from_failure(src, sync_session_id)
                results[src] = recovery_result
                
                if recovery_result['status'] == 'success':
                    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {src} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {recovery_result['message']}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {src}: {recovery_result.get('error', 'Unknown error')}")
            
            return {
                'status': 'success',
                'operation': 'recover_from_failure',
                'sources_processed': sources,
                'sync_session_id': sync_session_id,
                'results': results,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {
                'status': 'error',
                'operation': 'recover_from_failure',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def validate_data_integrity(self, source: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon', 'Wildberries' –∏–ª–∏ 'all')
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {source}")
        
        if not self.recovery_manager:
            return {'status': 'error', 'message': 'Recovery manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            sources = ['Ozon', 'Wildberries'] if source.lower() == 'all' else [source]
            results = {}
            overall_score = 0
            
            for src in sources:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è {src}")
                integrity_result = self.recovery_manager.validate_data_integrity(src)
                results[src] = integrity_result
                
                if integrity_result['status'] == 'success':
                    score = integrity_result['integrity_score']
                    overall_score += score
                    logger.info(f"–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å {src}: {score}% ({integrity_result['total_issues']} –ø—Ä–æ–±–ª–µ–º)")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {src}: {integrity_result.get('error', 'Unknown error')}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
            if len([r for r in results.values() if r['status'] == 'success']) > 0:
                overall_score = overall_score / len([r for r in results.values() if r['status'] == 'success'])
            
            return {
                'status': 'success',
                'operation': 'validate_data_integrity',
                'sources_processed': sources,
                'overall_integrity_score': round(overall_score, 2),
                'results': results,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
            return {
                'status': 'error',
                'operation': 'validate_data_integrity',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def use_fallback_data(self, source: str, max_age_hours: int = 24) -> Dict[str, Any]:
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon', 'Wildberries' –∏–ª–∏ 'all')
            max_age_hours: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback
        """
        logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {source}")
        
        if not self.fallback_manager:
            return {'status': 'error', 'message': 'Fallback manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            sources = ['Ozon', 'Wildberries'] if source.lower() == 'all' else [source]
            results = {}
            
            for src in sources:
                logger.info(f"Fallback –¥–ª—è {src}")
                fallback_result = self.fallback_manager.use_cached_data(src, max_age_hours)
                results[src] = fallback_result
                
                if fallback_result['status'] == 'success':
                    logger.info(f"Fallback {src} –∑–∞–≤–µ—Ä—à–µ–Ω: {fallback_result['copied_records']} –∑–∞–ø–∏—Å–µ–π")
                elif fallback_result['status'] == 'no_cache':
                    logger.warning(f"–ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {src}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ fallback {src}: {fallback_result.get('error', 'Unknown error')}")
            
            return {
                'status': 'success',
                'operation': 'use_fallback_data',
                'sources_processed': sources,
                'max_age_hours': max_age_hours,
                'results': results,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback: {e}")
            return {
                'status': 'error',
                'operation': 'use_fallback_data',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def estimate_inventory_from_history(self, source: str, days_back: int = 7) -> Dict[str, Any]:
        """
        –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon', 'Wildberries' –∏–ª–∏ 'all')
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏
        """
        logger.info(f"üìä –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {source}")
        
        if not self.fallback_manager:
            return {'status': 'error', 'message': 'Fallback manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            sources = ['Ozon', 'Wildberries'] if source.lower() == 'all' else [source]
            results = {}
            
            for src in sources:
                logger.info(f"–û—Ü–µ–Ω–∫–∞ –¥–ª—è {src}")
                estimation_result = self.fallback_manager.estimate_inventory_from_history(src, days_back)
                results[src] = estimation_result
                
                if estimation_result['status'] == 'success':
                    logger.info(f"–û—Ü–µ–Ω–∫–∞ {src} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {estimation_result['estimated_records']} –∑–∞–ø–∏—Å–µ–π")
                elif estimation_result['status'] == 'no_data':
                    logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ {src}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ {src}: {estimation_result.get('error', 'Unknown error')}")
            
            return {
                'status': 'success',
                'operation': 'estimate_inventory_from_history',
                'sources_processed': sources,
                'days_back': days_back,
                'results': results,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return {
                'status': 'error',
                'operation': 'estimate_inventory_from_history',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def get_sync_history(self, source: Optional[str] = None, days: int = 7) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict[str, Any]: –ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        try:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = """
                SELECT 
                    id, sync_type, source, status, 
                    records_processed, records_updated, records_inserted, records_failed,
                    started_at, completed_at, 
                    TIMESTAMPDIFF(SECOND, started_at, completed_at) as duration_seconds,
                    api_requests_count, error_message
                FROM sync_logs 
                WHERE sync_type = 'inventory'
                AND started_at >= DATE_SUB(NOW(), INTERVAL %s DAY)
            """
            
            params = [days]
            
            if source and source.lower() != 'all':
                query += " AND source = %s"
                params.append(source)
            
            query += " ORDER BY started_at DESC"
            
            self.cursor.execute(query, params)
            sync_history = self.cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            history_by_source = {}
            total_syncs = 0
            successful_syncs = 0
            
            for sync in sync_history:
                src = sync['source']
                if src not in history_by_source:
                    history_by_source[src] = {
                        'syncs': [],
                        'total_count': 0,
                        'success_count': 0,
                        'partial_count': 0,
                        'failed_count': 0,
                        'total_records_processed': 0,
                        'total_records_inserted': 0,
                        'avg_duration': 0
                    }
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                sync_data = dict(sync)
                if sync_data['started_at']:
                    sync_data['started_at'] = sync_data['started_at'].isoformat()
                if sync_data['completed_at']:
                    sync_data['completed_at'] = sync_data['completed_at'].isoformat()
                
                history_by_source[src]['syncs'].append(sync_data)
                history_by_source[src]['total_count'] += 1
                history_by_source[src]['total_records_processed'] += sync['records_processed'] or 0
                history_by_source[src]['total_records_inserted'] += sync['records_inserted'] or 0
                
                if sync['status'] == 'success':
                    history_by_source[src]['success_count'] += 1
                    successful_syncs += 1
                elif sync['status'] == 'partial':
                    history_by_source[src]['partial_count'] += 1
                elif sync['status'] == 'failed':
                    history_by_source[src]['failed_count'] += 1
                
                total_syncs += 1
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for src_data in history_by_source.values():
                if src_data['total_count'] > 0:
                    durations = [s['duration_seconds'] for s in src_data['syncs'] if s['duration_seconds']]
                    src_data['avg_duration'] = sum(durations) / len(durations) if durations else 0
                    src_data['success_rate'] = (src_data['success_count'] / src_data['total_count']) * 100
            
            return {
                'status': 'success',
                'operation': 'get_sync_history',
                'days_analyzed': days,
                'source_filter': source,
                'total_syncs': total_syncs,
                'successful_syncs': successful_syncs,
                'overall_success_rate': (successful_syncs / total_syncs * 100) if total_syncs > 0 else 0,
                'history_by_source': history_by_source,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'status': 'error',
                'operation': 'get_sync_history',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def get_current_inventory_status(self, source: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict[str, Any]: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–æ–≤
        """
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        try:
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            query = """
                SELECT 
                    source,
                    COUNT(*) as total_records,
                    COUNT(DISTINCT product_id) as unique_products,
                    SUM(quantity_present) as total_present,
                    SUM(quantity_reserved) as total_reserved,
                    SUM(available_stock) as total_available,
                    MAX(last_sync_at) as last_sync,
                    MAX(snapshot_date) as last_snapshot_date,
                    COUNT(DISTINCT warehouse_name) as warehouses_count,
                    COUNT(DISTINCT stock_type) as stock_types_count
                FROM inventory_data 
                WHERE snapshot_date = CURDATE()
            """
            
            params = []
            
            if source and source.lower() != 'all':
                query += " AND source = %s"
                params.append(source)
            
            query += " GROUP BY source ORDER BY source"
            
            self.cursor.execute(query, params)
            current_stats = self.cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–∫–ª–∞–¥–∞–º
            warehouse_query = """
                SELECT 
                    source, warehouse_name, stock_type,
                    COUNT(*) as records,
                    COUNT(DISTINCT product_id) as products,
                    SUM(quantity_present) as present,
                    SUM(quantity_reserved) as reserved,
                    SUM(available_stock) as available
                FROM inventory_data 
                WHERE snapshot_date = CURDATE()
            """
            
            if source and source.lower() != 'all':
                warehouse_query += " AND source = %s"
            
            warehouse_query += " GROUP BY source, warehouse_name, stock_type ORDER BY source, warehouse_name, stock_type"
            
            self.cursor.execute(warehouse_query, params)
            warehouse_stats = self.cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∫–ª–∞–¥–∞–º
            warehouses_by_source = {}
            for warehouse in warehouse_stats:
                src = warehouse['source']
                if src not in warehouses_by_source:
                    warehouses_by_source[src] = []
                
                warehouses_by_source[src].append({
                    'warehouse_name': warehouse['warehouse_name'],
                    'stock_type': warehouse['stock_type'],
                    'records': warehouse['records'],
                    'products': warehouse['products'],
                    'present': warehouse['present'],
                    'reserved': warehouse['reserved'],
                    'available': warehouse['available']
                })
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            status_by_source = {}
            total_records = 0
            total_products = set()
            
            for stat in current_stats:
                src = stat['source']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
                last_sync = stat['last_sync'].isoformat() if stat['last_sync'] else None
                last_snapshot = stat['last_snapshot_date'].isoformat() if stat['last_snapshot_date'] else None
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
                data_age_hours = None
                if stat['last_sync']:
                    data_age_hours = (datetime.now() - stat['last_sync']).total_seconds() / 3600
                
                status_by_source[src] = {
                    'total_records': stat['total_records'],
                    'unique_products': stat['unique_products'],
                    'total_present': stat['total_present'],
                    'total_reserved': stat['total_reserved'],
                    'total_available': stat['total_available'],
                    'last_sync': last_sync,
                    'last_snapshot_date': last_snapshot,
                    'data_age_hours': round(data_age_hours, 1) if data_age_hours else None,
                    'is_fresh': data_age_hours < 6 if data_age_hours else False,
                    'warehouses_count': stat['warehouses_count'],
                    'stock_types_count': stat['stock_types_count'],
                    'warehouses': warehouses_by_source.get(src, [])
                }
                
                total_records += stat['total_records']
                # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º –∏–∑-–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π)
                total_products.add(f"{src}_{stat['unique_products']}")
            
            return {
                'status': 'success',
                'operation': 'get_current_inventory_status',
                'source_filter': source,
                'total_records_all_sources': total_records,
                'check_date': date.today().isoformat(),
                'status_by_source': status_by_source,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return {
                'status': 'error',
                'operation': 'get_current_inventory_status',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def run_health_check(self) -> Dict[str, Any]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã.
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        """
        logger.info("üè• –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        
        health_results = {
            'status': 'success',
            'operation': 'health_check',
            'timestamp': datetime.now().isoformat(),
            'checks': {}
        }
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
            integrity_result = self.validate_data_integrity('all')
            health_results['checks']['data_integrity'] = integrity_result
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
            status_result = self.get_current_inventory_status('all')
            health_results['checks']['data_freshness'] = status_result
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
            history_result = self.get_sync_history('all', 3)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
            health_results['checks']['sync_history'] = history_result
            
            # 4. –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            logger.info("–ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            critical_issues = []
            warnings = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if integrity_result['status'] == 'success':
                overall_integrity = integrity_result.get('overall_integrity_score', 0)
                if overall_integrity < 50:
                    critical_issues.append(f"–ù–∏–∑–∫–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {overall_integrity}%")
                elif overall_integrity < 80:
                    warnings.append(f"–£–º–µ—Ä–µ–Ω–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {overall_integrity}%")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if status_result['status'] == 'success':
                for source, status in status_result.get('status_by_source', {}).items():
                    if not status.get('is_fresh', False):
                        age = status.get('data_age_hours', 0)
                        if age > 24:
                            critical_issues.append(f"–î–∞–Ω–Ω—ã–µ {source} —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {age:.1f} —á–∞—Å–æ–≤")
                        elif age > 6:
                            warnings.append(f"–î–∞–Ω–Ω—ã–µ {source} —É—Å—Ç–∞—Ä–µ–ª–∏ –Ω–∞ {age:.1f} —á–∞—Å–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if history_result['status'] == 'success':
                success_rate = history_result.get('overall_success_rate', 0)
                if success_rate < 50:
                    critical_issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π: {success_rate:.1f}%")
                elif success_rate < 80:
                    warnings.append(f"–£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π: {success_rate:.1f}%")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            if critical_issues:
                health_status = 'critical'
            elif warnings:
                health_status = 'warning'
            else:
                health_status = 'healthy'
            
            health_results['overall_health'] = {
                'status': health_status,
                'critical_issues': critical_issues,
                'warnings': warnings,
                'recommendations': self._generate_recommendations(critical_issues, warnings)
            }
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å—Ç–∞—Ç—É—Å {health_status}")
            
            return health_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            health_results['status'] = 'error'
            health_results['error'] = str(e)
            return health_results

    def _generate_recommendations(self, critical_issues: List[str], warnings: List[str]) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.
        
        Args:
            critical_issues: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            warnings: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        recommendations = []
        
        if critical_issues:
            recommendations.append("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ:")
            for issue in critical_issues:
                if "—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö" in issue.lower():
                    recommendations.append("  - –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: cleanup-corrupted-data")
                elif "—É—Å—Ç–∞—Ä–µ–ª–∏" in issue.lower():
                    recommendations.append("  - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: force-resync")
                elif "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π" in issue.lower():
                    recommendations.append("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        if warnings:
            recommendations.append("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
            for warning in warnings:
                if "—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö" in warning.lower():
                    recommendations.append("  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                elif "—É—Å—Ç–∞—Ä–µ–ª–∏" in warning.lower():
                    recommendations.append("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                elif "—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π" in warning.lower():
                    recommendations.append("  - –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        if not critical_issues and not warnings:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            recommendations.append("  - –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        return recommendations


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description='–£—Ç–∏–ª–∏—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ force-resync
    resync_parser = subparsers.add_parser('force-resync', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è')
    resync_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                              help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    resync_parser.add_argument('--days-back', type=int, default=7,
                              help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
    resync_parser.add_argument('--no-sync', action='store_true',
                              help='–¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ cleanup-corrupted-data
    cleanup_parser = subparsers.add_parser('cleanup-corrupted-data', help='–û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
    cleanup_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                               help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏')
    cleanup_parser.add_argument('--days-back', type=int, default=7,
                               help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ recover-from-failure
    recover_parser = subparsers.add_parser('recover-from-failure', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è')
    recover_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                               help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è')
    recover_parser.add_argument('--session-id', type=int,
                               help='ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ validate-integrity
    validate_parser = subparsers.add_parser('validate-integrity', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö')
    validate_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                                help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ use-fallback
    fallback_parser = subparsers.add_parser('use-fallback', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö')
    fallback_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                                help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö')
    fallback_parser.add_argument('--max-age-hours', type=int, default=24,
                                help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Å–∞—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ estimate-inventory
    estimate_parser = subparsers.add_parser('estimate-inventory', help='–û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏')
    estimate_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                                help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö')
    estimate_parser.add_argument('--days-back', type=int, default=7,
                                help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ sync-history
    history_parser = subparsers.add_parser('sync-history', help='–ò—Å—Ç–æ—Ä–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    history_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                               help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö')
    history_parser.add_argument('--days', type=int, default=7,
                               help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ inventory-status
    status_parser = subparsers.add_parser('inventory-status', help='–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–æ–≤')
    status_parser.add_argument('--source', choices=['Ozon', 'Wildberries', 'all'], default='all',
                              help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö')
    
    # –ö–æ–º–∞–Ω–¥–∞ health-check
    subparsers.add_parser('health-check', help='–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã')
    
    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--output', choices=['json', 'text'], default='text',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –°–æ–∑–¥–∞–µ–º —É—Ç–∏–ª–∏—Ç—É –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    utility = InventoryRecoveryUtility()
    
    try:
        utility.connect_to_database()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = None
        
        if args.command == 'force-resync':
            result = utility.force_resync(args.source, args.days_back, not args.no_sync)
        elif args.command == 'cleanup-corrupted-data':
            result = utility.cleanup_corrupted_data(args.source, args.days_back)
        elif args.command == 'recover-from-failure':
            result = utility.recover_from_failure(args.source, args.session_id)
        elif args.command == 'validate-integrity':
            result = utility.validate_data_integrity(args.source)
        elif args.command == 'use-fallback':
            result = utility.use_fallback_data(args.source, args.max_age_hours)
        elif args.command == 'estimate-inventory':
            result = utility.estimate_inventory_from_history(args.source, args.days_back)
        elif args.command == 'sync-history':
            result = utility.get_sync_history(args.source, args.days)
        elif args.command == 'inventory-status':
            result = utility.get_current_inventory_status(args.source)
        elif args.command == 'health-check':
            result = utility.run_health_check()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if args.output == 'json':
            print(json.dumps(result, indent=2, ensure_ascii=False))
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
            print(f"\n{'='*60}")
            print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {args.command.upper()}")
            print(f"{'='*60}")
            print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            
            if result.get('status') == 'success':
                print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                if 'error' in result:
                    print(f"–û—à–∏–±–∫–∞: {result['error']}")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if args.command == 'health-check' and 'overall_health' in result:
                health = result['overall_health']
                print(f"\n–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {health['status'].upper()}")
                
                if health['critical_issues']:
                    print("\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
                    for issue in health['critical_issues']:
                        print(f"  - {issue}")
                
                if health['warnings']:
                    print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                    for warning in health['warnings']:
                        print(f"  - {warning}")
                
                if health['recommendations']:
                    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in health['recommendations']:
                        print(f"  {rec}")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.output == 'json':
            print(json.dumps({'status': 'error', 'error': str(e)}, indent=2))
        else:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    
    finally:
        utility.close_database_connection()


if __name__ == "__main__":
    main()