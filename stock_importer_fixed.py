#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ Ozon –∏ Wildberries.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã inventory —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UPSERT –ª–æ–≥–∏–∫–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∫–ª–∞–¥–æ–≤ (FBO/FBS)
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 20 —Å–µ–Ω—Ç—è–±—Ä—è 2025
"""

import os
import sys
import logging
import requests
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    from importers.ozon_importer import connect_to_db, load_config
    import config
    connection = connect_to_db()
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class StockImporter:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–µ—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        self.connection = None
        
    def get_ozon_inventory(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon —á–µ—Ä–µ–∑ API –æ—Ç—á–µ—Ç–æ–≤"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –º–æ–¥—É–ª—è
            sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))
            from ozon_importer import get_products_from_api
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–π API
            products = get_products_from_api()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Ozon API")
            
            inventory_data = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
            for product in products:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ FBO
                fbo_present = int(product.get('–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Å—Ö–µ–º–µ FBO, —à—Ç.', 0) or 0)
                fbo_reserved = int(product.get('–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ, —à—Ç', 0) or 0)
                
                if fbo_present > 0 or fbo_reserved > 0:
                    inventory_record = {
                        'product_id': str(product.get('Ozon Product ID', '')),
                        'offer_id': product.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
                        'name': product.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'),
                        'warehouse_name': 'Ozon FBO',
                        'stock_type': 'FBO',
                        'quantity_present': fbo_present,
                        'quantity_reserved': fbo_reserved,
                        'quantity_coming': 0,
                        'source': 'Ozon'
                    }
                    inventory_data.append(inventory_record)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ FBS
                fbs_present = int(product.get('–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Å—Ö–µ–º–µ FBS, —à—Ç.', 0) or 0)
                fbs_reserved = int(product.get('–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –º–æ–∏—Ö —Å–∫–ª–∞–¥–∞—Ö, —à—Ç', 0) or 0)
                
                if fbs_present > 0 or fbs_reserved > 0:
                    inventory_record = {
                        'product_id': str(product.get('Ozon Product ID', '')),
                        'offer_id': product.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
                        'name': product.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'),
                        'warehouse_name': 'Ozon FBS',
                        'stock_type': 'FBS',
                        'quantity_present': fbs_present,
                        'quantity_reserved': fbs_reserved,
                        'quantity_coming': 0,
                        'source': 'Ozon'
                    }
                    inventory_data.append(inventory_record)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ realFBS
                real_fbs_present = int(product.get('–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Å—Ö–µ–º–µ realFBS, —à—Ç.', 0) or 0)
                
                if real_fbs_present > 0:
                    inventory_record = {
                        'product_id': str(product.get('Ozon Product ID', '')),
                        'offer_id': product.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
                        'name': product.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'),
                        'warehouse_name': 'Ozon realFBS',
                        'stock_type': 'realFBS',
                        'quantity_present': real_fbs_present,
                        'quantity_reserved': 0,
                        'quantity_coming': 0,
                        'source': 'Ozon'
                    }
                    inventory_data.append(inventory_record)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon: {e}")
            raise
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(inventory_data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon")
        return inventory_data
    
    def get_wb_inventory(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries...")
        
        # –î–ª—è WB –∏—Å–ø–æ–ª—å–∑—É–µ–º API —Å–∫–ª–∞–¥–æ–≤
        url = f"{config.WB_SUPPLIERS_API_URL}/api/v1/supplier/stocks"
        headers = {
            "Authorization": config.WB_API_TOKEN
        }
        
        inventory_data = []
        
        try:
            params = {
                'dateFrom': (datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)).isoformat()
            }
            
            response = requests.get(url, headers=headers, params=params, timeout=(10, 60))
            response.raise_for_status()
            
            data = response.json()
            
            for item in data:
                inventory_record = {
                    'product_id': None,  # –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
                    'barcode': item.get('barcode'),
                    'sku_wb': item.get('nmId'),
                    'warehouse_name': item.get('warehouseName', '–°–∫–ª–∞–¥ WB'),
                    'stock_type': 'FBS',
                    'quantity_present': item.get('quantity', 0),
                    'quantity_reserved': item.get('inWayToClient', 0),
                    'quantity_coming': item.get('inWayFromClient', 0),
                    'source': 'Wildberries'
                }
                
                inventory_data.append(inventory_record)
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WB API: {e}")
            raise
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(inventory_data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å WB")
        return inventory_data
    
    def load_inventory_to_db(self, inventory_data):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not inventory_data:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(inventory_data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ë–î")
        
        self.connection = connect_to_db()
        cursor = self.connection.cursor()
        
        try:
            # –î–ª—è Ozon —Ç–æ–≤–∞—Ä–æ–≤ –∏—â–µ–º product_id –ø–æ offer_id
            ozon_records = [r for r in inventory_data if r['source'] == 'Ozon']
            wb_records = [r for r in inventory_data if r['source'] == 'Wildberries']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Ozon –∑–∞–ø–∏—Å–∏
            for record in ozon_records:
                if record.get('offer_id'):
                    # –ò—â–µ–º product_id –ø–æ offer_id (sku_ozon)
                    cursor.execute("SELECT id FROM dim_products WHERE sku_ozon = %s", (record['offer_id'],))
                    result = cursor.fetchone()
                    
                    if result:
                        product_id = result[0]
                        
                        # UPSERT –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        query = """
                        INSERT INTO inventory (product_id, warehouse_name, stock_type, quantity_present, quantity_reserved, source)
                        VALUES (%s, %s, %s, %s, %s, %s)
                        ON DUPLICATE KEY UPDATE
                            quantity_present = VALUES(quantity_present),
                            quantity_reserved = VALUES(quantity_reserved),
                            updated_at = CURRENT_TIMESTAMP
                        """
                        
                        cursor.execute(query, (
                            product_id,
                            record['warehouse_name'],
                            record['stock_type'],
                            record['quantity_present'],
                            record['quantity_reserved'],
                            record['source']
                        ))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WB –∑–∞–ø–∏—Å–∏
            for record in wb_records:
                if record.get('barcode'):
                    # –ò—â–µ–º product_id –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
                    cursor.execute("SELECT id FROM dim_products WHERE barcode = %s", (record['barcode'],))
                    result = cursor.fetchone()
                    
                    if result:
                        product_id = result[0]
                        
                        # UPSERT –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        query = """
                        INSERT INTO inventory (product_id, warehouse_name, stock_type, quantity_present, quantity_reserved, source)
                        VALUES (%s, %s, %s, %s, %s, %s)
                        ON DUPLICATE KEY UPDATE
                            quantity_present = VALUES(quantity_present),
                            quantity_reserved = VALUES(quantity_reserved),
                            updated_at = CURRENT_TIMESTAMP
                        """
                        
                        cursor.execute(query, (
                            product_id,
                            record['warehouse_name'],
                            record['stock_type'],
                            record['quantity_present'],
                            record['quantity_reserved'],
                            record['source']
                        ))
            
            self.connection.commit()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ë–î")
            
        except Exception as e:
            self.connection.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ë–î: {e}")
            raise
        finally:
            cursor.close()
    
    def run_inventory_update(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å Ozon
            logger.info("=" * 50)
            logger.info("–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–¢–ö–û–í OZON")
            logger.info("=" * 50)
            
            ozon_inventory = self.get_ozon_inventory()
            self.load_inventory_to_db(ozon_inventory)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å WB (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            logger.info("=" * 50)
            logger.info("–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–°–¢–ê–¢–ö–û–í WILDBERRIES")
            logger.info("=" * 50)
            
            try:
                wb_inventory = self.get_wb_inventory()
                self.load_inventory_to_db(wb_inventory)
            except Exception as wb_error:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Å Wildberries: {wb_error}")
                logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö WB...")
            
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            raise
        finally:
            if self.connection:
                self.connection.close()
                logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    importer = StockImporter()
    importer.run_inventory_update()

if __name__ == "__main__":
    main()
