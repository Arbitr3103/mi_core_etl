name: MDM System Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "api/**"
      - "html/**"
      - "*.php"
      - ".github/workflows/mdm-tests.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tests/**"
      - "api/**"
      - "html/**"
      - "*.php"
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ["7.4", "8.0", "8.1", "8.2"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: pdo, pdo_mysql, pdo_sqlite, mbstring
          coverage: xdebug

      - name: Validate composer.json
        run: |
          if [ -f composer.json ]; then
            composer validate --strict
          fi

      - name: Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress
          fi

      - name: Run PHPUnit tests
        run: |
          if [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit --configuration phpunit.xml --testsuite unit
          else
            php run_sync_tests.php
          fi

      - name: Generate coverage report
        if: matrix.php-version == '8.1'
        run: |
          if [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit --configuration phpunit.xml --coverage-clover coverage.xml
          fi

      - name: Upload coverage to Codecov
        if: matrix.php-version == '8.1'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_mdm
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: pdo, pdo_mysql, pdo_sqlite, mbstring

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 --silent; do
            sleep 1
          done

      - name: Create test database schema
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -ptest_password test_mdm < create_product_cross_reference_table.sql || true
          mysql -h 127.0.0.1 -P 3306 -u root -ptest_password test_mdm < migrate_dim_products_table.sql || true

      - name: Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress
          fi

      - name: Run integration tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: test_mdm
          DB_USER: root
          DB_PASSWORD: test_password
        run: |
          if [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit --configuration phpunit.xml --testsuite integration
          else
            php tests/SyncIntegrationTest.php
          fi

  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: pdo, pdo_mysql, pdo_sqlite, mbstring

      - name: Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress
          fi

      - name: Run regression tests
        run: |
          if [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit tests/RegressionTest.php
          else
            php -r "require 'tests/bootstrap.php'; require 'tests/RegressionTest.php';"
          fi

  data-type-compatibility-tests:
    name: Data Type Compatibility Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: pdo, pdo_mysql, pdo_sqlite, mbstring

      - name: Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress
          fi

      - name: Run data type compatibility tests
        run: |
          if [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit tests/DataTypeCompatibilityTest.php
          else
            php -r "require 'tests/bootstrap.php'; require 'tests/DataTypeCompatibilityTest.php';"
          fi

  sql-query-tests:
    name: SQL Query Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_mdm
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: pdo, pdo_mysql, mbstring

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 --silent; do
            sleep 1
          done

      - name: Create test database schema
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -ptest_password test_mdm < create_product_cross_reference_table.sql || true
          mysql -h 127.0.0.1 -P 3306 -u root -ptest_password test_mdm < migrate_dim_products_table.sql || true

      - name: Test SQL queries
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: test_mdm
          DB_USER: root
          DB_PASSWORD: test_password
        run: |
          php tests/test_sql_queries_comprehensive.php

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: pdo, pdo_mysql, mbstring

      - name: Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress
          fi

      - name: Check PHP syntax
        run: |
          find src tests -name "*.php" -exec php -l {} \; | grep -v "No syntax errors"

      - name: Run PHP CodeSniffer (if available)
        run: |
          if [ -f vendor/bin/phpcs ]; then
            vendor/bin/phpcs --standard=PSR12 src/ tests/
          fi
        continue-on-error: true

      - name: Run PHPStan (if available)
        run: |
          if [ -f vendor/bin/phpstan ]; then
            vendor/bin/phpstan analyse src tests --level=5
          fi
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"

      - name: Install dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress
          fi

      - name: Run security checker (if available)
        run: |
          if [ -f vendor/bin/security-checker ]; then
            vendor/bin/security-checker security:check composer.lock
          fi
        continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests,
        integration-tests,
        regression-tests,
        data-type-compatibility-tests,
        sql-query-tests,
        code-quality,
      ]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "All tests completed"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Regression Tests: ${{ needs.regression-tests.result }}"
          echo "Data Type Tests: ${{ needs.data-type-compatibility-tests.result }}"
          echo "SQL Query Tests: ${{ needs.sql-query-tests.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"

      - name: Fail if any test failed
        if: |
          needs.unit-tests.result == 'failure' ||
          needs.integration-tests.result == 'failure' ||
          needs.regression-tests.result == 'failure' ||
          needs.data-type-compatibility-tests.result == 'failure' ||
          needs.sql-query-tests.result == 'failure'
        run: exit 1
