name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  php-tests:
    name: PHP Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mi_core_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: pdo, pdo_pgsql, json, curl, mbstring, openssl
          coverage: xdebug

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Copy environment file
        run: cp .env.example .env

      - name: Run PHP CS Fixer
        run: composer run cs-check

      - name: Run PHPStan
        run: composer run stan

      - name: Run PHPUnit tests
        run: composer run test-coverage
        env:
          PG_HOST: localhost
          PG_PORT: 5432
          PG_NAME: mi_core_test
          PG_USER: postgres
          PG_PASSWORD: postgres

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/clover.xml
          flags: php
          name: php-${{ matrix.php-version }}

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Run ESLint
        run: npm run lint:frontend

      - name: Run TypeScript check
        run: npm run type-check

      - name: Run tests
        run: npm run test:frontend -- --coverage

      - name: Build frontend
        run: npm run build:frontend

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-node-${{ matrix.node-version }}

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: |
          composer install --no-dev
          npm ci
          cd frontend && npm ci

      - name: Run security audit (PHP)
        run: composer audit

      - name: Run security audit (Node.js)
        run: npm audit

      - name: Run security audit (Frontend)
        run: cd frontend && npm audit

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [php-tests, frontend-tests, security]
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: |
          composer install --no-dev --optimize-autoloader
          npm ci
          cd frontend && npm ci

      - name: Build production assets
        run: npm run build:prod

      - name: Deploy to staging
        run: echo "Deploy to staging server"
        # Add your deployment script here
