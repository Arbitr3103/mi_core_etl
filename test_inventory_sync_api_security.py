#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
- –ó–∞—â–∏—Ç—É –æ—Ç –∞—Ç–∞–∫
- –í–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import unittest
import requests
import json
import time
import sys
import os
from unittest.mock import patch, MagicMock
import urllib.parse
import base64

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(__file__)))


class TestAPISecurityVulnerabilities(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.base_url = "http://localhost:5001"
        self.headers = {'Content-Type': 'application/json'}
    
    def test_sql_injection_attacks(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π."""
        sql_payloads = [
            "'; DROP TABLE sync_logs; --",
            "' OR '1'='1",
            "' UNION SELECT * FROM sync_logs --",
            "'; INSERT INTO sync_logs VALUES (1,2,3,4,5,6,7,8,9,10); --",
            "' AND (SELECT COUNT(*) FROM sync_logs) > 0 --"
        ]
        
        for payload in sql_payloads:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä source
            response = requests.get(f"{self.base_url}/api/sync/logs?source={urllib.parse.quote(payload)}")
            
            # API –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ
            self.assertEqual(response.status_code, 200, f"SQL injection payload failed: {payload}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            health_response = requests.get(f"{self.base_url}/api/sync/health")
            self.assertEqual(health_response.status_code, 200)
    
    def test_xss_attacks(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç XSS –∞—Ç–∞–∫."""
        xss_payloads = [
            "<script>alert('xss')</script>",
            "<img src=x onerror=alert('xss')>",
            "javascript:alert('xss')",
            "<svg onload=alert('xss')>",
            "';alert('xss');//"
        ]
        
        for payload in xss_payloads:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
            response = requests.get(f"{self.base_url}/api/sync/logs?source={urllib.parse.quote(payload)}")
            
            self.assertEqual(response.status_code, 200)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥
            if response.headers.get('Content-Type', '').startswith('application/json'):
                data = response.json()
                response_text = json.dumps(data)
                
                # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–≥–∏ script –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                dangerous_patterns = ['<script', 'javascript:', 'onerror=', 'onload=']
                for pattern in dangerous_patterns:
                    self.assertNotIn(pattern.lower(), response_text.lower())
    
    def test_command_injection_attacks(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π –∫–æ–º–∞–Ω–¥."""
        command_payloads = [
            "; ls -la",
            "| cat /etc/passwd",
            "&& rm -rf /",
            "`whoami`",
            "$(id)"
        ]
        
        for payload in command_payloads:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ POST –¥–∞–Ω–Ω—ã–µ
            response = requests.post(
                f"{self.base_url}/api/sync/trigger",
                json={"sources": [payload]},
                headers=self.headers
            )
            
            # API –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            self.assertIn(response.status_code, [400, 422])
    
    def test_path_traversal_attacks(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫ –æ–±—Ö–æ–¥–∞ –ø—É—Ç–∏."""
        path_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\config\\sam",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
            "....//....//....//etc/passwd"
        ]
        
        for payload in path_payloads:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            response = requests.get(f"{self.base_url}/api/sync/logs?source={urllib.parse.quote(payload)}")
            
            self.assertEqual(response.status_code, 200)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if response.headers.get('Content-Type', '').startswith('application/json'):
                data = response.json()
                response_text = json.dumps(data)
                
                # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∏–ø–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                system_patterns = ['root:x:', '[boot loader]', 'etc/passwd']
                for pattern in system_patterns:
                    self.assertNotIn(pattern, response_text)
    
    def test_http_header_injection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π –≤ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏."""
        malicious_headers = {
            'X-Forwarded-For': '127.0.0.1\r\nSet-Cookie: admin=true',
            'User-Agent': 'Mozilla/5.0\r\nX-Admin: true',
            'Referer': 'http://example.com\r\nLocation: http://evil.com'
        }
        
        for header_name, header_value in malicious_headers.items():
            response = requests.get(
                f"{self.base_url}/api/sync/status",
                headers={header_name: header_value}
            )
            
            # API –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å
            self.assertEqual(response.status_code, 200)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
            response_headers = str(response.headers)
            self.assertNotIn('Set-Cookie: admin=true', response_headers)
            self.assertNotIn('X-Admin: true', response_headers)


class TestAPIInputValidation(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.base_url = "http://localhost:5001"
        self.headers = {'Content-Type': 'application/json'}
    
    def test_json_payload_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –¥–∞–Ω–Ω—ã—Ö."""
        invalid_payloads = [
            "invalid json",
            '{"sources": [}',  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
            '{"sources": "not_array"}',  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
            '{"sources": [null]}',  # null –∑–Ω–∞—á–µ–Ω–∏—è
            '{"sources": [""]}',  # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        ]
        
        for payload in invalid_payloads:
            response = requests.post(
                f"{self.base_url}/api/sync/trigger",
                data=payload,
                headers=self.headers
            )
            
            # API –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.assertIn(response.status_code, [400, 422])
    
    def test_parameter_type_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–ª—è days
        invalid_days = ['abc', '-1', '999999', 'null', '[]']
        
        for days_value in invalid_days:
            response = requests.get(f"{self.base_url}/api/sync/reports?days={days_value}")
            
            # API –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.assertIn(response.status_code, [200, 400])
            
            if response.status_code == 200:
                data = response.json()
                # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª, –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
                self.assertIn(data['data']['period_days'], range(1, 91))
    
    def test_parameter_length_limits(self):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª–∏–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        long_string = 'A' * 10000
        
        response = requests.get(f"{self.base_url}/api/sync/logs?source={long_string}")
        
        # API –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –æ–±—Ä–µ–∑–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
        self.assertIn(response.status_code, [200, 400, 414])  # 414 = URI Too Long
    
    def test_special_characters_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        special_chars = [
            '—Ç–µ—Å—Ç',  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
            'ÊµãËØï',   # –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            'üîÑ',    # Emoji
            '\x00\x01\x02',  # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            '\\n\\r\\t',     # Escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ]
        
        for chars in special_chars:
            response = requests.get(f"{self.base_url}/api/sync/logs?source={urllib.parse.quote(chars)}")
            
            # API –¥–æ–ª–∂–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            self.assertEqual(response.status_code, 200)


class TestAPIAuthenticationSecurity(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.base_url = "http://localhost:5001"
    
    def test_no_authentication_bypass(self):
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        # –ü–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        bypass_headers = [
            {'X-Forwarded-User': 'admin'},
            {'X-Remote-User': 'admin'},
            {'Authorization': 'Bearer fake_token'},
            {'X-API-Key': 'fake_key'},
            {'Cookie': 'session=admin_session'}
        ]
        
        for headers in bypass_headers:
            response = requests.get(f"{self.base_url}/api/sync/status", headers=headers)
            
            # API –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            self.assertEqual(response.status_code, 200)
    
    def test_session_security(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        response = requests.get(f"{self.base_url}/api/sync/status")
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ cookies
        cookies = response.cookies
        for cookie in cookies:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ cookies –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
            if hasattr(cookie, 'secure'):
                self.assertTrue(cookie.secure or 'localhost' in self.base_url)
            if hasattr(cookie, 'httponly'):
                self.assertTrue(cookie.httponly)


class TestAPIRateLimitingSecurity(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∑–∞—â–∏—Ç—ã –æ—Ç DoS –∞—Ç–∞–∫ –∏ rate limiting."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.base_url = "http://localhost:5001"
    
    def test_rapid_requests_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã—Å—Ç—Ä–æ
        responses = []
        start_time = time.time()
        
        for i in range(50):
            try:
                response = requests.get(f"{self.base_url}/api/sync/status", timeout=1)
                responses.append(response.status_code)
            except requests.exceptions.Timeout:
                responses.append(408)  # Timeout
        
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ —É–ø–∞–ª
        self.assertGreater(len(responses), 0)
        
        # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
        successful_requests = sum(1 for status in responses if status == 200)
        self.assertGreater(successful_requests, len(responses) * 0.5)  # –ú–∏–Ω–∏–º—É–º 50% —É—Å–ø–µ—à–Ω—ã—Ö
    
    def test_large_payload_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π payload
        large_sources = ['Source' + str(i) for i in range(1000)]
        large_payload = {"sources": large_sources}
        
        response = requests.post(
            f"{self.base_url}/api/sync/trigger",
            json=large_payload,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        # API –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–æ–ª—å—à–æ–π payload
        self.assertIn(response.status_code, [200, 400, 413, 422])  # 413 = Payload Too Large


class TestAPIErrorHandlingSecurity(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞."""
        self.base_url = "http://localhost:5001"
    
    def test_error_information_disclosure(self):
        """–¢–µ—Å—Ç –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ—à–∏–±–∫–∞—Ö."""
        # –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏
        error_requests = [
            ('GET', '/api/nonexistent'),
            ('POST', '/api/sync/status'),  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            ('GET', '/api/sync/trigger'),  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        ]
        
        for method, endpoint in error_requests:
            if method == 'GET':
                response = requests.get(f"{self.base_url}{endpoint}")
            else:
                response = requests.post(f"{self.base_url}{endpoint}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if response.headers.get('Content-Type', '').startswith('application/json'):
                try:
                    data = response.json()
                    error_text = json.dumps(data).lower()
                except:
                    error_text = response.text.lower()
            else:
                error_text = response.text.lower()
            
            # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, —Å—Ç–µ–∫ —Ç—Ä–µ–π—Å—ã –∏ —Ç.–¥.
            sensitive_patterns = [
                '/home/', '/var/', '/usr/', 'c:\\',  # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
                'traceback', 'stack trace', 'exception',  # –°—Ç–µ–∫ —Ç—Ä–µ–π—Å—ã
                'password', 'secret', 'key', 'token',  # –°–µ–∫—Ä–µ—Ç—ã
                'mysql', 'database', 'connection string',  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
            ]
            
            for pattern in sensitive_patterns:
                self.assertNotIn(pattern, error_text, 
                               f"Sensitive information '{pattern}' found in error response for {method} {endpoint}")
    
    def test_database_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ë–î —á–µ—Ä–µ–∑ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
        with patch('inventory_sync_api.api_instance.cursor') as mock_cursor:
            mock_cursor.execute.side_effect = Exception("Database connection failed")
            
            response = requests.get(f"{self.base_url}/api/sync/status")
            
            # API –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ë–î gracefully
            self.assertIn(response.status_code, [200, 500, 503])
            
            if response.status_code == 500:
                # –û—à–∏–±–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ë–î
                if response.headers.get('Content-Type', '').startswith('application/json'):
                    data = response.json()
                    error_text = json.dumps(data).lower()
                    self.assertNotIn('database connection failed', error_text)


def run_security_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    print("üîí –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    test_suite.addTest(unittest.makeSuite(TestAPISecurityVulnerabilities))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    test_suite.addTest(unittest.makeSuite(TestAPIInputValidation))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_suite.addTest(unittest.makeSuite(TestAPIAuthenticationSecurity))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã rate limiting
    test_suite.addTest(unittest.makeSuite(TestAPIRateLimitingSecurity))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    test_suite.addTest(unittest.makeSuite(TestAPIErrorHandlingSecurity))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 80)
    print("üîí –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(result.failures)}")
    print(f"üí• –û—à–∏–±–æ–∫: {len(result.errors)}")
    
    if result.failures:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        for test, traceback in result.failures:
            print(f"  - {test}")
    
    if result.errors:
        print("\nüí• –û—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for test, traceback in result.errors:
            print(f"  - {test}")
    
    return result.wasSuccessful()


if __name__ == '__main__':
    success = run_security_tests()
    sys.exit(0 if success else 1)