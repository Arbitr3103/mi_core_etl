#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ext_id –∏–∑ CSV –∑–∞–∫–∞–∑–æ–≤
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname('.'), 'importers'))

from ozon_importer import request_report, get_report_by_code
from datetime import datetime, timedelta
import json
import csv
import io

def test_ext_id_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ext_id –∏–∑ CSV –∑–∞–∫–∞–∑–æ–≤"""
    
    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    target_date = datetime.now() - timedelta(days=2)
    start_date = target_date.strftime('%Y-%m-%d')
    end_date = target_date.strftime('%Y-%m-%d')

    print(f'üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ext_id –∏–∑ CSV –∑–∞–∫–∞–∑–æ–≤ –∑–∞ {start_date}')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API –æ—Ç—á–µ—Ç–æ–≤ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)
        print('üì° –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç...')
        report_code = request_report('postings', start_date, end_date)
        
        print('‚è≥ –ü–æ–ª—É—á–∞–µ–º CSV...')
        csv_content = get_report_by_code(report_code)
        
        print('üìä –ü–∞—Ä—Å–∏–º CSV...')
        csv_file = io.StringIO(csv_content)
        csv_reader = csv.DictReader(csv_file, delimiter=';')
        
        postings = []
        for row in csv_reader:
            postings.append(row)
        
        if not postings:
            print('‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã')
            return
            
        print(f'‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(postings)}')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ext_id
        sample_posting = postings[0]
        
        print('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:')
        for key, value in list(sample_posting.items())[:5]:
            print(f'  {key}: {value}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ext_id –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
        ext_id_new = sample_posting.get('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', sample_posting.get('posting_number', ''))
        ext_id_old = sample_posting.get('posting_number', sample_posting.get('operation_id', ''))
        
        print(f'\nüîç –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ext_id:')
        print(f'  –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ (posting_number): "{ext_id_old}"')
        print(f'  –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞): "{ext_id_new}"')
        
        if ext_id_new:
            print('‚úÖ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - ext_id –Ω–∞–π–¥–µ–Ω!')
        else:
            print('‚ùå –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - ext_id –ø—É—Å—Ç–æ–π!')
            
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤
        print(f'\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ ext_id –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –∑–∞–∫–∞–∑–æ–≤:')
        for i, posting in enumerate(postings[:5]):
            ext_id = posting.get('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', '')
            print(f'  –ó–∞–∫–∞–∑ {i+1}: "{ext_id}"')
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É save_raw_events –±–µ–∑ –ë–î
        print(f'\nüß™ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è raw_data:')
        event_type = 'ozon_posting'
        for i, event in enumerate(postings[:3]):
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ save_raw_events
            if event_type == 'ozon_posting':
                ext_id = event.get('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞', event.get('posting_number', ''))
            else:
                ext_id = event.get('posting_number', event.get('operation_id', ''))
            
            raw_data = {
                'ext_id': ext_id,
                'event_type': event_type,
                'payload': json.dumps(event, ensure_ascii=False)[:100] + '...',  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                'ingested_at': datetime.now().isoformat()
            }
            
            print(f'  –ó–∞–∫–∞–∑ {i+1}:')
            print(f'    ext_id: "{raw_data["ext_id"]}"')
            print(f'    event_type: {raw_data["event_type"]}')
            print(f'    payload_preview: {raw_data["payload"]}')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')

if __name__ == "__main__":
    test_ext_id_extraction()
