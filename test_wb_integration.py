#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Wildberries —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å —Ü–∏–∫–ª: API -> —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è -> –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –ë–î.
"""

import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from wb_importer import (
    load_config, connect_to_db, get_client_id_by_name, get_source_id_by_code,
    import_sales, import_financial_details, logger
)

def test_database_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î ===")
    
    try:
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables_to_check = ['clients', 'sources', 'fact_orders', 'fact_transactions', 'raw_events']
        
        for table in tables_to_check:
            cursor.execute(f"SHOW TABLES LIKE '{table}'")
            result = cursor.fetchone()
            if not result:
                logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            else:
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ client_id –∏ source_id –≤ fact_transactions
        cursor.execute("DESCRIBE fact_transactions")
        columns = [row['Field'] for row in cursor.fetchall()]
        
        if 'client_id' not in columns or 'source_id' not in columns:
            logger.error("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ fact_transactions –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è client_id –∏–ª–∏ source_id")
            logger.error("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: mysql < migrate_fact_transactions.sql")
            return False
        
        logger.info("‚úÖ –ü–æ–ª—è client_id –∏ source_id –Ω–∞–π–¥–µ–Ω—ã –≤ fact_transactions")
        
        cursor.close()
        connection.close()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False


def test_reference_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        client_id = get_client_id_by_name('–¢–î –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω')
        source_id = get_source_id_by_code('WB')
        
        if not client_id:
            logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç '–¢–î –ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.error("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: mysql < setup_wb_data.sql")
            return False
        
        if not source_id:
            logger.error("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ 'WB' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.error("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: mysql < setup_wb_data.sql")
            return False
        
        logger.info(f"‚úÖ client_id: {client_id}, source_id: {source_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_sales_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å."""
    logger.info("=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂ ===")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        yesterday = datetime.now() - timedelta(days=1)
        test_date = yesterday.strftime('%Y-%m-%d')
        
        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ {test_date}")
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–æ –∏–º–ø–æ—Ä—Ç–∞
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT(*) as cnt FROM fact_orders WHERE source_id = (SELECT id FROM sources WHERE code = 'WB')")
        count_before = cursor.fetchone()[0]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
        import_sales(test_date, test_date)
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        cursor.execute("SELECT COUNT(*) as cnt FROM fact_orders WHERE source_id = (SELECT id FROM sources WHERE code = 'WB')")
        count_after = cursor.fetchone()[0]
        
        cursor.close()
        connection.close()
        
        imported_count = count_after - count_before
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {imported_count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂: {e}")
        return False


def test_finance_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å."""
    logger.info("=== –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π ===")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        yesterday = datetime.now() - timedelta(days=1)
        test_date = yesterday.strftime('%Y-%m-%d')
        
        logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞ {test_date}")
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–æ –∏–º–ø–æ—Ä—Ç–∞
        connection = connect_to_db()
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT(*) as cnt FROM fact_transactions WHERE source_id = (SELECT id FROM sources WHERE code = 'WB')")
        count_before = cursor.fetchone()[0]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
        import_financial_details(test_date, test_date)
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        cursor.execute("SELECT COUNT(*) as cnt FROM fact_transactions WHERE source_id = (SELECT id FROM sources WHERE code = 'WB')")
        count_after = cursor.fetchone()[0]
        
        cursor.close()
        connection.close()
        
        imported_count = count_after - count_before
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {imported_count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π: {e}")
        return False


def test_data_quality():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        connection = connect_to_db()
        cursor = connection.cursor(dictionary=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–∞–∂–∏
        cursor.execute("""
            SELECT 
                COUNT(*) as total_orders,
                COUNT(DISTINCT order_id) as unique_orders,
                SUM(CASE WHEN transaction_type = '–ø—Ä–æ–¥–∞–∂–∞' THEN 1 ELSE 0 END) as sales,
                SUM(CASE WHEN transaction_type = '–≤–æ–∑–≤—Ä–∞—Ç' THEN 1 ELSE 0 END) as returns
            FROM fact_orders 
            WHERE source_id = (SELECT id FROM sources WHERE code = 'WB')
        """)
        
        orders_stats = cursor.fetchone()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ WB:")
        logger.info(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {orders_stats['total_orders']}")
        logger.info(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {orders_stats['unique_orders']}")
        logger.info(f"  –ü—Ä–æ–¥–∞–∂–∏: {orders_stats['sales']}")
        logger.info(f"  –í–æ–∑–≤—Ä–∞—Ç—ã: {orders_stats['returns']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.execute("""
            SELECT 
                COUNT(*) as total_transactions,
                COUNT(DISTINCT transaction_id) as unique_transactions,
                SUM(CASE WHEN amount > 0 THEN 1 ELSE 0 END) as positive_amounts,
                SUM(CASE WHEN amount < 0 THEN 1 ELSE 0 END) as negative_amounts
            FROM fact_transactions 
            WHERE source_id = (SELECT id FROM sources WHERE code = 'WB')
        """)
        
        trans_stats = cursor.fetchone()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π WB:")
        logger.info(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {trans_stats['total_transactions']}")
        logger.info(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {trans_stats['unique_transactions']}")
        logger.info(f"  –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã: {trans_stats['positive_amounts']}")
        logger.info(f"  –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—É–º–º—ã: {trans_stats['negative_amounts']}")
        
        cursor.close()
        connection.close()
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Wildberries")
    logger.info("=" * 50)
    
    tests_passed = 0
    tests_total = 0
    
    # –¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
    tests_total += 1
    if test_database_setup():
        tests_passed += 1
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    tests_total += 1
    if test_reference_data():
        tests_passed += 1
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂
    tests_total += 1
    if test_sales_import():
        tests_passed += 1
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
    tests_total += 1
    if test_finance_import():
        tests_passed += 1
    
    logger.info("-" * 30)
    
    # –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    tests_total += 1
    if test_data_quality():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    logger.info("=" * 50)
    logger.info(f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {tests_passed}/{tests_total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if tests_passed == tests_total:
        logger.info("üéâ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Wildberries —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        logger.info("üí° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: python main.py --source=wb --last-7-days")
        return 0
    else:
        logger.error("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
