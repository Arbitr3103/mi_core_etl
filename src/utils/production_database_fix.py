#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.
"""

import os
import mysql.connector
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def fix_production_database():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ."""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ mi_core
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            user=os.getenv('DB_USER', 'v_admin'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME', 'mi_core'),
            charset='utf8mb4',
            collation='utf8mb4_unicode_ci'
        )
        
        cursor = connection.cursor()
        
        print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...")
        
        # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø product_id –Ω–∞ BIGINT
        print("1. –ò–∑–º–µ–Ω—è–µ–º product_id –Ω–∞ BIGINT...")
        try:
            cursor.execute("ALTER TABLE inventory_data MODIFY COLUMN product_id BIGINT NOT NULL")
            print("‚úÖ product_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ BIGINT")
        except mysql.connector.Error as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è product_id: {e}")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ sync_logs
        print("2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ sync_logs...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("DESCRIBE sync_logs")
        existing_columns = [row[0] for row in cursor.fetchall()]
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = [
            ('source', 'VARCHAR(50) DEFAULT "Ozon"'),
            ('records_inserted', 'INT DEFAULT 0'),
            ('records_failed', 'INT DEFAULT 0'),
            ('duration_seconds', 'INT DEFAULT 0'),
            ('api_requests_count', 'INT DEFAULT 0'),
            ('warning_message', 'TEXT')
        ]
        
        for column_name, column_definition in required_columns:
            if column_name not in existing_columns:
                try:
                    cursor.execute(f"ALTER TABLE sync_logs ADD COLUMN {column_name} {column_definition}")
                    print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                except mysql.connector.Error as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
            else:
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ozon_warehouses –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        print("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É ozon_warehouses...")
        try:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS ozon_warehouses (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    warehouse_id BIGINT NOT NULL UNIQUE,
                    name VARCHAR(255) NOT NULL,
                    is_rfbs BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ozon_warehouses —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except mysql.connector.Error as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ozon_warehouses: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
        
        cursor.execute("DESCRIBE inventory_data")
        inventory_columns = cursor.fetchall()
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ inventory_data:")
        for col in inventory_columns:
            print(f"  - {col[0]}: {col[1]}")
        
        cursor.execute("DESCRIBE sync_logs")
        sync_columns = cursor.fetchall()
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ sync_logs:")
        for col in sync_columns:
            print(f"  - {col[0]}: {col[1]}")
        
        cursor.close()
        connection.close()
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    fix_production_database()