#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ ROI.
–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏.
"""

import sys
import os
import logging
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from replenishment_recommender import ReplenishmentRecommender, ReplenishmentRecommendation, PriorityLevel
from margin_analyzer import MarginAnalyzer, MarginAnalysis, MarginCategory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@dataclass
class EnhancedRecommendation(ReplenishmentRecommendation):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    margin_percentage: float
    margin_category: str
    monthly_profit: float
    roi_forecast: float
    
    # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    margin_adjusted_priority: PriorityLevel
    margin_adjusted_quantity: int
    investment_recommendation: float
    
    # –ë–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç—ã
    profitability_score: float
    investment_priority: int  # 1-5, –≥–¥–µ 1 - –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç


class EnhancedRecommender(ReplenishmentRecommender):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self, connection=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞."""
        super().__init__(connection)
        self.margin_analyzer = MarginAnalyzer(connection)
    
    def generate_enhanced_recommendations(self, source: Optional[str] = None,
                                        min_margin_threshold: float = 5.0,
                                        min_roi_threshold: float = 20.0) -> List[EnhancedRecommendation]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            min_margin_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (%)
            min_roi_threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ ROI (%)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            base_recommendations = self.generate_recommendations(source)
            
            if not base_recommendations:
                logger.warning("–ù–µ—Ç –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
                return []
            
            enhanced_recommendations = []
            processed = 0
            
            for base_rec in base_recommendations:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                    item = self._get_inventory_item(base_rec.product_id)
                    if not item:
                        continue
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                    margin_analysis = self.margin_analyzer.analyze_product_margin(item)
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–∞–º
                    if (margin_analysis.margin_percentage < min_margin_threshold or 
                        margin_analysis.roi_forecast < min_roi_threshold):
                        logger.debug(f"–¢–æ–≤–∞—Ä {base_rec.sku} –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä—ã –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                    enhanced_rec = self._create_enhanced_recommendation(base_rec, margin_analysis)
                    enhanced_recommendations.append(enhanced_rec)
                    
                    processed += 1
                    if processed % 50 == 0:
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ {base_rec.sku}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            enhanced_recommendations = self._prioritize_enhanced_recommendations(enhanced_recommendations)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(enhanced_recommendations)} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return enhanced_recommendations
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return []
    
    def _get_inventory_item(self, product_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            items = self.inventory_analyzer.get_current_stock()
            for item in items:
                if item.product_id == product_id:
                    return item
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            return None
    
    def _create_enhanced_recommendation(self, base_rec: ReplenishmentRecommendation,
                                      margin_analysis: MarginAnalysis) -> EnhancedRecommendation:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        margin_adjusted_priority = self._adjust_priority_by_margin(
            base_rec.priority_level, margin_analysis.margin_category, margin_analysis.roi_forecast
        )
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ ROI
        margin_adjusted_quantity = self._adjust_quantity_by_roi(
            base_rec.recommended_order_quantity, margin_analysis.roi_forecast, margin_analysis.margin_percentage
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        investment_recommendation = margin_adjusted_quantity * (base_rec.cost_price or margin_analysis.cost_price)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (0-100)
        profitability_score = self._calculate_profitability_score(
            margin_analysis.margin_percentage, margin_analysis.roi_forecast, margin_analysis.daily_sales_rate
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (1-5)
        investment_priority = self._calculate_investment_priority(
            margin_adjusted_priority, profitability_score, margin_analysis.roi_forecast
        )
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        enhanced_rec = EnhancedRecommendation(
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ ReplenishmentRecommendation
            product_id=base_rec.product_id,
            sku=base_rec.sku,
            product_name=base_rec.product_name,
            source=base_rec.source,
            current_stock=base_rec.current_stock,
            reserved_stock=base_rec.reserved_stock,
            available_stock=base_rec.available_stock,
            daily_sales_rate_7d=base_rec.daily_sales_rate_7d,
            daily_sales_rate_14d=base_rec.daily_sales_rate_14d,
            daily_sales_rate_30d=base_rec.daily_sales_rate_30d,
            days_until_stockout=base_rec.days_until_stockout,
            recommended_order_quantity=base_rec.recommended_order_quantity,
            recommended_order_value=base_rec.recommended_order_value,
            priority_level=base_rec.priority_level,
            urgency_score=base_rec.urgency_score,
            last_sale_date=base_rec.last_sale_date,
            last_restock_date=base_rec.last_restock_date,
            sales_trend=base_rec.sales_trend,
            inventory_turnover_days=base_rec.inventory_turnover_days,
            days_since_last_sale=base_rec.days_since_last_sale,
            min_stock_level=base_rec.min_stock_level,
            reorder_point=base_rec.reorder_point,
            lead_time_days=base_rec.lead_time_days,
            analysis_date=base_rec.analysis_date,
            confidence_level=base_rec.confidence_level,
            
            # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            margin_percentage=margin_analysis.margin_percentage,
            margin_category=margin_analysis.margin_category.value,
            monthly_profit=margin_analysis.monthly_profit,
            roi_forecast=margin_analysis.roi_forecast,
            margin_adjusted_priority=margin_adjusted_priority,
            margin_adjusted_quantity=margin_adjusted_quantity,
            investment_recommendation=investment_recommendation,
            profitability_score=profitability_score,
            investment_priority=investment_priority
        )
        
        return enhanced_rec
    
    def _adjust_priority_by_margin(self, base_priority: PriorityLevel, 
                                 margin_category: MarginCategory, roi_forecast: float) -> PriorityLevel:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        
        # –í—ã—Å–æ–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å —Ö–æ—Ä–æ—à–∏–º ROI - –ø–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if margin_category == MarginCategory.HIGH_MARGIN and roi_forecast > 50:
            if base_priority == PriorityLevel.MEDIUM:
                return PriorityLevel.HIGH
            elif base_priority == PriorityLevel.LOW:
                return PriorityLevel.MEDIUM
        
        # –ù–∏–∑–∫–æ–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã - –ø–æ–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif margin_category == MarginCategory.LOW_MARGIN or roi_forecast < 20:
            if base_priority == PriorityLevel.HIGH:
                return PriorityLevel.MEDIUM
            elif base_priority == PriorityLevel.MEDIUM:
                return PriorityLevel.LOW
        
        # –£–±—ã—Ç–æ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif margin_category == MarginCategory.NEGATIVE_MARGIN:
            return PriorityLevel.LOW
        
        return base_priority
    
    def _adjust_quantity_by_roi(self, base_quantity: int, roi_forecast: float, 
                              margin_percentage: float) -> int:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ROI."""
        
        if roi_forecast > 100:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π ROI
            multiplier = 1.5
        elif roi_forecast > 50:  # –í—ã—Å–æ–∫–∏–π ROI
            multiplier = 1.3
        elif roi_forecast > 30:  # –•–æ—Ä–æ—à–∏–π ROI
            multiplier = 1.1
        elif roi_forecast > 20:  # –ü—Ä–∏–µ–º–ª–µ–º—ã–π ROI
            multiplier = 1.0
        elif roi_forecast > 10:  # –ù–∏–∑–∫–∏–π ROI
            multiplier = 0.8
        else:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π ROI
            multiplier = 0.5
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞—Ä–∂–µ
        if margin_percentage > 40:
            multiplier *= 1.2
        elif margin_percentage < 10:
            multiplier *= 0.8
        
        adjusted_quantity = int(base_quantity * multiplier)
        return max(1, adjusted_quantity)  # –ú–∏–Ω–∏–º—É–º 1 —à—Ç—É–∫–∞
    
    def _calculate_profitability_score(self, margin_percentage: float, 
                                     roi_forecast: float, daily_sales_rate: float) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (0-100)."""
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ü–µ–Ω–∫–∏
        margin_score = min(margin_percentage * 2, 40)  # –ú–∞–∫—Å–∏–º—É–º 40 –±–∞–ª–ª–æ–≤ –∑–∞ –º–∞—Ä–∂—É
        roi_score = min(roi_forecast * 0.5, 30)        # –ú–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤ –∑–∞ ROI
        velocity_score = min(daily_sales_rate * 5, 30) # –ú–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂
        
        total_score = margin_score + roi_score + velocity_score
        return min(100, max(0, total_score))
    
    def _calculate_investment_priority(self, priority_level: PriorityLevel, 
                                     profitability_score: float, roi_forecast: float) -> int:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (1-5, –≥–¥–µ 1 - –Ω–∞–∏–≤—ã—Å—à–∏–π)."""
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é
        base_priority = {
            PriorityLevel.CRITICAL: 1,
            PriorityLevel.HIGH: 2,
            PriorityLevel.MEDIUM: 3,
            PriorityLevel.LOW: 4
        }.get(priority_level, 5)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        if profitability_score > 80 and roi_forecast > 50:
            base_priority = max(1, base_priority - 1)  # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif profitability_score < 40 or roi_forecast < 20:
            base_priority = min(5, base_priority + 1)  # –ü–æ–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        return base_priority
    
    def _prioritize_enhanced_recommendations(self, recommendations: List[EnhancedRecommendation]) -> List[EnhancedRecommendation]:
        """–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        
        return sorted(recommendations, key=lambda r: (
            r.investment_priority,                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            -r.profitability_score,                   # –ü–æ—Ç–æ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
            -r.roi_forecast,                          # –ü–æ—Ç–æ–º –ø–æ ROI (—É–±—ã–≤–∞–Ω–∏–µ)
            r.days_until_stockout or 999              # –ü–æ—Ç–æ–º –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)
        ))
    
    def get_investment_summary(self, recommendations: List[EnhancedRecommendation]) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º."""
        
        if not recommendations:
            return {}
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        by_priority = {}
        total_investment = 0
        total_monthly_profit = 0
        
        for rec in recommendations:
            priority = rec.investment_priority
            if priority not in by_priority:
                by_priority[priority] = {
                    'count': 0,
                    'total_investment': 0,
                    'total_profit': 0,
                    'avg_roi': 0,
                    'avg_margin': 0
                }
            
            by_priority[priority]['count'] += 1
            by_priority[priority]['total_investment'] += rec.investment_recommendation
            by_priority[priority]['total_profit'] += rec.monthly_profit
            
            total_investment += rec.investment_recommendation
            total_monthly_profit += rec.monthly_profit
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for priority_data in by_priority.values():
            if priority_data['count'] > 0:
                priority_recs = [r for r in recommendations if r.investment_priority == priority]
                priority_data['avg_roi'] = sum(r.roi_forecast for r in priority_recs) / len(priority_recs)
                priority_data['avg_margin'] = sum(r.margin_percentage for r in priority_recs) / len(priority_recs)
        
        # –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        top_by_profitability = sorted(recommendations, key=lambda x: x.profitability_score, reverse=True)[:10]
        top_by_roi = sorted(recommendations, key=lambda x: x.roi_forecast, reverse=True)[:10]
        
        return {
            'total_recommendations': len(recommendations),
            'total_investment_needed': round(total_investment, 2),
            'total_monthly_profit_forecast': round(total_monthly_profit, 2),
            'portfolio_roi_forecast': round((total_monthly_profit / total_investment * 100) if total_investment > 0 else 0, 2),
            'by_investment_priority': by_priority,
            'top_by_profitability': [
                {
                    'sku': r.sku,
                    'profitability_score': round(r.profitability_score, 1),
                    'investment': round(r.investment_recommendation, 2),
                    'monthly_profit': round(r.monthly_profit, 2)
                } for r in top_by_profitability
            ],
            'top_by_roi': [
                {
                    'sku': r.sku,
                    'roi_forecast': round(r.roi_forecast, 1),
                    'margin_percentage': round(r.margin_percentage, 1),
                    'investment': round(r.investment_recommendation, 2)
                } for r in top_by_roi
            ],
            'analysis_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    
    def export_enhanced_recommendations(self, recommendations: List[EnhancedRecommendation], 
                                      filename: str = None) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ CSV."""
        
        if not filename:
            filename = f"enhanced_recommendations_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            import csv
            
            with open(filename, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                writer.writerow([
                    'SKU', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫', '–ë–∞–∑–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
                    '–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (—Ä—É–±)', '–ú–∞—Ä–∂–∞ (%)',
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Ä–∂–∏', '–ü—Ä–æ–≥–Ω–æ–∑ ROI (%)', '–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Ä—É–±)',
                    '–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', '–î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è'
                ])
                
                # –î–∞–Ω–Ω—ã–µ
                for rec in recommendations:
                    writer.writerow([
                        rec.sku,
                        rec.product_name,
                        rec.current_stock,
                        rec.recommended_order_quantity,
                        rec.margin_adjusted_quantity,
                        round(rec.investment_recommendation, 2),
                        round(rec.margin_percentage, 2),
                        rec.margin_category,
                        round(rec.roi_forecast, 2),
                        round(rec.monthly_profit, 2),
                        round(rec.profitability_score, 1),
                        rec.investment_priority,
                        rec.days_until_stockout or '–ù/–î'
                    ])
            
            logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        super().close()
        if self.margin_analyzer:
            self.margin_analyzer.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞."""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    recommender = None
    try:
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        recommender = EnhancedRecommender()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = recommender.generate_enhanced_recommendations(
            min_margin_threshold=10.0,  # –ú–∏–Ω–∏–º—É–º 10% –º–∞—Ä–∂–∏
            min_roi_threshold=25.0      # –ú–∏–Ω–∏–º—É–º 25% ROI
        )
        
        if recommendations:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
            summary = recommender.get_investment_summary(recommendations)
            
            print("\nüéØ –£–õ–£–ß–®–ï–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–û–ü–û–õ–ù–ï–ù–ò–Æ:")
            print("=" * 70)
            print(f"–í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {summary['total_recommendations']}")
            print(f"–¢—Ä–µ–±—É–µ–º—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {summary['total_investment_needed']:,.2f} —Ä—É–±")
            print(f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã–ª–∏: {summary['total_monthly_profit_forecast']:,.2f} —Ä—É–±/–º–µ—Å")
            print(f"–ü—Ä–æ–≥–Ω–æ–∑ ROI –ø–æ—Ä—Ç—Ñ–µ–ª—è: {summary['portfolio_roi_forecast']:.1f}%")
            
            print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–£ –ò–ù–í–ï–°–¢–ò–¶–ò–ô:")
            for priority, data in summary['by_investment_priority'].items():
                priority_name = {1: '–ù–∞–∏–≤—ã—Å—à–∏–π', 2: '–í—ã—Å–æ–∫–∏–π', 3: '–°—Ä–µ–¥–Ω–∏–π', 4: '–ù–∏–∑–∫–∏–π', 5: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π'}.get(priority, str(priority))
                print(f"  {priority_name} ({priority}): {data['count']} —Ç–æ–≤–∞—Ä–æ–≤, "
                      f"–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {data['total_investment']:,.0f} —Ä—É–±, "
                      f"—Å—Ä–µ–¥–Ω–∏–π ROI: {data['avg_roi']:.1f}%")
            
            print(f"\nüèÜ –¢–û–ü-5 –ü–û –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò:")
            for i, item in enumerate(summary['top_by_profitability'][:5], 1):
                print(f"  {i}. {item['sku']}: –æ—Ü–µ–Ω–∫–∞ {item['profitability_score']}, "
                      f"–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ {item['investment']:,.0f} —Ä—É–±, "
                      f"–ø—Ä–∏–±—ã–ª—å {item['monthly_profit']:,.0f} —Ä—É–±/–º–µ—Å")
            
            print(f"\nüíé –¢–û–ü-5 –ü–û ROI:")
            for i, item in enumerate(summary['top_by_roi'][:5], 1):
                print(f"  {i}. {item['sku']}: ROI {item['roi_forecast']:.1f}%, "
                      f"–º–∞—Ä–∂–∞ {item['margin_percentage']:.1f}%, "
                      f"–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ {item['investment']:,.0f} —Ä—É–±")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if recommender.export_enhanced_recommendations(recommendations):
                print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV —Ñ–∞–π–ª")
        
        else:
            print("‚ÑπÔ∏è  –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏")
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main(): {e}")
        
    finally:
        if recommender:
            recommender.close()


if __name__ == "__main__":
    main()