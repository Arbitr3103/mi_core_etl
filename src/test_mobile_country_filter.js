/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –ê–¥–∞–ø—Ç–∞—Ü–∏—é –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * 2. –£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö
 * 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 *
 * @version 1.0
 * @author ZUZ System
 */

class MobileCountryFilterTester {
  constructor() {
    this.testResults = {
      mobileAdaptation: [],
      touchUsability: [],
      loadingOptimization: [],
    };

    this.performanceMetrics = {
      loadTimes: [],
      responseTimes: [],
      memoryUsage: [],
      cacheEfficiency: 0,
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests() {
    console.log("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ CountryFilter");

    try {
      await this.testMobileAdaptation();
      await this.testTouchUsability();
      await this.testLoadingOptimization();

      this.generateReport();
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:", error);
    }
  }

  /**
   * –¢–µ—Å—Ç 1: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  async testMobileAdaptation() {
    console.log("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");

    const tests = [
      this.testMobileDetection(),
      this.testResponsiveLayout(),
      this.testMobileClasses(),
      this.testViewportHandling(),
      this.testOrientationChange(),
    ];

    const results = await Promise.allSettled(tests);

    results.forEach((result, index) => {
      if (result.status === "fulfilled") {
        this.testResults.mobileAdaptation.push(result.value);
      } else {
        this.testResults.mobileAdaptation.push({
          test: `Mobile Adaptation Test ${index + 1}`,
          status: "failed",
          error: result.reason.message,
        });
      }
    });
  }

  /**
   * –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async testMobileDetection() {
    const startTime = performance.now();

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.createElement("div");
    container.id = "test-mobile-detection";
    document.body.appendChild(container);

    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π user agent
      const originalUserAgent = navigator.userAgent;
      Object.defineProperty(navigator, "userAgent", {
        value:
          "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15",
        configurable: true,
      });

      const filter = new CountryFilter("test-mobile-detection", () => {});

      const isMobileDetected = filter.isMobile;
      const hasTouchSupport = filter.isTouch;

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π user agent
      Object.defineProperty(navigator, "userAgent", {
        value: originalUserAgent,
        configurable: true,
      });

      const endTime = performance.now();

      return {
        test: "Mobile Device Detection",
        status: isMobileDetected ? "passed" : "failed",
        details: {
          mobileDetected: isMobileDetected,
          touchSupport: hasTouchSupport,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞
   */
  async testResponsiveLayout() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-responsive-layout";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-responsive-layout", () => {});

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
      const screenSizes = [
        { width: 320, height: 568, name: "iPhone SE" },
        { width: 375, height: 667, name: "iPhone 8" },
        { width: 414, height: 896, name: "iPhone 11" },
        { width: 768, height: 1024, name: "iPad" },
      ];

      const layoutTests = [];

      for (const size of screenSizes) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
        Object.defineProperty(window, "innerWidth", {
          value: size.width,
          configurable: true,
        });
        Object.defineProperty(window, "innerHeight", {
          value: size.height,
          configurable: true,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é
        filter.handleMobileResize();

        const filterElement = container.querySelector(".country-filter");
        const hasCompactClass = filterElement?.classList.contains(
          "country-filter--mobile-compact"
        );
        const selectElement = container.querySelector(".filter-select");
        const selectHeight = selectElement ? selectElement.offsetHeight : 0;

        layoutTests.push({
          screenSize: size.name,
          dimensions: `${size.width}x${size.height}`,
          compactMode: hasCompactClass,
          selectHeight: selectHeight,
          minTouchTarget: selectHeight >= 44, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è touch
        });
      }

      const endTime = performance.now();

      return {
        test: "Responsive Layout",
        status: layoutTests.every((t) => t.minTouchTarget)
          ? "passed"
          : "failed",
        details: {
          screenTests: layoutTests,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö CSS –∫–ª–∞—Å—Å–æ–≤
   */
  async testMobileClasses() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-mobile-classes";
    document.body.appendChild(container);

    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      Object.defineProperty(window, "innerWidth", {
        value: 375,
        configurable: true,
      });

      const filter = new CountryFilter("test-mobile-classes", () => {});

      const filterElement = container.querySelector(".country-filter");
      const hasMobileClass = filterElement?.classList.contains(
        "country-filter--mobile"
      );
      const selectElement = container.querySelector(".filter-select");
      const hasMobileAttribute = selectElement?.hasAttribute("data-mobile");

      const endTime = performance.now();

      return {
        test: "Mobile CSS Classes",
        status: hasMobileClass || hasMobileAttribute ? "passed" : "failed",
        details: {
          mobileClass: hasMobileClass,
          mobileAttribute: hasMobileAttribute,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ viewport
   */
  async testViewportHandling() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-viewport-handling";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-viewport-handling", () => {});

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ viewport meta tag
      const viewportMeta = document.querySelector('meta[name="viewport"]');
      const hasViewport = !!viewportMeta;
      const viewportContent = viewportMeta?.getAttribute("content") || "";

      const endTime = performance.now();

      return {
        test: "Viewport Handling",
        status: hasViewport ? "passed" : "failed",
        details: {
          hasViewportMeta: hasViewport,
          viewportContent: viewportContent,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
   */
  async testOrientationChange() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-orientation-change";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-orientation-change", () => {});

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
      const originalWidth = window.innerWidth;
      const originalHeight = window.innerHeight;

      // Portrait -> Landscape
      Object.defineProperty(window, "innerWidth", {
        value: 896,
        configurable: true,
      });
      Object.defineProperty(window, "innerHeight", {
        value: 414,
        configurable: true,
      });

      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      filter.handleMobileResize();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é
      const filterElement = container.querySelector(".country-filter");
      const adaptedToLandscape = !filterElement?.classList.contains(
        "country-filter--mobile-compact"
      );

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
      Object.defineProperty(window, "innerWidth", {
        value: originalWidth,
        configurable: true,
      });
      Object.defineProperty(window, "innerHeight", {
        value: originalHeight,
        configurable: true,
      });

      const endTime = performance.now();

      return {
        test: "Orientation Change",
        status: adaptedToLandscape ? "passed" : "failed",
        details: {
          landscapeAdaptation: adaptedToLandscape,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç 2: –£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö
   */
  async testTouchUsability() {
    console.log(
      "üëÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞—Ö..."
    );

    const tests = [
      this.testTouchTargetSize(),
      this.testTouchEvents(),
      this.testTouchFeedback(),
      this.testDoubleTapPrevention(),
      this.testScrollBehavior(),
    ];

    const results = await Promise.allSettled(tests);

    results.forEach((result, index) => {
      if (result.status === "fulfilled") {
        this.testResults.touchUsability.push(result.value);
      } else {
        this.testResults.touchUsability.push({
          test: `Touch Usability Test ${index + 1}`,
          status: "failed",
          error: result.reason.message,
        });
      }
    });
  }

  /**
   * –¢–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–∞ touch targets
   */
  async testTouchTargetSize() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-touch-target-size";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-touch-target-size", () => {});

      const selectElement = container.querySelector(".filter-select");
      const retryButton = container.querySelector(".retry-button");

      const selectRect = selectElement?.getBoundingClientRect();
      const buttonRect = retryButton?.getBoundingClientRect();

      const selectTouchSize = selectRect
        ? Math.min(selectRect.width, selectRect.height)
        : 0;
      const buttonTouchSize = buttonRect
        ? Math.min(buttonRect.width, buttonRect.height)
        : 0;

      const minTouchSize = 44; // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º –¥–ª—è iOS

      const endTime = performance.now();

      return {
        test: "Touch Target Size",
        status:
          selectTouchSize >= minTouchSize && buttonTouchSize >= 32
            ? "passed"
            : "failed",
        details: {
          selectSize: selectTouchSize,
          buttonSize: buttonTouchSize,
          minRequirement: minTouchSize,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç touch —Å–æ–±—ã—Ç–∏–π
   */
  async testTouchEvents() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-touch-events";
    document.body.appendChild(container);

    try {
      let touchStartCalled = false;
      let touchEndCalled = false;

      const filter = new CountryFilter("test-touch-events", () => {});
      const selectElement = container.querySelector(".filter-select");

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const originalHandleTouchStart = filter.handleTouchStart;
      const originalHandleTouchEnd = filter.handleTouchEnd;

      filter.handleTouchStart = function (event) {
        touchStartCalled = true;
        if (originalHandleTouchStart) {
          originalHandleTouchStart.call(this, event);
        }
      };

      filter.handleTouchEnd = function (event) {
        touchEndCalled = true;
        if (originalHandleTouchEnd) {
          originalHandleTouchEnd.call(this, event);
        }
      };

      // –ò–º–∏—Ç–∏—Ä—É–µ–º touch —Å–æ–±—ã—Ç–∏—è
      if (selectElement) {
        const touchStartEvent = new TouchEvent("touchstart", {
          touches: [{ clientX: 100, clientY: 100 }],
          bubbles: true,
        });

        const touchEndEvent = new TouchEvent("touchend", {
          touches: [],
          bubbles: true,
        });

        selectElement.dispatchEvent(touchStartEvent);
        selectElement.dispatchEvent(touchEndEvent);
      }

      const endTime = performance.now();

      return {
        test: "Touch Events",
        status: touchStartCalled && touchEndCalled ? "passed" : "failed",
        details: {
          touchStartHandled: touchStartCalled,
          touchEndHandled: touchEndCalled,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–∏ touch
   */
  async testTouchFeedback() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-touch-feedback";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-touch-feedback", () => {});
      const selectElement = container.querySelector(".filter-select");

      let feedbackProvided = false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSS transitions
      if (selectElement) {
        const computedStyle = getComputedStyle(selectElement);
        const hasTransition =
          computedStyle.transition !== "none" &&
          computedStyle.transition !== "";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º focus —Å—Ç–∏–ª–∏
        selectElement.focus();
        const focusStyle = getComputedStyle(selectElement);
        const hasFocusStyles =
          focusStyle.borderColor !== computedStyle.borderColor ||
          focusStyle.boxShadow !== "none";

        feedbackProvided = hasTransition || hasFocusStyles;
      }

      const endTime = performance.now();

      return {
        test: "Touch Feedback",
        status: feedbackProvided ? "passed" : "failed",
        details: {
          visualFeedback: feedbackProvided,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞
   */
  async testDoubleTapPrevention() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-double-tap-prevention";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-double-tap-prevention", () => {});
      const selectElement = container.querySelector(".filter-select");

      let preventDefaultCalled = false;

      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º preventDefault –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const originalPreventDefault = Event.prototype.preventDefault;
      Event.prototype.preventDefault = function () {
        preventDefaultCalled = true;
        originalPreventDefault.call(this);
      };

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ touch —Å–æ–±—ã—Ç–∏—è
      if (selectElement) {
        const now = Date.now();
        filter.lastTouchEnd = now - 200; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π touch

        const touchEvent = new TouchEvent("touchstart", {
          touches: [{ clientX: 100, clientY: 100 }],
          bubbles: true,
        });

        filter.handleTouchStart(touchEvent);
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π preventDefault
      Event.prototype.preventDefault = originalPreventDefault;

      const endTime = performance.now();

      return {
        test: "Double Tap Prevention",
        status: preventDefaultCalled ? "passed" : "warning",
        details: {
          preventionImplemented: preventDefaultCalled,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–∞
   */
  async testScrollBehavior() {
    const startTime = performance.now();

    const container = document.createElement("div");
    container.id = "test-scroll-behavior";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-scroll-behavior", () => {});
      const selectElement = container.querySelector(".filter-select");

      let hasScrollOptimization = false;

      if (selectElement) {
        const computedStyle = getComputedStyle(selectElement);
        hasScrollOptimization =
          computedStyle.webkitOverflowScrolling === "touch" ||
          computedStyle.overflowScrolling === "touch";
      }

      const endTime = performance.now();

      return {
        test: "Scroll Behavior",
        status: hasScrollOptimization ? "passed" : "warning",
        details: {
          scrollOptimization: hasScrollOptimization,
          executionTime: Math.round(endTime - startTime),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  async testLoadingOptimization() {
    console.log("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏...");

    const tests = [
      this.testInitializationTime(),
      this.testCacheEfficiency(),
      this.testNetworkOptimization(),
      this.testMemoryUsage(),
      this.testConnectionAdaptation(),
    ];

    const results = await Promise.allSettled(tests);

    results.forEach((result, index) => {
      if (result.status === "fulfilled") {
        this.testResults.loadingOptimization.push(result.value);
      } else {
        this.testResults.loadingOptimization.push({
          test: `Loading Optimization Test ${index + 1}`,
          status: "failed",
          error: result.reason.message,
        });
      }
    });
  }

  /**
   * –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async testInitializationTime() {
    const container = document.createElement("div");
    container.id = "test-initialization-time";
    document.body.appendChild(container);

    try {
      const iterations = 5;
      const times = [];

      for (let i = 0; i < iterations; i++) {
        const startTime = performance.now();
        const filter = new CountryFilter("test-initialization-time", () => {});
        const endTime = performance.now();

        times.push(endTime - startTime);

        // –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        container.innerHTML = "";
      }

      const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
      const maxAcceptableTime = 100; // 100ms –º–∞–∫—Å–∏–º—É–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

      return {
        test: "Initialization Time",
        status: avgTime <= maxAcceptableTime ? "passed" : "failed",
        details: {
          averageTime: Math.round(avgTime),
          maxTime: Math.max(...times),
          minTime: Math.min(...times),
          maxAcceptable: maxAcceptableTime,
          iterations: iterations,
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
   */
  async testCacheEfficiency() {
    const container = document.createElement("div");
    container.id = "test-cache-efficiency";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-cache-efficiency", () => {});

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ API
      let apiCallCount = 0;
      const originalFetch = window.fetch;

      window.fetch = async function (url) {
        apiCallCount++;
        return {
          ok: true,
          json: () =>
            Promise.resolve({
              success: true,
              data: [{ id: 1, name: "Test Country" }],
            }),
        };
      };

      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å API)
      const startTime1 = performance.now();
      await filter.loadCountries();
      const endTime1 = performance.now();

      // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
      const startTime2 = performance.now();
      await filter.loadCountries();
      const endTime2 = performance.now();

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fetch
      window.fetch = originalFetch;

      const firstCallTime = endTime1 - startTime1;
      const secondCallTime = endTime2 - startTime2;
      const cacheEfficiency =
        ((firstCallTime - secondCallTime) / firstCallTime) * 100;

      return {
        test: "Cache Efficiency",
        status:
          apiCallCount === 1 && cacheEfficiency > 50 ? "passed" : "failed",
        details: {
          apiCalls: apiCallCount,
          firstCallTime: Math.round(firstCallTime),
          secondCallTime: Math.round(secondCallTime),
          cacheEfficiency: Math.round(cacheEfficiency),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  async testNetworkOptimization() {
    const container = document.createElement("div");
    container.id = "test-network-optimization";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-network-optimization", () => {});

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
      const isMobileOptimized =
        filter.isMobile && filter.cacheTimeout > 15 * 60 * 1000;
      const hasDebouncing = filter.debounceDelay > 0;
      const hasRetryLogic = typeof filter.fetchWithRetry === "function";

      return {
        test: "Network Optimization",
        status:
          isMobileOptimized && hasDebouncing && hasRetryLogic
            ? "passed"
            : "failed",
        details: {
          mobileOptimized: isMobileOptimized,
          debouncing: hasDebouncing,
          retryLogic: hasRetryLogic,
          cacheTimeout: filter.cacheTimeout,
          debounceDelay: filter.debounceDelay,
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  async testMemoryUsage() {
    const container = document.createElement("div");
    container.id = "test-memory-usage";
    document.body.appendChild(container);

    try {
      const initialMemory = performance.memory
        ? performance.memory.usedJSHeapSize
        : 0;

      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞
      const filters = [];
      for (let i = 0; i < 10; i++) {
        const testContainer = document.createElement("div");
        testContainer.id = `test-memory-${i}`;
        container.appendChild(testContainer);

        filters.push(new CountryFilter(`test-memory-${i}`, () => {}));
      }

      const afterCreationMemory = performance.memory
        ? performance.memory.usedJSHeapSize
        : 0;

      // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      filters.forEach((filter) => filter.destroy());

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
      if (window.gc) {
        window.gc();
      }

      const afterDestroyMemory = performance.memory
        ? performance.memory.usedJSHeapSize
        : 0;

      const memoryIncrease = afterCreationMemory - initialMemory;
      const memoryLeakage = afterDestroyMemory - initialMemory;

      return {
        test: "Memory Usage",
        status: memoryLeakage < memoryIncrease * 0.5 ? "passed" : "warning",
        details: {
          initialMemory: Math.round(initialMemory / 1024),
          afterCreation: Math.round(afterCreationMemory / 1024),
          afterDestroy: Math.round(afterDestroyMemory / 1024),
          memoryIncrease: Math.round(memoryIncrease / 1024),
          memoryLeakage: Math.round(memoryLeakage / 1024),
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ç–∏–ø—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async testConnectionAdaptation() {
    const container = document.createElement("div");
    container.id = "test-connection-adaptation";
    document.body.appendChild(container);

    try {
      const filter = new CountryFilter("test-connection-adaptation", () => {});

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
      const hasConnectionDetection =
        typeof filter.getConnectionType === "function";
      const hasConnectionAdaptation =
        typeof filter.adaptToConnection === "function";

      let connectionTypeDetected = "unknown";
      if (hasConnectionDetection) {
        connectionTypeDetected = filter.getConnectionType();
      }

      return {
        test: "Connection Adaptation",
        status: hasConnectionDetection ? "passed" : "warning",
        details: {
          connectionDetection: hasConnectionDetection,
          connectionAdaptation: hasConnectionAdaptation,
          detectedConnection: connectionTypeDetected,
        },
      };
    } finally {
      document.body.removeChild(container);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
   */
  generateReport() {
    console.log("\nüìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ú–û–ë–ò–õ–¨–ù–û–ô –ê–î–ê–ü–¢–ê–¶–ò–ò");
    console.log("=".repeat(50));

    const allTests = [
      ...this.testResults.mobileAdaptation,
      ...this.testResults.touchUsability,
      ...this.testResults.loadingOptimization,
    ];

    const passedTests = allTests.filter((t) => t.status === "passed").length;
    const failedTests = allTests.filter((t) => t.status === "failed").length;
    const warningTests = allTests.filter((t) => t.status === "warning").length;

    console.log(`\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warningTests}`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${allTests.length}`);
    console.log(
      `üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passedTests / allTests.length) * 100)}%`
    );

    // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    this.printCategoryResults(
      "üì± –ê–î–ê–ü–¢–ê–¶–ò–Ø –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• –£–°–¢–†–û–ô–°–¢–í",
      this.testResults.mobileAdaptation
    );
    this.printCategoryResults(
      "üëÜ –£–î–û–ë–°–¢–í–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ù–ê –°–ï–ù–°–û–†–ù–´–• –≠–ö–†–ê–ù–ê–•",
      this.testResults.touchUsability
    );
    this.printCategoryResults(
      "‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò –ó–ê–ì–†–£–ó–ö–ò",
      this.testResults.loadingOptimization
    );

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.printRecommendations(allTests);
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  printCategoryResults(categoryName, results) {
    console.log(`\n${categoryName}:`);
    console.log("-".repeat(categoryName.length));

    results.forEach((result) => {
      const statusIcon =
        result.status === "passed"
          ? "‚úÖ"
          : result.status === "failed"
          ? "‚ùå"
          : "‚ö†Ô∏è";

      console.log(`${statusIcon} ${result.test}`);

      if (result.details) {
        Object.entries(result.details).forEach(([key, value]) => {
          console.log(`   ${key}: ${value}`);
        });
      }

      if (result.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
      }
    });
  }

  /**
   * –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  printRecommendations(allTests) {
    console.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:");
    console.log("-".repeat(15));

    const failedTests = allTests.filter((t) => t.status === "failed");
    const warningTests = allTests.filter((t) => t.status === "warning");

    if (failedTests.length === 0 && warningTests.length === 0) {
      console.log(
        "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ."
      );
      return;
    }

    if (failedTests.some((t) => t.test.includes("Touch Target"))) {
      console.log(
        "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä touch targets –¥–æ –º–∏–Ω–∏–º—É–º 44px –¥–ª—è –ª—É—á—à–µ–≥–æ UX"
      );
    }

    if (failedTests.some((t) => t.test.includes("Mobile Detection"))) {
      console.log("‚Ä¢ –£–ª—É—á—à–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
    }

    if (failedTests.some((t) => t.test.includes("Cache Efficiency"))) {
      console.log("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    }

    if (warningTests.some((t) => t.test.includes("Memory Usage"))) {
      console.log(
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
      );
    }

    if (warningTests.some((t) => t.test.includes("Connection"))) {
      console.log("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π");
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", async () => {
  const tester = new MobileCountryFilterTester();
  await tester.runAllTests();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== "undefined" && module.exports) {
  module.exports = MobileCountryFilterTester;
}
