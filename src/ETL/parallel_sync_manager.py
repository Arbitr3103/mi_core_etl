#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.

–§—É–Ω–∫—Ü–∏–∏:
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
- –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import asyncio
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Callable, Tuple
from dataclasses import dataclass, field
from enum import Enum
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
import logging
import json
import queue
from collections import defaultdict, deque
import psutil
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from api_request_optimizer import APIRequestOptimizer
    from inventory_sync_service_optimized import OptimizedInventorySyncService, SyncResult, SyncStatus
    import config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

logger = logging.getLogger(__name__)


class SyncPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4


class ResourceType(Enum):
    """–¢–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    CPU = "cpu"
    MEMORY = "memory"
    NETWORK = "network"
    DATABASE = "database"


@dataclass
class SyncTask:
    """–ó–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    marketplace: str
    task_type: str
    priority: SyncPriority
    created_at: datetime = field(default_factory=datetime.now)
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    result: Optional[SyncResult] = None
    error: Optional[str] = None
    retry_count: int = 0
    max_retries: int = 3
    
    @property
    def duration(self) -> Optional[timedelta]:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        if self.started_at and self.completed_at:
            return self.completed_at - self.started_at
        return None
    
    @property
    def is_completed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        return self.completed_at is not None
    
    @property
    def is_failed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        return self.error is not None or (self.result and self.result.status == SyncStatus.FAILED)


@dataclass
class ResourceUsage:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    cpu_percent: float
    memory_percent: float
    memory_mb: float
    network_io: Dict[str, int]
    disk_io: Dict[str, int]
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    total_tasks: int = 0
    completed_tasks: int = 0
    failed_tasks: int = 0
    avg_duration: float = 0.0
    throughput_per_minute: float = 0.0
    resource_usage: Optional[ResourceUsage] = None
    cache_hit_rate: float = 0.0
    api_requests_per_minute: float = 0.0


class ParallelSyncManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    
    def __init__(
        self,
        max_workers: int = 4,
        max_concurrent_marketplaces: int = 2,
        resource_monitoring: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
            max_concurrent_marketplaces: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
            resource_monitoring: –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        self.max_workers = max_workers
        self.max_concurrent_marketplaces = max_concurrent_marketplaces
        self.resource_monitoring = resource_monitoring
        
        # –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        self._task_queues = {
            SyncPriority.CRITICAL: queue.PriorityQueue(),
            SyncPriority.HIGH: queue.PriorityQueue(),
            SyncPriority.NORMAL: queue.PriorityQueue(),
            SyncPriority.LOW: queue.PriorityQueue()
        }
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._active_tasks: Dict[str, SyncTask] = {}
        self._completed_tasks: List[SyncTask] = []
        self._task_lock = threading.Lock()
        
        # –ü—É–ª—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        self._thread_executor = ThreadPoolExecutor(max_workers=max_workers)
        self._process_executor = ProcessPoolExecutor(max_workers=max(1, max_workers // 2))
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        self._resource_history: deque = deque(maxlen=100)
        self._monitoring_active = False
        self._monitoring_thread: Optional[threading.Thread] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._performance_metrics = PerformanceMetrics()
        self._start_time = datetime.now()
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä API –∑–∞–ø—Ä–æ—Å–æ–≤
        self._api_optimizer = APIRequestOptimizer()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
        self._marketplace_configs = {
            'Ozon': {
                'max_concurrent_requests': 10,
                'batch_size': 1000,
                'retry_delay': 5,
                'timeout': 30
            },
            'Wildberries': {
                'max_concurrent_requests': 5,
                'batch_size': 1000,
                'retry_delay': 10,
                'timeout': 60
            }
        }
    
    def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self.resource_monitoring and not self._monitoring_active:
            self._monitoring_active = True
            self._monitoring_thread = threading.Thread(target=self._monitor_resources, daemon=True)
            self._monitoring_thread.start()
            logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        self._monitoring_active = False
        if self._monitoring_thread:
            self._monitoring_thread.join(timeout=5)
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_resources(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
        while self._monitoring_active:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                network_io = psutil.net_io_counters()._asdict()
                disk_io = psutil.disk_io_counters()._asdict()
                
                resource_usage = ResourceUsage(
                    cpu_percent=cpu_percent,
                    memory_percent=memory.percent,
                    memory_mb=memory.used / 1024 / 1024,
                    network_io=network_io,
                    disk_io=disk_io
                )
                
                self._resource_history.append(resource_usage)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                if cpu_percent > 90:
                    logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%")
                
                if memory.percent > 85:
                    logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent:.1f}%")
                
                time.sleep(5)  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
                time.sleep(10)
    
    def add_sync_task(
        self,
        marketplace: str,
        task_type: str = "inventory_sync",
        priority: SyncPriority = SyncPriority.NORMAL
    ) -> str:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å.
        
        Args:
            marketplace: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            ID –∑–∞–¥–∞—á–∏
        """
        task = SyncTask(
            marketplace=marketplace,
            task_type=task_type,
            priority=priority
        )
        
        task_id = f"{marketplace}_{task_type}_{int(time.time())}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        priority_queue = self._task_queues[priority]
        priority_queue.put((priority.value, task_id, task))
        
        with self._task_lock:
            self._active_tasks[task_id] = task
        
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id} —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority.name}")
        return task_id
    
    def _get_next_task(self) -> Optional[Tuple[str, SyncTask]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for priority in [SyncPriority.CRITICAL, SyncPriority.HIGH, SyncPriority.NORMAL, SyncPriority.LOW]:
            priority_queue = self._task_queues[priority]
            
            try:
                _, task_id, task = priority_queue.get_nowait()
                return task_id, task
            except queue.Empty:
                continue
        
        return None
    
    def _check_resource_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."""
        if not self._resource_history:
            return True
        
        latest_usage = self._resource_history[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏
        if latest_usage.cpu_percent > 95:
            logger.debug("üö´ CPU –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ...")
            return False
        
        if latest_usage.memory_percent > 90:
            logger.debug("üö´ –ü–∞–º—è—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ...")
            return False
        
        return True
    
    def _execute_sync_task(self, task_id: str, task: SyncTask) -> SyncResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            task: –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}")
        
        task.started_at = datetime.now()
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_service = OptimizedInventorySyncService(
                batch_size=self._marketplace_configs[task.marketplace]['batch_size'],
                max_workers=self.max_workers
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            if task.marketplace == 'Ozon':
                result = sync_service.sync_ozon_inventory_optimized()
            elif task.marketplace == 'Wildberries':
                result = sync_service.sync_wb_inventory()  # –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {task.marketplace}")
            
            task.result = result
            task.completed_at = datetime.now()
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return result
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}"
            logger.error(f"‚ùå {error_msg}")
            
            task.error = error_msg
            task.completed_at = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
            result = SyncResult(
                source=task.marketplace,
                status=SyncStatus.FAILED,
                records_processed=0,
                records_updated=0,
                records_inserted=0,
                records_failed=0,
                started_at=task.started_at,
                completed_at=task.completed_at,
                error_message=error_msg
            )
            
            task.result = result
            return result
    
    def _should_retry_task(self, task: SyncTask) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
        if task.retry_count >= task.max_retries:
            return False
        
        if task.is_failed and task.error:
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö –æ—à–∏–±–æ–∫
            retryable_errors = [
                "timeout",
                "connection",
                "rate limit",
                "temporary"
            ]
            
            error_lower = task.error.lower()
            return any(err in error_lower for err in retryable_errors)
        
        return False
    
    async def run_parallel_sync(
        self,
        marketplaces: List[str],
        wait_for_completion: bool = True
    ) -> Dict[str, SyncResult]:
        """
        –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.
        
        Args:
            marketplaces: –°–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            wait_for_completion: –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {', '.join(marketplaces)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.start_monitoring()
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
            task_ids = []
            for marketplace in marketplaces:
                task_id = self.add_sync_task(marketplace, priority=SyncPriority.HIGH)
                task_ids.append(task_id)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á
            futures = []
            active_marketplaces = set()
            
            while task_ids or futures:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–æ–≤
                if not self._check_resource_availability():
                    await asyncio.sleep(5)
                    continue
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
                while (len(active_marketplaces) < self.max_concurrent_marketplaces and 
                       len(futures) < self.max_workers):
                    
                    next_task = self._get_next_task()
                    if not next_task:
                        break
                    
                    task_id, task = next_task
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                    if task.marketplace in active_marketplaces:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
                        priority_queue = self._task_queues[task.priority]
                        priority_queue.put((task.priority.value, task_id, task))
                        break
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
                    future = self._thread_executor.submit(self._execute_sync_task, task_id, task)
                    futures.append((future, task_id, task))
                    active_marketplaces.add(task.marketplace)
                    
                    logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id} –¥–ª—è {task.marketplace}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                completed_futures = []
                for future, task_id, task in futures:
                    if future.done():
                        completed_futures.append((future, task_id, task))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for future, task_id, task in completed_futures:
                    futures.remove((future, task_id, task))
                    active_marketplaces.discard(task.marketplace)
                    
                    try:
                        result = future.result()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–∞
                        if self._should_retry_task(task):
                            task.retry_count += 1
                            retry_task_id = self.add_sync_task(
                                task.marketplace,
                                task.task_type,
                                SyncPriority.HIGH
                            )
                            task_ids.append(retry_task_id)
                            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {task.retry_count} –¥–ª—è {task_id}")
                        else:
                            # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ
                            with self._task_lock:
                                self._completed_tasks.append(task)
                                if task_id in self._active_tasks:
                                    del self._active_tasks[task_id]
                            
                            if task_id in task_ids:
                                task_ids.remove(task_id)
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(1)
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if wait_for_completion:
                while futures:
                    await asyncio.sleep(1)
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    completed_futures = [(f, tid, t) for f, tid, t in futures if f.done()]
                    for future, task_id, task in completed_futures:
                        futures.remove((future, task_id, task))
                        try:
                            future.result()
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = {}
            for task in self._completed_tasks:
                if task.result:
                    results[task.marketplace] = task.result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self._update_performance_metrics()
            
            logger.info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return results
            
        finally:
            self.stop_monitoring()
    
    def _update_performance_metrics(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        total_tasks = len(self._completed_tasks)
        completed_tasks = len([t for t in self._completed_tasks if not t.is_failed])
        failed_tasks = len([t for t in self._completed_tasks if t.is_failed])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        durations = [t.duration.total_seconds() for t in self._completed_tasks if t.duration]
        avg_duration = sum(durations) / len(durations) if durations else 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        elapsed_time = (datetime.now() - self._start_time).total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        throughput = completed_tasks / elapsed_time if elapsed_time > 0 else 0.0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        api_stats = self._api_optimizer.get_performance_stats()
        
        self._performance_metrics = PerformanceMetrics(
            total_tasks=total_tasks,
            completed_tasks=completed_tasks,
            failed_tasks=failed_tasks,
            avg_duration=avg_duration,
            throughput_per_minute=throughput,
            resource_usage=self._resource_history[-1] if self._resource_history else None,
            cache_hit_rate=api_stats['cache_stats']['hit_rate'],
            api_requests_per_minute=api_stats['api_stats']['total_requests'] / elapsed_time if elapsed_time > 0 else 0.0
        )
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        self._update_performance_metrics()
        
        return {
            'performance_metrics': {
                'total_tasks': self._performance_metrics.total_tasks,
                'completed_tasks': self._performance_metrics.completed_tasks,
                'failed_tasks': self._performance_metrics.failed_tasks,
                'success_rate': (
                    self._performance_metrics.completed_tasks / self._performance_metrics.total_tasks
                    if self._performance_metrics.total_tasks > 0 else 0.0
                ),
                'avg_duration_seconds': self._performance_metrics.avg_duration,
                'throughput_per_minute': self._performance_metrics.throughput_per_minute,
                'cache_hit_rate': self._performance_metrics.cache_hit_rate,
                'api_requests_per_minute': self._performance_metrics.api_requests_per_minute
            },
            'resource_usage': (
                {
                    'cpu_percent': self._performance_metrics.resource_usage.cpu_percent,
                    'memory_percent': self._performance_metrics.resource_usage.memory_percent,
                    'memory_mb': self._performance_metrics.resource_usage.memory_mb,
                    'timestamp': self._performance_metrics.resource_usage.timestamp.isoformat()
                }
                if self._performance_metrics.resource_usage else None
            ),
            'active_tasks': len(self._active_tasks),
            'queue_sizes': {
                priority.name: queue.qsize() for priority, queue in self._task_queues.items()
            },
            'api_optimizer_stats': self._api_optimizer.get_performance_stats()
        }
    
    def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        
        self.stop_monitoring()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—É–ª—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        self._thread_executor.shutdown(wait=True)
        self._process_executor.shutdown(wait=True)
        
        # –û—á–∏—â–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä API
        self._api_optimizer.cleanup()
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    manager = ParallelSyncManager(
        max_workers=4,
        max_concurrent_marketplaces=2,
        resource_monitoring=True
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        results = await manager.run_parallel_sync(['Ozon', 'Wildberries'])
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for marketplace, result in results.items():
            print(f"\n{marketplace} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:")
            print(f"  –°—Ç–∞—Ç—É—Å: {result.status.value}")
            print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.records_processed}")
            print(f"  –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
            print(f"  –í—Ä–µ–º—è: {result.duration_seconds} —Å–µ–∫")
        
        # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_report = manager.get_performance_report()
        print(f"\n–û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print(json.dumps(performance_report, indent=2, default=str))
        
    finally:
        manager.cleanup()


if __name__ == "__main__":
    asyncio.run(main())