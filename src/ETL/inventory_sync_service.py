#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏.

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π inventory_data –∏ –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π –ë–î.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è: warehouse_name, stock_type, quantity_present, quantity_reserved.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import requests
import time
from datetime import datetime, date
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from importers.ozon_importer import connect_to_db
    import config
    from inventory_data_validator import InventoryDataValidator, ValidationResult
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SyncStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    SUCCESS = "success"
    PARTIAL = "partial"
    FAILED = "failed"


class StockType(Enum):
    """–¢–∏–ø—ã —Å–∫–ª–∞–¥–æ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤."""
    FBO = "FBO"
    FBS = "FBS"
    REAL_FBS = "realFBS"


@dataclass
class InventoryRecord:
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞."""
    product_id: int
    sku: str
    source: str
    warehouse_name: str
    stock_type: str
    current_stock: int
    reserved_stock: int
    available_stock: int
    quantity_present: int
    quantity_reserved: int
    snapshot_date: date
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
        self.current_stock = max(0, int(self.current_stock or 0))
        self.reserved_stock = max(0, int(self.reserved_stock or 0))
        self.available_stock = max(0, int(self.available_stock or 0))
        self.quantity_present = max(0, int(self.quantity_present or 0))
        self.quantity_reserved = max(0, int(self.quantity_reserved or 0))
        
        # –ï—Å–ª–∏ available_stock –Ω–µ –∑–∞–¥–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
        if self.available_stock == 0 and self.current_stock > 0:
            self.available_stock = max(0, self.current_stock - self.reserved_stock)


@dataclass
class SyncResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    source: str
    status: SyncStatus
    records_processed: int
    records_updated: int
    records_inserted: int
    records_failed: int
    started_at: datetime
    completed_at: Optional[datetime] = None
    error_message: Optional[str] = None
    api_requests_count: int = 0
    
    @property
    def duration_seconds(self) -> int:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if self.completed_at:
            return int((self.completed_at - self.started_at).total_seconds())
        return 0


class InventorySyncService:
    """–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.connection = None
        self.cursor = None
        self.validator = InventoryDataValidator()
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def get_product_id_by_ozon_sku(self, sku_ozon: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Ozon.
        
        Args:
            sku_ozon: SKU —Ç–æ–≤–∞—Ä–∞ –≤ Ozon
            
        Returns:
            int: ID —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î –∏–ª–∏ None
        """
        if not sku_ozon:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE sku_ozon = %s",
                (sku_ozon,)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_ozon {sku_ozon}: {e}")
            return None

    def get_product_id_by_wb_sku(self, sku_wb: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Wildberries.
        
        Args:
            sku_wb: SKU —Ç–æ–≤–∞—Ä–∞ –≤ Wildberries
            
        Returns:
            int: ID —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î –∏–ª–∏ None
        """
        if not sku_wb:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE sku_wb = %s",
                (str(sku_wb),)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_wb {sku_wb}: {e}")
            return None

    def get_product_id_by_barcode(self, barcode: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É.
        
        Args:
            barcode: –®—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            int: ID —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î –∏–ª–∏ None
        """
        if not barcode:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE barcode = %s",
                (barcode,)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ barcode {barcode}: {e}")
            return None

    def update_inventory_data(self, inventory_records: List[InventoryRecord], source: str) -> Tuple[int, int, int]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã inventory_data —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UPSERT –ª–æ–≥–∏–∫–∏.
        
        Args:
            inventory_records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon' –∏–ª–∏ 'Wildberries')
            
        Returns:
            Tuple[int, int, int]: (–æ–±–Ω–æ–≤–ª–µ–Ω–æ, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ—à–∏–±–æ–∫)
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ inventory_data –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}")
        
        if not inventory_records:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ {source}")
            return 0, 0, 0
        
        updated_count = 0
        inserted_count = 0
        failed_count = 0
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –¥–∞—Ç—ã
            today = date.today()
            delete_query = """
                DELETE FROM inventory_data 
                WHERE source = %s AND snapshot_date = %s
            """
            self.cursor.execute(delete_query, (source, today))
            deleted_count = self.cursor.rowcount
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {source} –∑–∞ {today}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            insert_query = """
                INSERT INTO inventory_data 
                (product_id, sku, source, warehouse_name, stock_type, 
                 snapshot_date, current_stock, reserved_stock, available_stock,
                 quantity_present, quantity_reserved, last_sync_at)
                VALUES (%(product_id)s, %(sku)s, %(source)s, %(warehouse_name)s, %(stock_type)s,
                       %(snapshot_date)s, %(current_stock)s, %(reserved_stock)s, %(available_stock)s,
                       %(quantity_present)s, %(quantity_reserved)s, NOW())
            """
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
            batch_size = 100
            for i in range(0, len(inventory_records), batch_size):
                batch = inventory_records[i:i + batch_size]
                batch_data = []
                
                for record in batch:
                    try:
                        record_data = {
                            'product_id': record.product_id,
                            'sku': record.sku,
                            'source': record.source,
                            'warehouse_name': record.warehouse_name,
                            'stock_type': record.stock_type,
                            'snapshot_date': record.snapshot_date,
                            'current_stock': record.current_stock,
                            'reserved_stock': record.reserved_stock,
                            'available_stock': record.available_stock,
                            'quantity_present': record.quantity_present,
                            'quantity_reserved': record.quantity_reserved
                        }
                        batch_data.append(record_data)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                        failed_count += 1
                
                if batch_data:
                    try:
                        self.cursor.executemany(insert_query, batch_data)
                        inserted_count += len(batch_data)
                        logger.info(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(batch_data)} –∑–∞–ø–∏—Å–µ–π (–±–∞—Ç—á {i//batch_size + 1})")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞: {e}")
                        failed_count += len(batch_data)
            
            self.connection.commit()
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ inventory_data –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count}, –æ—à–∏–±–æ–∫ {failed_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ inventory_data: {e}")
            self.connection.rollback()
            raise
        
        return updated_count, inserted_count, failed_count

    def log_sync_result(self, result: SyncResult) -> None:
        """
        –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É sync_logs.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            insert_query = """
                INSERT INTO sync_logs 
                (sync_type, source, status, records_processed, records_updated, 
                 records_inserted, records_failed, started_at, completed_at, 
                 api_requests_count, error_message)
                VALUES ('inventory', %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            
            self.cursor.execute(insert_query, (
                result.source,
                result.status.value,
                result.records_processed,
                result.records_updated,
                result.records_inserted,
                result.records_failed,
                result.started_at,
                result.completed_at,
                result.api_requests_count,
                result.error_message
            ))
            
            self.connection.commit()
            logger.info(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {result.source} –∑–∞–ø–∏—Å–∞–Ω –≤ sync_logs")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ sync_logs: {e}")

    def get_last_sync_time(self, source: str) -> Optional[datetime]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            datetime: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ None
        """
        try:
            self.cursor.execute("""
                SELECT MAX(completed_at) as last_sync
                FROM sync_logs 
                WHERE source = %s AND status = 'success' AND sync_type = 'inventory'
            """, (source,))
            
            result = self.cursor.fetchone()
            return result['last_sync'] if result and result['last_sync'] else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return None

    def check_data_freshness(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.
        
        Returns:
            Dict: –û—Ç—á–µ—Ç –æ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            self.cursor.execute("""
                SELECT 
                    source,
                    MAX(last_sync_at) as last_update,
                    COUNT(DISTINCT product_id) as unique_products,
                    SUM(quantity_present) as total_present,
                    SUM(quantity_reserved) as total_reserved
                FROM inventory_data 
                WHERE snapshot_date = CURDATE()
                GROUP BY source
            """)
            
            results = self.cursor.fetchall()
            
            freshness_report = {
                'check_time': datetime.now(),
                'sources': {}
            }
            
            for row in results:
                source = row['source']
                last_update = row['last_update']
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Å–∞—Ö
                if last_update:
                    age_hours = (datetime.now() - last_update).total_seconds() / 3600
                    is_fresh = age_hours <= 6  # –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏, –µ—Å–ª–∏ –º–ª–∞–¥—à–µ 6 —á–∞—Å–æ–≤
                else:
                    age_hours = None
                    is_fresh = False
                
                freshness_report['sources'][source] = {
                    'last_update': last_update,
                    'age_hours': age_hours,
                    'is_fresh': is_fresh,
                    'unique_products': row['unique_products'],
                    'total_present': row['total_present'],
                    'total_reserved': row['total_reserved']
                }
            
            return freshness_report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {'error': str(e)}

    def get_inventory_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º.
        
        Returns:
            Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
        """
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            self.cursor.execute("""
                SELECT 
                    source,
                    warehouse_name,
                    stock_type,
                    COUNT(*) as total_records,
                    COUNT(DISTINCT product_id) as unique_products,
                    SUM(quantity_present) as total_present,
                    SUM(quantity_reserved) as total_reserved,
                    SUM(available_stock) as total_available,
                    MAX(last_sync_at) as last_sync
                FROM inventory_data 
                WHERE snapshot_date = CURDATE()
                GROUP BY source, warehouse_name, stock_type
                ORDER BY source, warehouse_name, stock_type
            """)
            
            stats = self.cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            statistics = {}
            for stat in stats:
                source = stat['source']
                if source not in statistics:
                    statistics[source] = {
                        'warehouses': {},
                        'totals': {
                            'records': 0,
                            'products': set(),
                            'present': 0,
                            'reserved': 0,
                            'available': 0
                        }
                    }
                
                warehouse_key = f"{stat['warehouse_name']} ({stat['stock_type']})"
                statistics[source]['warehouses'][warehouse_key] = {
                    'records': stat['total_records'],
                    'unique_products': stat['unique_products'],
                    'present': stat['total_present'],
                    'reserved': stat['total_reserved'],
                    'available': stat['total_available'],
                    'last_sync': stat['last_sync']
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
                statistics[source]['totals']['records'] += stat['total_records']
                statistics[source]['totals']['present'] += stat['total_present']
                statistics[source]['totals']['reserved'] += stat['total_reserved']
                statistics[source]['totals']['available'] += stat['total_available']
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —á–∏—Å–ª–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            for source_stats in statistics.values():
                source_stats['totals']['products'] = len(source_stats['totals']['products'])
            
            return statistics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}

    def run_full_sync(self) -> Dict[str, SyncResult]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.
        
        Returns:
            Dict[str, SyncResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        results = {}
        
        try:
            self.connect_to_database()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon
            logger.info("=" * 50)
            logger.info("–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í OZON")
            logger.info("=" * 50)
            
            try:
                ozon_result = self.sync_ozon_inventory()
                results['Ozon'] = ozon_result
                self.log_sync_result(ozon_result)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon: {e}")
                results['Ozon'] = SyncResult(
                    source='Ozon',
                    status=SyncStatus.FAILED,
                    records_processed=0,
                    records_updated=0,
                    records_inserted=0,
                    records_failed=0,
                    started_at=datetime.now(),
                    completed_at=datetime.now(),
                    error_message=str(e)
                )
                self.log_sync_result(results['Ozon'])
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Wildberries
            logger.info("=" * 50)
            logger.info("–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í WILDBERRIES")
            logger.info("=" * 50)
            
            try:
                wb_result = self.sync_wb_inventory()
                results['Wildberries'] = wb_result
                self.log_sync_result(wb_result)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Wildberries: {e}")
                results['Wildberries'] = SyncResult(
                    source='Wildberries',
                    status=SyncStatus.FAILED,
                    records_processed=0,
                    records_updated=0,
                    records_inserted=0,
                    records_failed=0,
                    started_at=datetime.now(),
                    completed_at=datetime.now(),
                    error_message=str(e)
                )
                self.log_sync_result(results['Wildberries'])
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_sync_summary(results)
            
            logger.info("‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            raise
        finally:
            self.close_database_connection()
        
        return results

    def sync_ozon_inventory(self) -> SyncResult:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon —á–µ—Ä–µ–∑ API.
        
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon...")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        inventory_records = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API Ozon
            url = f"{config.OZON_API_BASE_URL}/v3/product/info/stocks"
            headers = {
                "Client-Id": config.OZON_CLIENT_ID,
                "Api-Key": config.OZON_API_KEY,
                "Content-Type": "application/json"
            }
            
            offset = 0
            limit = 1000
            
            while True:
                payload = {
                    "filter": {},
                    "last_id": "",
                    "limit": limit
                }
                
                try:
                    response = requests.post(url, json=payload, headers=headers, timeout=30)
                    response.raise_for_status()
                    api_requests += 1
                    
                    data = response.json()
                    items = data.get('result', {}).get('items', [])
                    
                    if not items:
                        logger.info("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                        break
                    
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon (offset: {offset})")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                    for item in items:
                        records_processed += 1
                        
                        try:
                            offer_id = item.get('offer_id', '')
                            product_id = self.get_product_id_by_ozon_sku(offer_id)
                            
                            if not product_id:
                                logger.warning(f"–¢–æ–≤–∞—Ä —Å offer_id {offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                                records_failed += 1
                                continue
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
                            stocks = item.get('stocks', [])
                            if not stocks:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                                stocks = [{'warehouse_name': 'Ozon Main', 'type': 'FBO', 'present': 0, 'reserved': 0}]
                            
                            for stock in stocks:
                                warehouse_name = stock.get('warehouse_name', 'Ozon Main')
                                stock_type = stock.get('type', 'FBO')
                                quantity_present = max(0, int(stock.get('present', 0)))
                                quantity_reserved = max(0, int(stock.get('reserved', 0)))
                                
                                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                                inventory_record = InventoryRecord(
                                    product_id=product_id,
                                    sku=offer_id,
                                    source='Ozon',
                                    warehouse_name=warehouse_name,
                                    stock_type=stock_type,
                                    current_stock=quantity_present,
                                    reserved_stock=quantity_reserved,
                                    available_stock=max(0, quantity_present - quantity_reserved),
                                    quantity_present=quantity_present,
                                    quantity_reserved=quantity_reserved,
                                    snapshot_date=date.today()
                                )
                                
                                inventory_records.append(inventory_record)
                                
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.get('offer_id', 'unknown')}: {e}")
                            records_failed += 1
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if len(items) < limit:
                        break
                    
                    offset += limit
                    time.sleep(config.OZON_REQUEST_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                except requests.exceptions.RequestException as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ozon API: {e}")
                    records_failed += records_processed
                    break
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            if inventory_records:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                validation_result = self.validate_inventory_data(inventory_records, 'Ozon')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
                anomalies = self.check_data_anomalies(inventory_records, 'Ozon')
                if anomalies['anomalies']:
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö Ozon: {len(anomalies['anomalies'])} —Ç–∏–ø–æ–≤")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                valid_records = self.filter_valid_records(inventory_records, validation_result)
                
                if valid_records:
                    updated, inserted, failed = self.update_inventory_data(valid_records, 'Ozon')
                    records_inserted = inserted
                    records_failed += failed + (len(inventory_records) - len(valid_records))
                    
                    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                               f"–≤–∞–ª–∏–¥–Ω—ã—Ö {len(valid_records)}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
                else:
                    logger.error("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
                    records_failed = records_processed
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
            
            return SyncResult(
                source='Ozon',
                status=SyncStatus.SUCCESS if records_failed == 0 else SyncStatus.PARTIAL,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon: {e}")
            return SyncResult(
                source='Ozon',
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests
            )

    def sync_wb_inventory(self) -> SyncResult:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries —á–µ—Ä–µ–∑ API.
        
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries...")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        inventory_records = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API Wildberries
            url = f"{config.WB_SUPPLIERS_API_URL}/api/v1/supplier/stocks"
            headers = {
                "Authorization": config.WB_API_TOKEN
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            params = {
                'dateFrom': datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).isoformat()
            }
            
            try:
                response = requests.get(url, headers=headers, params=params, timeout=30)
                response.raise_for_status()
                api_requests += 1
                
                data = response.json()
                
                if not isinstance(data, list):
                    logger.warning("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API")
                    data = []
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
                for item in data:
                    records_processed += 1
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                        barcode = item.get('barcode', '')
                        nm_id = item.get('nmId', '')
                        
                        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É –∏–ª–∏ nmId
                        product_id = None
                        if barcode:
                            product_id = self.get_product_id_by_barcode(barcode)
                        if not product_id and nm_id:
                            product_id = self.get_product_id_by_wb_sku(str(nm_id))
                        
                        if not product_id:
                            logger.warning(f"–¢–æ–≤–∞—Ä —Å barcode {barcode} –∏–ª–∏ nmId {nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                            records_failed += 1
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        warehouse_name = item.get('warehouseName', 'WB Main')
                        quantity_present = max(0, int(item.get('quantity', 0)))
                        quantity_reserved = max(0, int(item.get('inWayToClient', 0)))
                        quantity_coming = max(0, int(item.get('inWayFromClient', 0)))
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                        inventory_record = InventoryRecord(
                            product_id=product_id,
                            sku=str(nm_id) if nm_id else barcode,
                            source='Wildberries',
                            warehouse_name=warehouse_name,
                            stock_type='FBS',  # WB –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FBS
                            current_stock=quantity_present,
                            reserved_stock=quantity_reserved,
                            available_stock=max(0, quantity_present - quantity_reserved),
                            quantity_present=quantity_present,
                            quantity_reserved=quantity_reserved,
                            snapshot_date=date.today()
                        )
                        
                        inventory_records.append(inventory_record)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ WB {item.get('nmId', 'unknown')}: {e}")
                        records_failed += 1
                
                time.sleep(config.WB_REQUEST_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
                
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API: {e}")
                records_failed = records_processed
                raise
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            if inventory_records:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                validation_result = self.validate_inventory_data(inventory_records, 'Wildberries')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
                anomalies = self.check_data_anomalies(inventory_records, 'Wildberries')
                if anomalies['anomalies']:
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö Wildberries: {len(anomalies['anomalies'])} —Ç–∏–ø–æ–≤")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                valid_records = self.filter_valid_records(inventory_records, validation_result)
                
                if valid_records:
                    updated, inserted, failed = self.update_inventory_data(valid_records, 'Wildberries')
                    records_inserted = inserted
                    records_failed += failed + (len(inventory_records) - len(valid_records))
                    
                    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Wildberries –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                               f"–≤–∞–ª–∏–¥–Ω—ã—Ö {len(valid_records)}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
                else:
                    logger.error("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
                    records_failed = records_processed
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
            
            return SyncResult(
                source='Wildberries',
                status=SyncStatus.SUCCESS if records_failed == 0 else SyncStatus.PARTIAL,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Wildberries: {e}")
            return SyncResult(
                source='Wildberries',
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests
            )

    def print_sync_summary(self, results: Dict[str, SyncResult]) -> None:
        """
        –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        logger.info("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
        logger.info("=" * 50)
        
        for source, result in results.items():
            logger.info(f"{source}:")
            logger.info(f"  –°—Ç–∞—Ç—É—Å: {result.status.value}")
            logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.records_processed}")
            logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result.records_updated}")
            logger.info(f"  –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
            logger.info(f"  –û—à–∏–±–æ–∫: {result.records_failed}")
            logger.info(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.duration_seconds} —Å–µ–∫")
            if result.error_message:
                logger.info(f"  –û—à–∏–±–∫–∞: {result.error_message}")
            logger.info("-" * 30)

    def get_ozon_inventory_via_reports(self) -> List[InventoryRecord]:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon —á–µ—Ä–µ–∑ CSV –æ—Ç—á–µ—Ç—ã.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
        
        Returns:
            List[InventoryRecord]: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        """
        logger.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ Ozon —á–µ—Ä–µ–∑ CSV –æ—Ç—á–µ—Ç—ã...")
        
        inventory_records = []
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏
            from importers.ozon_importer import request_report, get_report_data
            
            # –ó–∞–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            report_code = request_report('products')
            logger.info(f"–ó–∞–∫–∞–∑–∞–Ω –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º, –∫–æ–¥: {report_code}")
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
            max_attempts = 30
            for attempt in range(max_attempts):
                try:
                    report_data = get_report_data(report_code)
                    if report_data:
                        break
                except Exception:
                    if attempt < max_attempts - 1:
                        logger.info(f"–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}")
                        time.sleep(10)
                    else:
                        raise Exception("–û—Ç—á–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è")
            
            # –ü–∞—Ä—Å–∏–º CSV –¥–∞–Ω–Ω—ã–µ
            if report_data:
                csv_reader = csv.DictReader(io.StringIO(report_data))
                
                for row in csv_reader:
                    try:
                        offer_id = row.get('–ê—Ä—Ç–∏–∫—É–ª', '')
                        product_id = self.get_product_id_by_ozon_sku(offer_id)
                        
                        if not product_id:
                            continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–∫–ª–∞–¥–æ–≤
                        warehouse_types = [
                            ('FBO', '–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Å—Ö–µ–º–µ FBO, —à—Ç.', '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ, —à—Ç'),
                            ('FBS', '–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Å—Ö–µ–º–µ FBS, —à—Ç.', '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –º–æ–∏—Ö —Å–∫–ª–∞–¥–∞—Ö, —à—Ç'),
                            ('realFBS', '–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Å—Ö–µ–º–µ realFBS, —à—Ç.', None)
                        ]
                        
                        for stock_type, present_field, reserved_field in warehouse_types:
                            quantity_present = max(0, int(row.get(present_field, 0) or 0))
                            quantity_reserved = max(0, int(row.get(reserved_field, 0) or 0)) if reserved_field else 0
                            
                            if quantity_present > 0 or quantity_reserved > 0:
                                inventory_record = InventoryRecord(
                                    product_id=product_id,
                                    sku=offer_id,
                                    source='Ozon',
                                    warehouse_name=f'Ozon {stock_type}',
                                    stock_type=stock_type,
                                    current_stock=quantity_present,
                                    reserved_stock=quantity_reserved,
                                    available_stock=max(0, quantity_present - quantity_reserved),
                                    quantity_present=quantity_present,
                                    quantity_reserved=quantity_reserved,
                                    snapshot_date=date.today()
                                )
                                
                                inventory_records.append(inventory_record)
                                
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ CSV: {e}")
                        continue
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(inventory_records)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ CSV –æ—Ç—á–µ—Ç–∞")
            return inventory_records
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ CSV –æ—Ç—á–µ—Ç—ã: {e}")
            return []

    def get_wb_warehouses(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ Wildberries.
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
        """
        try:
            url = f"{config.WB_SUPPLIERS_API_URL}/api/v1/warehouses"
            headers = {
                "Authorization": config.WB_API_TOKEN
            }
            
            response = requests.get(url, headers=headers, timeout=30)
            response.raise_for_status()
            
            warehouses = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ WB")
            
            return warehouses if isinstance(warehouses, list) else []
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ WB: {e}")
            return []

    def get_wb_stocks_by_warehouse(self, warehouse_id: int, warehouse_name: str) -> List[InventoryRecord]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ WB.
        
        Args:
            warehouse_id: ID —Å–∫–ª–∞–¥–∞
            warehouse_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            
        Returns:
            List[InventoryRecord]: –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
        """
        inventory_records = []
        
        try:
            url = f"{config.WB_SUPPLIERS_API_URL}/api/v3/stocks/{warehouse_id}"
            headers = {
                "Authorization": config.WB_API_TOKEN
            }
            
            response = requests.get(url, headers=headers, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            
            for item in data.get('stocks', []):
                try:
                    nm_id = item.get('nmId', '')
                    product_id = self.get_product_id_by_wb_sku(str(nm_id))
                    
                    if not product_id:
                        continue
                    
                    quantity_present = max(0, int(item.get('quantity', 0)))
                    quantity_full = max(0, int(item.get('quantityFull', 0)))
                    quantity_reserved = max(0, quantity_full - quantity_present)
                    
                    inventory_record = InventoryRecord(
                        product_id=product_id,
                        sku=str(nm_id),
                        source='Wildberries',
                        warehouse_name=warehouse_name,
                        stock_type='FBS',
                        current_stock=quantity_present,
                        reserved_stock=quantity_reserved,
                        available_stock=quantity_present,
                        quantity_present=quantity_present,
                        quantity_reserved=quantity_reserved,
                        snapshot_date=date.today()
                    )
                    
                    inventory_records.append(inventory_record)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.get('nmId', 'unknown')}: {e}")
                    continue
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(inventory_records)} –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞ {warehouse_name}")
            return inventory_records
            
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∫–ª–∞–¥–∞ {warehouse_name}: {e}")
            return []

    def sync_wb_inventory_by_warehouses(self) -> SyncResult:
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ WB –ø–æ —Å–∫–ª–∞–¥–∞–º.
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞.
        
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è WB –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º...")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        all_inventory_records = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
            warehouses = self.get_wb_warehouses()
            api_requests += 1
            
            if not warehouses:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ WB")
                return SyncResult(
                    source='Wildberries',
                    status=SyncStatus.FAILED,
                    records_processed=0,
                    records_updated=0,
                    records_inserted=0,
                    records_failed=0,
                    started_at=started_at,
                    completed_at=datetime.now(),
                    error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤",
                    api_requests_count=api_requests
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
            for warehouse in warehouses:
                warehouse_id = warehouse.get('id')
                warehouse_name = warehouse.get('name', f'–°–∫–ª–∞–¥-{warehouse_id}')
                
                try:
                    warehouse_stocks = self.get_wb_stocks_by_warehouse(warehouse_id, warehouse_name)
                    api_requests += 1
                    
                    all_inventory_records.extend(warehouse_stocks)
                    records_processed += len(warehouse_stocks)
                    
                    time.sleep(config.WB_REQUEST_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∫–ª–∞–¥–∞ {warehouse_name}: {e}")
                    records_failed += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            if all_inventory_records:
                updated, inserted, failed = self.update_inventory_data(all_inventory_records, 'Wildberries')
                records_inserted = inserted
                records_failed += failed
                
                logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è WB –ø–æ —Å–∫–ª–∞–¥–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                           f"–≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
            
            return SyncResult(
                source='Wildberries',
                status=SyncStatus.SUCCESS if records_failed == 0 else SyncStatus.PARTIAL,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ WB –ø–æ —Å–∫–ª–∞–¥–∞–º: {e}")
            return SyncResult(
                source='Wildberries',
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests
            )

    def validate_inventory_data(self, inventory_records: List[InventoryRecord], source: str) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î.
        
        Args:
            inventory_records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –æ—Ç {source}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º InventoryRecord –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        records_dict = []
        for record in inventory_records:
            record_dict = {
                'product_id': record.product_id,
                'sku': record.sku,
                'source': record.source,
                'warehouse_name': record.warehouse_name,
                'stock_type': record.stock_type,
                'current_stock': record.current_stock,
                'reserved_stock': record.reserved_stock,
                'available_stock': record.available_stock,
                'quantity_present': record.quantity_present,
                'quantity_reserved': record.quantity_reserved,
                'snapshot_date': record.snapshot_date
            }
            records_dict.append(record_dict)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        validation_result = self.validator.validate_inventory_records(records_dict, source)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î
        if inventory_records:
            product_ids = [record.product_id for record in inventory_records if record.product_id]
            if product_ids:
                existence_result = self.validator.validate_product_existence(product_ids, self.cursor)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                validation_result.issues.extend(existence_result.issues)
                if not existence_result.is_valid:
                    validation_result.is_valid = False
        
        return validation_result

    def filter_valid_records(self, inventory_records: List[InventoryRecord], 
                           validation_result: ValidationResult) -> List[InventoryRecord]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
        
        Args:
            inventory_records: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            validation_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            List[InventoryRecord]: –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        if validation_result.is_valid:
            return inventory_records
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–µ–π —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
        error_record_ids = set()
        for issue in validation_result.issues:
            if issue.severity.value == 'error' and issue.record_id:
                error_record_ids.add(issue.record_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
        valid_records = []
        for i, record in enumerate(inventory_records):
            record_id = f"{record.source}_{i}"
            if record_id not in error_record_ids:
                valid_records.append(record)
        
        logger.info(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(valid_records)} –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(inventory_records)}")
        return valid_records

    def check_data_anomalies(self, inventory_records: List[InventoryRecord], source: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.
        
        Args:
            inventory_records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict: –û—Ç—á–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö
        """
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö {source}")
        
        anomalies = {
            'source': source,
            'total_records': len(inventory_records),
            'anomalies': [],
            'statistics': {}
        }
        
        if not inventory_records:
            return anomalies
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º
        quantities = [record.quantity_present for record in inventory_records]
        reserved_quantities = [record.quantity_reserved for record in inventory_records]
        
        anomalies['statistics'] = {
            'total_present': sum(quantities),
            'total_reserved': sum(reserved_quantities),
            'avg_present': sum(quantities) / len(quantities),
            'max_present': max(quantities),
            'min_present': min(quantities),
            'zero_stock_count': len([q for q in quantities if q == 0]),
            'high_stock_count': len([q for q in quantities if q > 1000])
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
        
        # 1. –¢–æ–≤–∞—Ä—ã —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        high_stock_threshold = 10000
        high_stock_records = [r for r in inventory_records if r.quantity_present > high_stock_threshold]
        if high_stock_records:
            anomalies['anomalies'].append({
                'type': 'high_stock',
                'description': f'–¢–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ > {high_stock_threshold}',
                'count': len(high_stock_records),
                'examples': [{'sku': r.sku, 'quantity': r.quantity_present} for r in high_stock_records[:5]]
            })
        
        # 2. –¢–æ–≤–∞—Ä—ã —Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
        invalid_reserved = [r for r in inventory_records if r.quantity_reserved > r.quantity_present]
        if invalid_reserved:
            anomalies['anomalies'].append({
                'type': 'invalid_reserved',
                'description': '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –±–æ–ª—å—à–µ —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ',
                'count': len(invalid_reserved),
                'examples': [{'sku': r.sku, 'present': r.quantity_present, 'reserved': r.quantity_reserved} 
                           for r in invalid_reserved[:5]]
            })
        
        # 3. –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è SKU
        sku_counts = {}
        for record in inventory_records:
            key = f"{record.sku}_{record.warehouse_name}_{record.stock_type}"
            sku_counts[key] = sku_counts.get(key, 0) + 1
        
        duplicates = {k: v for k, v in sku_counts.items() if v > 1}
        if duplicates:
            anomalies['anomalies'].append({
                'type': 'duplicate_sku',
                'description': '–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è SKU –≤ –æ–¥–Ω–æ–º —Å–∫–ª–∞–¥–µ',
                'count': len(duplicates),
                'examples': list(duplicates.items())[:5]
            })
        
        # 4. –¢–æ–≤–∞—Ä—ã –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
        zero_stock_records = [r for r in inventory_records if r.quantity_present == 0 and r.quantity_reserved == 0]
        if len(zero_stock_records) > len(inventory_records) * 0.5:  # –ë–æ–ª–µ–µ 50% —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
            anomalies['anomalies'].append({
                'type': 'too_many_zero_stock',
                'description': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)',
                'count': len(zero_stock_records),
                'percentage': (len(zero_stock_records) / len(inventory_records)) * 100
            })
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤ —Å–∫–ª–∞–¥–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        if source == 'Ozon':
            invalid_stock_types = [r for r in inventory_records if r.stock_type not in ['FBO', 'FBS', 'realFBS']]
        elif source == 'Wildberries':
            invalid_stock_types = [r for r in inventory_records if r.stock_type not in ['FBS', 'FBO']]
        else:
            invalid_stock_types = []
        
        if invalid_stock_types:
            anomalies['anomalies'].append({
                'type': 'invalid_stock_type',
                'description': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è {source}',
                'count': len(invalid_stock_types),
                'examples': [{'sku': r.sku, 'stock_type': r.stock_type} for r in invalid_stock_types[:5]]
            })
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(anomalies['anomalies'])} —Ç–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö {source}")
        return anomalies

    def compare_with_previous_sync(self, current_records: List[InventoryRecord], source: str) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π.
        
        Args:
            current_records: –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict: –û—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
        """
        logger.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π {source}")
        
        comparison = {
            'source': source,
            'current_count': len(current_records),
            'previous_count': 0,
            'changes': {
                'new_products': [],
                'removed_products': [],
                'quantity_changes': [],
                'significant_changes': []
            }
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            yesterday = date.today().replace(day=date.today().day - 1)
            
            self.cursor.execute("""
                SELECT product_id, sku, warehouse_name, stock_type, 
                       quantity_present, quantity_reserved
                FROM inventory_data 
                WHERE source = %s AND snapshot_date = %s
            """, (source, yesterday))
            
            previous_data = self.cursor.fetchall()
            comparison['previous_count'] = len(previous_data)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            current_dict = {}
            for record in current_records:
                key = f"{record.product_id}_{record.warehouse_name}_{record.stock_type}"
                current_dict[key] = {
                    'sku': record.sku,
                    'present': record.quantity_present,
                    'reserved': record.quantity_reserved
                }
            
            previous_dict = {}
            for row in previous_data:
                key = f"{row['product_id']}_{row['warehouse_name']}_{row['stock_type']}"
                previous_dict[key] = {
                    'sku': row['sku'],
                    'present': row['quantity_present'],
                    'reserved': row['quantity_reserved']
                }
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            new_keys = set(current_dict.keys()) - set(previous_dict.keys())
            comparison['changes']['new_products'] = [
                {'key': key, 'sku': current_dict[key]['sku'], 'quantity': current_dict[key]['present']}
                for key in list(new_keys)[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            ]
            
            # –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            removed_keys = set(previous_dict.keys()) - set(current_dict.keys())
            comparison['changes']['removed_products'] = [
                {'key': key, 'sku': previous_dict[key]['sku'], 'quantity': previous_dict[key]['present']}
                for key in list(removed_keys)[:10]
            ]
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö
            common_keys = set(current_dict.keys()) & set(previous_dict.keys())
            for key in common_keys:
                current_qty = current_dict[key]['present']
                previous_qty = previous_dict[key]['present']
                
                if current_qty != previous_qty:
                    change = {
                        'sku': current_dict[key]['sku'],
                        'previous': previous_qty,
                        'current': current_qty,
                        'difference': current_qty - previous_qty
                    }
                    
                    comparison['changes']['quantity_changes'].append(change)
                    
                    # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–±–æ–ª–µ–µ 50% –∏–ª–∏ –±–æ–ª–µ–µ 100 –µ–¥–∏–Ω–∏—Ü)
                    if previous_qty > 0:
                        percent_change = abs(current_qty - previous_qty) / previous_qty * 100
                        if percent_change > 50 or abs(current_qty - previous_qty) > 100:
                            comparison['changes']['significant_changes'].append(change)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            comparison['changes']['quantity_changes'] = comparison['changes']['quantity_changes'][:20]
            comparison['changes']['significant_changes'] = comparison['changes']['significant_changes'][:10]
            
            logger.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–æ–≤—ã—Ö {len(new_keys)}, "
                       f"—É–¥–∞–ª–µ–Ω–Ω—ã—Ö {len(removed_keys)}, –∏–∑–º–µ–Ω–µ–Ω–∏–π {len(comparison['changes']['quantity_changes'])}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π: {e}")
            comparison['error'] = str(e)
        
        return comparison


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    service = InventorySyncService()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        service.connect_to_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        freshness = service.check_data_freshness()
        logger.info(f"üìà –û—Ç—á–µ—Ç –æ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {freshness}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = service.get_inventory_statistics()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {stats}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {e}")
    finally:
        service.close_database_connection()


if __name__ == "__main__":
    main()