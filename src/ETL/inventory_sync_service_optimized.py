#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏.

–£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
- –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ UPSERT –æ–ø–µ—Ä–∞—Ü–∏–∏
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import asyncio
import aiohttp
import time
from datetime import datetime, date
from typing import List, Dict, Any, Optional, Tuple, Set
from dataclasses import dataclass
from enum import Enum
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from importers.ozon_importer import connect_to_db
    import config
    from inventory_data_validator import InventoryDataValidator, ValidationResult
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SyncStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    SUCCESS = "success"
    PARTIAL = "partial"
    FAILED = "failed"


@dataclass
class InventoryRecord:
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞."""
    product_id: int
    sku: str
    source: str
    warehouse_name: str
    stock_type: str
    current_stock: int
    reserved_stock: int
    available_stock: int
    quantity_present: int
    quantity_reserved: int
    snapshot_date: date
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.current_stock = max(0, int(self.current_stock or 0))
        self.reserved_stock = max(0, int(self.reserved_stock or 0))
        self.available_stock = max(0, int(self.available_stock or 0))
        self.quantity_present = max(0, int(self.quantity_present or 0))
        self.quantity_reserved = max(0, int(self.quantity_reserved or 0))
        
        if self.available_stock == 0 and self.current_stock > 0:
            self.available_stock = max(0, self.current_stock - self.reserved_stock)


@dataclass
class SyncResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    source: str
    status: SyncStatus
    records_processed: int
    records_updated: int
    records_inserted: int
    records_failed: int
    started_at: datetime
    completed_at: Optional[datetime] = None
    error_message: Optional[str] = None
    api_requests_count: int = 0
    cache_hits: int = 0
    
    @property
    def duration_seconds(self) -> int:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if self.completed_at:
            return int((self.completed_at - self.started_at).total_seconds())
        return 0


class ProductCache:
    """–ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU."""
    
    def __init__(self):
        self._ozon_cache: Dict[str, int] = {}
        self._wb_cache: Dict[str, int] = {}
        self._barcode_cache: Dict[str, int] = {}
        self._lock = threading.Lock()
        self._loaded = False
    
    def load_cache(self, cursor) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        with self._lock:
            if self._loaded:
                return
            
            logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à —Ç–æ–≤–∞—Ä–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            cursor.execute("""
                SELECT id, sku_ozon, sku_wb, barcode 
                FROM dim_products 
                WHERE sku_ozon IS NOT NULL OR sku_wb IS NOT NULL OR barcode IS NOT NULL
            """)
            
            products = cursor.fetchall()
            
            for product in products:
                product_id = product['id']
                
                if product['sku_ozon']:
                    self._ozon_cache[product['sku_ozon']] = product_id
                
                if product['sku_wb']:
                    self._wb_cache[str(product['sku_wb'])] = product_id
                
                if product['barcode']:
                    self._barcode_cache[product['barcode']] = product_id
            
            self._loaded = True
            logger.info(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: Ozon={len(self._ozon_cache)}, WB={len(self._wb_cache)}, Barcode={len(self._barcode_cache)}")
    
    def get_product_id_by_ozon_sku(self, sku: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Ozon –∏–∑ –∫—ç—à–∞."""
        return self._ozon_cache.get(sku)
    
    def get_product_id_by_wb_sku(self, sku: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Wildberries –∏–∑ –∫—ç—à–∞."""
        return self._wb_cache.get(str(sku))
    
    def get_product_id_by_barcode(self, barcode: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É –∏–∑ –∫—ç—à–∞."""
        return self._barcode_cache.get(barcode)
    
    def clear_cache(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞."""
        with self._lock:
            self._ozon_cache.clear()
            self._wb_cache.clear()
            self._barcode_cache.clear()
            self._loaded = False


class OptimizedInventorySyncService:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤."""
    
    def __init__(self, batch_size: int = 1000, max_workers: int = 4):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        
        Args:
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.connection = None
        self.cursor = None
        self.validator = InventoryDataValidator()
        self.product_cache = ProductCache()
        self.batch_size = batch_size
        self.max_workers = max_workers
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à —Ç–æ–≤–∞—Ä–æ–≤
            self.product_cache.load_cache(self.cursor)
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def batch_upsert_inventory_data(self, inventory_records: List[InventoryRecord], source: str) -> Tuple[int, int, int]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã inventory_data.
        
        Args:
            inventory_records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon' –∏–ª–∏ 'Wildberries')
            
        Returns:
            Tuple[int, int, int]: (–æ–±–Ω–æ–≤–ª–µ–Ω–æ, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ—à–∏–±–æ–∫)
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ inventory_data –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source}")
        
        if not inventory_records:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ {source}")
            return 0, 0, 0
        
        updated_count = 0
        inserted_count = 0
        failed_count = 0
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –¥–∞—Ç—ã
            today = date.today()
            delete_query = """
                DELETE FROM inventory_data 
                WHERE source = %s AND snapshot_date = %s
            """
            self.cursor.execute(delete_query, (source, today))
            deleted_count = self.cursor.rowcount
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è {source} –∑–∞ {today}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
            insert_query = """
                INSERT INTO inventory_data 
                (product_id, sku, source, warehouse_name, stock_type, 
                 snapshot_date, current_stock, reserved_stock, available_stock,
                 quantity_present, quantity_reserved, last_sync_at)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
            """
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            total_batches = (len(inventory_records) + self.batch_size - 1) // self.batch_size
            
            for batch_num in range(total_batches):
                start_idx = batch_num * self.batch_size
                end_idx = min(start_idx + self.batch_size, len(inventory_records))
                batch = inventory_records[start_idx:end_idx]
                
                batch_data = []
                
                for record in batch:
                    try:
                        record_tuple = (
                            record.product_id,
                            record.sku,
                            record.source,
                            record.warehouse_name,
                            record.stock_type,
                            record.snapshot_date,
                            record.current_stock,
                            record.reserved_stock,
                            record.available_stock,
                            record.quantity_present,
                            record.quantity_reserved
                        )
                        batch_data.append(record_tuple)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                        failed_count += 1
                
                if batch_data:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º executemany –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
                        self.cursor.executemany(insert_query, batch_data)
                        inserted_count += len(batch_data)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                        if (batch_num + 1) % 10 == 0 or batch_num == total_batches - 1:
                            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: {batch_num + 1}/{total_batches}, "
                                       f"–≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {inserted_count}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞ {batch_num + 1}: {e}")
                        failed_count += len(batch_data)
            
            self.connection.commit()
            logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ inventory_data –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "
                       f"–≤—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count}, –æ—à–∏–±–æ–∫ {failed_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ inventory_data: {e}")
            self.connection.rollback()
            raise
        
        return updated_count, inserted_count, failed_count

    def process_inventory_batch(self, items: List[Dict], source: str) -> List[InventoryRecord]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ API –æ—Ç–≤–µ—Ç–∞
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            List[InventoryRecord]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        """
        inventory_records = []
        cache_hits = 0
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        chunk_size = max(1, len(items) // self.max_workers)
        chunks = [items[i:i + chunk_size] for i in range(0, len(items), chunk_size)]
        
        def process_chunk(chunk: List[Dict]) -> Tuple[List[InventoryRecord], int]:
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
            chunk_records = []
            chunk_cache_hits = 0
            
            for item in chunk:
                try:
                    if source == 'Ozon':
                        records, hits = self._process_ozon_item(item)
                    else:  # Wildberries
                        records, hits = self._process_wb_item(item)
                    
                    chunk_records.extend(records)
                    chunk_cache_hits += hits
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            
            return chunk_records, chunk_cache_hits
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            future_to_chunk = {executor.submit(process_chunk, chunk): chunk for chunk in chunks}
            
            for future in as_completed(future_to_chunk):
                try:
                    chunk_records, chunk_cache_hits = future.result()
                    inventory_records.extend(chunk_records)
                    cache_hits += chunk_cache_hits
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e}")
        
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(inventory_records)} –∑–∞–ø–∏—Å–µ–π, –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {cache_hits}")
        return inventory_records

    def _process_ozon_item(self, item: Dict) -> Tuple[List[InventoryRecord], int]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ Ozon API."""
        records = []
        cache_hits = 0
        
        offer_id = item.get('offer_id', '')
        product_id = self.product_cache.get_product_id_by_ozon_sku(offer_id)
        
        if product_id:
            cache_hits += 1
        else:
            logger.warning(f"–¢–æ–≤–∞—Ä —Å offer_id {offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            return records, cache_hits
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
        stocks = item.get('stocks', [])
        if not stocks:
            stocks = [{'warehouse_name': 'Ozon Main', 'type': 'FBO', 'present': 0, 'reserved': 0}]
        
        for stock in stocks:
            warehouse_name = stock.get('warehouse_name', 'Ozon Main')
            stock_type = stock.get('type', 'FBO')
            quantity_present = max(0, int(stock.get('present', 0)))
            quantity_reserved = max(0, int(stock.get('reserved', 0)))
            
            inventory_record = InventoryRecord(
                product_id=product_id,
                sku=offer_id,
                source='Ozon',
                warehouse_name=warehouse_name,
                stock_type=stock_type,
                current_stock=quantity_present,
                reserved_stock=quantity_reserved,
                available_stock=max(0, quantity_present - quantity_reserved),
                quantity_present=quantity_present,
                quantity_reserved=quantity_reserved,
                snapshot_date=date.today()
            )
            
            records.append(inventory_record)
        
        return records, cache_hits

    def _process_wb_item(self, item: Dict) -> Tuple[List[InventoryRecord], int]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ Wildberries API."""
        records = []
        cache_hits = 0
        
        barcode = item.get('barcode', '')
        nm_id = item.get('nmId', '')
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –∫—ç—à–µ
        product_id = None
        if barcode:
            product_id = self.product_cache.get_product_id_by_barcode(barcode)
        if not product_id and nm_id:
            product_id = self.product_cache.get_product_id_by_wb_sku(str(nm_id))
        
        if product_id:
            cache_hits += 1
        else:
            logger.warning(f"–¢–æ–≤–∞—Ä —Å barcode {barcode} –∏–ª–∏ nmId {nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            return records, cache_hits
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        warehouse_name = item.get('warehouseName', 'WB Main')
        quantity_present = max(0, int(item.get('quantity', 0)))
        quantity_reserved = max(0, int(item.get('inWayToClient', 0)))
        
        inventory_record = InventoryRecord(
            product_id=product_id,
            sku=barcode or str(nm_id),
            source='Wildberries',
            warehouse_name=warehouse_name,
            stock_type='FBS',  # WB –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FBS –º–æ–¥–µ–ª—å
            current_stock=quantity_present,
            reserved_stock=quantity_reserved,
            available_stock=max(0, quantity_present - quantity_reserved),
            quantity_present=quantity_present,
            quantity_reserved=quantity_reserved,
            snapshot_date=date.today()
        )
        
        records.append(inventory_record)
        return records, cache_hits

    async def fetch_ozon_inventory_async(self) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon API."""
        all_items = []
        
        async with aiohttp.ClientSession() as session:
            url = f"{config.OZON_API_BASE_URL}/v3/product/info/stocks"
            headers = {
                "Client-Id": config.OZON_CLIENT_ID,
                "Api-Key": config.OZON_API_KEY,
                "Content-Type": "application/json"
            }
            
            offset = 0
            limit = 1000
            
            while True:
                payload = {
                    "filter": {},
                    "last_id": "",
                    "limit": limit
                }
                
                try:
                    async with session.post(url, json=payload, headers=headers, timeout=30) as response:
                        response.raise_for_status()
                        data = await response.json()
                        items = data.get('result', {}).get('items', [])
                        
                        if not items:
                            break
                        
                        all_items.extend(items)
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon (–≤—Å–µ–≥–æ: {len(all_items)})")
                        
                        if len(items) < limit:
                            break
                        
                        offset += limit
                        await asyncio.sleep(config.OZON_REQUEST_DELAY)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ozon API: {e}")
                    break
        
        return all_items

    def sync_ozon_inventory_optimized(self) -> SyncResult:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon."""
        started_at = datetime.now()
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon...")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        cache_hits = 0
        
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            items = loop.run_until_complete(self.fetch_ozon_inventory_async())
            loop.close()
            
            records_processed = len(items)
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {records_processed} —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon API")
            
            if items:
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                inventory_records = self.process_inventory_batch(items, 'Ozon')
                cache_hits = len([r for r in inventory_records if r.product_id])
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                validation_result = self.validator.validate_inventory_data(
                    [r.__dict__ for r in inventory_records], 'Ozon'
                )
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                valid_records = [r for r in inventory_records if r.product_id]
                
                if valid_records:
                    # –ü–∞–∫–µ—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    updated, inserted, failed = self.batch_upsert_inventory_data(valid_records, 'Ozon')
                    records_inserted = inserted
                    records_failed = failed + (len(inventory_records) - len(valid_records))
                    
                    logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                               f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, "
                               f"–æ—à–∏–±–æ–∫ {records_failed}, –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à {cache_hits}")
                else:
                    logger.error("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
                    records_failed = records_processed
            
            return SyncResult(
                source='Ozon',
                status=SyncStatus.SUCCESS if records_failed == 0 else SyncStatus.PARTIAL,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                cache_hits=cache_hits
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon: {e}")
            return SyncResult(
                source='Ozon',
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                cache_hits=cache_hits
            )

    def refresh_stats_cache(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        try:
            self.cursor.callproc('RefreshInventoryStatsCache')
            self.connection.commit()
            logger.info("‚úÖ –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def analyze_performance(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            self.cursor.callproc('AnalyzeInventoryQueryPerformance')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            results = []
            for result in self.cursor.stored_results():
                results.extend(result.fetchall())
            
            return {
                'analysis_time': datetime.now(),
                'results': results
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'error': str(e)}

    def run_optimized_full_sync(self) -> Dict[str, SyncResult]:
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        results = {}
        
        try:
            self.connect_to_database()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon
            logger.info("=" * 50)
            logger.info("–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í OZON")
            logger.info("=" * 50)
            
            ozon_result = self.sync_ozon_inventory_optimized()
            results['Ozon'] = ozon_result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self.refresh_stats_cache()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_analysis = self.analyze_performance()
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(performance_analysis.get('results', []))} –º–µ—Ç—Ä–∏–∫")
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            raise
        finally:
            self.close_database_connection()
        
        return results


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    service = OptimizedInventorySyncService(batch_size=1000, max_workers=4)
    results = service.run_optimized_full_sync()
    
    for source, result in results.items():
        print(f"\n{source} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:")
        print(f"  –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.records_processed}")
        print(f"  –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
        print(f"  –û—à–∏–±–æ–∫: {result.records_failed}")
        print(f"  –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {result.cache_hits}")
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds} —Å–µ–∫")