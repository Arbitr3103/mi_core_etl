#!/usr/bin/env php
<?php

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ETL —Å–∏—Å—Ç–µ–º–æ–π MDM
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * php etl_cli.php <command> [options]
 * 
 * –ö–æ–º–∞–Ω–¥—ã:
 * - run [source] [--incremental] [--limit=N] - –∑–∞–ø—É—Å–∫ ETL –ø—Ä–æ—Ü–µ—Å—Å–∞
 * - status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å ETL —Å–∏—Å—Ç–µ–º—ã
 * - config [source] [key] [value] - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * - logs [--level=LEVEL] [--source=SOURCE] [--tail=N] - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
 * - setup - –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
 * - test [source] - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
 */

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/config.py'; // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π

use MDM\ETL\Scheduler\ETLScheduler;
use MDM\ETL\Config\ETLConfigManager;

class ETLCli
{
    private PDO $pdo;
    private ETLConfigManager $configManager;
    private ETLScheduler $scheduler;
    
    public function __construct()
    {
        $this->initializeDatabase();
        $this->configManager = new ETLConfigManager($this->pdo);
        $this->scheduler = new ETLScheduler($this->pdo, $this->configManager->getETLConfig());
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private function initializeDatabase(): void
    {
        $host = $_ENV['DB_HOST'] ?? getenv('DB_HOST') ?? 'localhost';
        $dbname = $_ENV['DB_NAME'] ?? getenv('DB_NAME') ?? 'mi_core_db';
        $username = $_ENV['DB_USER'] ?? getenv('DB_USER') ?? 'root';
        $password = $_ENV['DB_PASSWORD'] ?? getenv('DB_PASSWORD') ?? '';
        $port = $_ENV['DB_PORT'] ?? getenv('DB_PORT') ?? '3306';
        
        try {
            $dsn = "mysql:host=$host;port=$port;dbname=$dbname;charset=utf8mb4";
            $this->pdo = new PDO($dsn, $username, $password, [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES utf8mb4"
            ]);
        } catch (Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
            exit(1);
        }
    }
    
    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
     */
    public function run(array $argv): void
    {
        if (count($argv) < 2) {
            $this->showHelp();
            return;
        }
        
        $command = $argv[1];
        $args = array_slice($argv, 2);
        
        try {
            switch ($command) {
                case 'run':
                    $this->runETL($args);
                    break;
                    
                case 'status':
                    $this->showStatus();
                    break;
                    
                case 'config':
                    $this->manageConfig($args);
                    break;
                    
                case 'logs':
                    $this->showLogs($args);
                    break;
                    
                case 'setup':
                    $this->setupSystem();
                    break;
                    
                case 'test':
                    $this->testConnections($args);
                    break;
                    
                case 'help':
                case '--help':
                case '-h':
                    $this->showHelp();
                    break;
                    
                default:
                    $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command");
                    $this->showHelp();
            }
        } catch (Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: " . $e->getMessage());
            exit(1);
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ ETL –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    private function runETL(array $args): void
    {
        $source = null;
        $incremental = false;
        $limit = null;
        $filters = [];
        
        // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        foreach ($args as $arg) {
            if ($arg === '--incremental') {
                $incremental = true;
            } elseif (strpos($arg, '--limit=') === 0) {
                $limit = (int)substr($arg, 8);
            } elseif (strpos($arg, '--') !== 0 && !$source) {
                $source = $arg;
            }
        }
        
        $this->info("–ó–∞–ø—É—Å–∫ ETL –ø—Ä–æ—Ü–µ—Å—Å–∞...");
        
        if ($source) {
            $this->info("–ò—Å—Ç–æ—á–Ω–∏–∫: $source");
        }
        
        if ($incremental) {
            $this->info("–†–µ–∂–∏–º: –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
        }
        
        if ($limit) {
            $this->info("–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π: $limit");
            $filters['limit'] = $limit;
        }
        
        $startTime = microtime(true);
        
        try {
            if ($source) {
                $results = $this->scheduler->runSourceETL($source, ['filters' => $filters]);
            } elseif ($incremental) {
                $results = $this->scheduler->runIncrementalETL(['filters' => $filters]);
            } else {
                $results = $this->scheduler->runFullETL(['filters' => $filters]);
            }
            
            $duration = microtime(true) - $startTime;
            
            $this->success("ETL –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ " . round($duration, 2) . " —Å–µ–∫");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            $this->showResults($results);
            
        } catch (Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ETL: " . $e->getMessage());
            exit(1);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å ETL —Å–∏—Å—Ç–µ–º—ã
     */
    private function showStatus(): void
    {
        $this->info("–°—Ç–∞—Ç—É—Å ETL —Å–∏—Å—Ç–µ–º—ã:");
        
        $status = $this->scheduler->getStatus();
        
        // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if ($status['is_running']) {
            $this->warning("üîÑ ETL –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
        } else {
            $this->success("‚úÖ ETL —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
        }
        
        // –°—Ç–∞—Ç—É—Å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
        echo "\nüìä –°—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö:\n";
        foreach ($status['extractors'] as $name => $extractor) {
            $statusIcon = $extractor['available'] ? '‚úÖ' : '‚ùå';
            $statusText = $extractor['available'] ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            echo "  $statusIcon $name: $statusText\n";
        }
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏
        if (!empty($status['last_runs'])) {
            echo "\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏:\n";
            foreach (array_slice($status['last_runs'], 0, 5) as $run) {
                $statusIcon = $run['status'] === 'success' ? '‚úÖ' : 
                            ($run['status'] === 'partial_success' ? '‚ö†Ô∏è' : '‚ùå');
                
                echo sprintf(
                    "  %s %s | –ò–∑–≤–ª–µ—á–µ–Ω–æ: %d | –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %d | –í—Ä–µ–º—è: %.2f —Å–µ–∫ | %s\n",
                    $statusIcon,
                    $run['created_at'],
                    $run['total_extracted'],
                    $run['total_saved'],
                    $run['duration'],
                    $run['status']
                );
            }
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        $errors = $this->configManager->validateConfig();
        if (!empty($errors)) {
            echo "\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n";
            foreach ($errors as $error) {
                echo "  ‚ùå $error\n";
            }
        }
    }
    
    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
     */
    private function manageConfig(array $args): void
    {
        if (empty($args)) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            $this->showAllConfig();
            return;
        }
        
        $source = $args[0];
        
        if (count($args) === 1) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            $this->showSourceConfig($source);
            return;
        }
        
        if (count($args) === 2) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            $key = $args[1];
            $value = $this->configManager->getConfigValue($source, $key);
            echo "$source.$key = $value\n";
            return;
        }
        
        if (count($args) >= 3) {
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
            $key = $args[1];
            $value = $args[2];
            $description = $args[3] ?? null;
            
            $this->configManager->setConfigValue($source, $key, $value, $description);
            $this->success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: $source.$key = $value");
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    private function showAllConfig(): void
    {
        $sources = ['ozon', 'wildberries', 'internal', 'scheduler'];
        
        foreach ($sources as $source) {
            echo "\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è $source:\n";
            $this->showSourceConfig($source);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    private function showSourceConfig(string $source): void
    {
        try {
            $config = $this->configManager->getSourceConfig($source);
            
            if (empty($config)) {
                echo "  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
                return;
            }
            
            foreach ($config as $key => $data) {
                $value = $data['is_encrypted'] ? '[ENCRYPTED]' : $data['value'];
                $description = $data['description'] ? " # {$data['description']}" : '';
                echo "  $key = $value$description\n";
            }
        } catch (Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " . $e->getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
     */
    private function showLogs(array $args): void
    {
        $level = null;
        $source = null;
        $tail = 50;
        
        // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        foreach ($args as $arg) {
            if (strpos($arg, '--level=') === 0) {
                $level = substr($arg, 8);
            } elseif (strpos($arg, '--source=') === 0) {
                $source = substr($arg, 9);
            } elseif (strpos($arg, '--tail=') === 0) {
                $tail = (int)substr($arg, 7);
            }
        }
        
        try {
            $sql = "SELECT source, level, message, created_at FROM etl_logs WHERE 1=1";
            $params = [];
            
            if ($level) {
                $sql .= " AND level = ?";
                $params[] = strtoupper($level);
            }
            
            if ($source) {
                $sql .= " AND source = ?";
                $params[] = $source;
            }
            
            $sql .= " ORDER BY created_at DESC LIMIT ?";
            $params[] = $tail;
            
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute($params);
            
            $logs = $stmt->fetchAll();
            
            if (empty($logs)) {
                $this->info("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                return;
            }
            
            echo "üìã –õ–æ–≥–∏ ETL —Å–∏—Å—Ç–µ–º—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $tail –∑–∞–ø–∏—Å–µ–π):\n\n";
            
            foreach (array_reverse($logs) as $log) {
                $levelIcon = $this->getLevelIcon($log['level']);
                echo sprintf(
                    "%s [%s] [%s] %s: %s\n",
                    $levelIcon,
                    $log['created_at'],
                    $log['level'],
                    $log['source'],
                    $log['message']
                );
            }
            
        } catch (Exception $e) {
            $this->error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: " . $e->getMessage());
        }
    }
    
    /**
     * –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    private function setupSystem(): void
    {
        $this->info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ETL —Å–∏—Å—Ç–µ–º—ã MDM...");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        $this->info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
        $this->createTables();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $this->info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");
        $errors = $this->configManager->validateConfig();
        
        if (!empty($errors)) {
            $this->warning("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
            foreach ($errors as $error) {
                echo "  ‚ùå $error\n";
            }
            
            $this->info("\n–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:");
            echo "OZON_CLIENT_ID=your_ozon_client_id\n";
            echo "OZON_API_KEY=your_ozon_api_key\n";
            echo "WB_API_KEY=your_wildberries_api_token\n";
        } else {
            $this->success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
        }
        
        $this->success("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        $this->info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'php etl_cli.php status' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã");
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    private function createTables(): void
    {
        $schemaFile = __DIR__ . '/src/ETL/Database/etl_schema.sql';
        
        if (!file_exists($schemaFile)) {
            throw new Exception("–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: $schemaFile");
        }
        
        $sql = file_get_contents($schemaFile);
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        $statements = array_filter(
            array_map('trim', explode(';', $sql)),
            function($stmt) {
                return !empty($stmt) && !preg_match('/^\s*--/', $stmt);
            }
        );
        
        foreach ($statements as $statement) {
            if (stripos($statement, 'DELIMITER') !== false) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º DELIMITER –∫–æ–º–∞–Ω–¥—ã
            }
            
            try {
                $this->pdo->exec($statement);
            } catch (Exception $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                if (strpos($e->getMessage(), 'already exists') === false) {
                    throw $e;
                }
            }
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
     */
    private function testConnections(array $args): void
    {
        $source = $args[0] ?? null;
        
        if ($source) {
            $this->testSingleSource($source);
        } else {
            $this->testAllSources();
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    private function testSingleSource(string $source): void
    {
        $this->info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ $source...");
        
        try {
            $config = $this->configManager->getETLConfig();
            
            if (!isset($config[$source])) {
                throw new Exception("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '$source' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            }
            
            $extractorClass = "MDM\\ETL\\DataExtractors\\" . ucfirst($source) . "Extractor";
            
            if (!class_exists($extractorClass)) {
                throw new Exception("–≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '$source' –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
            
            $extractor = new $extractorClass($this->pdo, $config[$source]);
            
            if ($extractor->isAvailable()) {
                $this->success("‚úÖ $source: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
            } else {
                $this->error("‚ùå $source: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
            }
            
        } catch (Exception $e) {
            $this->error("‚ùå $source: " . $e->getMessage());
        }
    }
    
    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    private function testAllSources(): void
    {
        $sources = ['ozon', 'wildberries', 'internal'];
        
        foreach ($sources as $source) {
            $this->testSingleSource($source);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ETL
     */
    private function showResults(array $results): void
    {
        echo "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n";
        
        $totalExtracted = 0;
        $totalSaved = 0;
        
        foreach ($results as $source => $result) {
            $statusIcon = $result['status'] === 'success' ? '‚úÖ' : 
                         ($result['status'] === 'unavailable' ? '‚ö†Ô∏è' : '‚ùå');
            
            echo sprintf(
                "  %s %s: –∏–∑–≤–ª–µ—á–µ–Ω–æ %d, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d –∑–∞ %.2f —Å–µ–∫\n",
                $statusIcon,
                $source,
                $result['extracted_count'] ?? 0,
                $result['saved_count'] ?? 0,
                $result['duration'] ?? 0
            );
            
            if (isset($result['error'])) {
                echo "    ‚ùå –û—à–∏–±–∫–∞: {$result['error']}\n";
            }
            
            $totalExtracted += $result['extracted_count'] ?? 0;
            $totalSaved += $result['saved_count'] ?? 0;
        }
        
        echo "\nüìà –ò—Ç–æ–≥–æ: –∏–∑–≤–ª–µ—á–µ–Ω–æ $totalExtracted, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ $totalSaved –∑–∞–ø–∏—Å–µ–π\n";
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    private function showHelp(): void
    {
        echo "ETL CLI - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö MDM\n\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php etl_cli.php <command> [options]\n\n";
        echo "–ö–æ–º–∞–Ω–¥—ã:\n";
        echo "  run [source] [--incremental] [--limit=N]  –ó–∞–ø—É—Å–∫ ETL –ø—Ä–æ—Ü–µ—Å—Å–∞\n";
        echo "  status                                     –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n";
        echo "  config [source] [key] [value]              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n";
        echo "  logs [--level=LEVEL] [--source=SOURCE]     –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n";
        echo "  setup                                      –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n";
        echo "  test [source]                              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n";
        echo "  help                                       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n";
        echo "–ü—Ä–∏–º–µ—Ä—ã:\n";
        echo "  php etl_cli.php run                        # –ü–æ–ª–Ω—ã–π ETL –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n";
        echo "  php etl_cli.php run ozon --limit=100       # ETL —Ç–æ–ª—å–∫–æ Ozon, –ª–∏–º–∏—Ç 100\n";
        echo "  php etl_cli.php run --incremental          # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n";
        echo "  php etl_cli.php config ozon api_key XXX    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á\n";
        echo "  php etl_cli.php logs --level=ERROR         # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏\n";
        echo "  php etl_cli.php test ozon                  # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon\n";
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
     */
    private function getLevelIcon(string $level): string
    {
        switch (strtoupper($level)) {
            case 'ERROR': return '‚ùå';
            case 'WARNING': return '‚ö†Ô∏è';
            case 'INFO': return '‚ÑπÔ∏è';
            case 'DEBUG': return 'üêõ';
            default: return 'üìù';
        }
    }
    
    /**
     * –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function info(string $message): void
    {
        echo "‚ÑπÔ∏è  $message\n";
    }
    
    /**
     * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    private function success(string $message): void
    {
        echo "‚úÖ $message\n";
    }
    
    /**
     * –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     */
    private function warning(string $message): void
    {
        echo "‚ö†Ô∏è  $message\n";
    }
    
    /**
     * –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
     */
    private function error(string $message): void
    {
        echo "‚ùå $message\n";
    }
}

// –ó–∞–ø—É—Å–∫ CLI
if (php_sapi_name() === 'cli') {
    $cli = new ETLCli();
    $cli->run($argv);
} else {
    echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
    exit(1);
}