#!/usr/bin/env python3
"""
REST API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º, –∞–ª–µ—Ä—Ç–∞–º –∏ –æ—Ç—á–µ—Ç–∞–º.
"""

import sys
import os
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from replenishment_recommender import ReplenishmentRecommender, PriorityLevel
from alert_manager import AlertManager
from reporting_engine import ReportingEngine
from replenishment_orchestrator import ReplenishmentOrchestrator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dependency injection)
recommender = None
alert_manager = None
reporting_engine = None
orchestrator = None


def init_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    global recommender, alert_manager, reporting_engine, orchestrator
    
    try:
        recommender = ReplenishmentRecommender()
        alert_manager = AlertManager()
        reporting_engine = ReportingEngine()
        orchestrator = ReplenishmentOrchestrator()
        logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""
    html_template = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                     color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
            .card { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; 
                   box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .btn { background: #007bff; color: white; padding: 10px 20px; border: none; 
                  border-radius: 5px; cursor: pointer; margin: 5px; }
            .btn:hover { background: #0056b3; }
            .btn-success { background: #28a745; }
            .btn-warning { background: #ffc107; color: #212529; }
            .btn-danger { background: #dc3545; }
            .metrics { display: flex; flex-wrap: wrap; gap: 20px; }
            .metric { background: #f8f9fa; padding: 15px; border-radius: 5px; min-width: 150px; }
            .metric-value { font-size: 24px; font-weight: bold; color: #007bff; }
            .table { width: 100%; border-collapse: collapse; margin-top: 10px; }
            .table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            .table th { background-color: #f8f9fa; }
            .critical { color: #dc3545; font-weight: bold; }
            .high { color: #fd7e14; font-weight: bold; }
            .medium { color: #ffc107; }
            .loading { display: none; text-align: center; padding: 20px; }
            .error { color: #dc3545; background: #f8d7da; padding: 10px; border-radius: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üì¶ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞</h1>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é</p>
            </div>
            
            <div class="card">
                <h2>üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
                <button class="btn" onclick="loadRecommendations()">üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</button>
                <button class="btn btn-warning" onclick="loadAlerts()">üö® –ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç—ã</button>
                <button class="btn btn-success" onclick="runAnalysis()">üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑</button>
                <button class="btn" onclick="loadReport()">üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</button>
            </div>
            
            <div id="loading" class="loading">
                <h3>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</h3>
            </div>
            
            <div id="error" class="error" style="display: none;"></div>
            
            <div id="content"></div>
        </div>
        
        <script>
            function showLoading() {
                document.getElementById('loading').style.display = 'block';
                document.getElementById('content').innerHTML = '';
                document.getElementById('error').style.display = 'none';
            }
            
            function hideLoading() {
                document.getElementById('loading').style.display = 'none';
            }
            
            function showError(message) {
                document.getElementById('error').innerHTML = message;
                document.getElementById('error').style.display = 'block';
                hideLoading();
            }
            
            async function loadRecommendations() {
                showLoading();
                try {
                    const response = await fetch('/api/recommendations?limit=20');
                    const data = await response.json();
                    
                    if (data.error) {
                        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ' + data.error);
                        return;
                    }
                    
                    let html = '<div class="card"><h2>üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é</h2>';
                    
                    if (data.recommendations && data.recommendations.length > 0) {
                        html += '<table class="table"><thead><tr>';
                        html += '<th>SKU</th><th>–¢–æ–≤–∞—Ä</th><th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th><th>–û—Å—Ç–∞—Ç–æ–∫</th>';
                        html += '<th>–ö –∑–∞–∫–∞–∑—É</th><th>–î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è</th><th>–°—Ä–æ—á–Ω–æ—Å—Ç—å</th></tr></thead><tbody>';
                        
                        data.recommendations.forEach(rec => {
                            const priorityClass = rec.priority_level.toLowerCase();
                            html += `<tr>
                                <td>${rec.sku}</td>
                                <td>${rec.product_name.substring(0, 40)}</td>
                                <td class="${priorityClass}">${rec.priority_level}</td>
                                <td>${rec.current_stock}</td>
                                <td><strong>${rec.recommended_order_quantity}</strong></td>
                                <td>${rec.days_until_stockout || '–ù/–î'}</td>
                                <td>${rec.urgency_score}</td>
                            </tr>`;
                        });
                        
                        html += '</tbody></table>';
                    } else {
                        html += '<p>–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>';
                    }
                    
                    html += '</div>';
                    document.getElementById('content').innerHTML = html;
                    
                } catch (error) {
                    showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
                }
                hideLoading();
            }
            
            async function loadAlerts() {
                showLoading();
                try {
                    const response = await fetch('/api/alerts');
                    const data = await response.json();
                    
                    if (data.error) {
                        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: ' + data.error);
                        return;
                    }
                    
                    let html = '<div class="card"><h2>üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</h2>';
                    
                    if (data.alerts && data.alerts.length > 0) {
                        html += '<table class="table"><thead><tr>';
                        html += '<th>SKU</th><th>–°–æ–æ–±—â–µ–Ω–∏–µ</th><th>–£—Ä–æ–≤–µ–Ω—å</th><th>–î–µ–π—Å—Ç–≤–∏–µ</th></tr></thead><tbody>';
                        
                        data.alerts.forEach(alert => {
                            const levelClass = alert.alert_level.toLowerCase();
                            html += `<tr>
                                <td>${alert.sku}</td>
                                <td>${alert.message}</td>
                                <td class="${levelClass}">${alert.alert_level}</td>
                                <td>${alert.recommended_action}</td>
                            </tr>`;
                        });
                        
                        html += '</tbody></table>';
                    } else {
                        html += '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤</p>';
                    }
                    
                    html += '</div>';
                    document.getElementById('content').innerHTML = html;
                    
                } catch (error) {
                    showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
                }
                hideLoading();
            }
            
            async function runAnalysis() {
                showLoading();
                try {
                    const response = await fetch('/api/analysis/run', { method: 'POST' });
                    const data = await response.json();
                    
                    if (data.error) {
                        showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + data.error);
                        return;
                    }
                    
                    let html = '<div class="card"><h2>üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>';
                    html += '<div class="metrics">';
                    html += `<div class="metric"><div class="metric-value">${data.products_analyzed || 0}</div><div>–¢–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</div></div>`;
                    html += `<div class="metric"><div class="metric-value">${data.recommendations_generated || 0}</div><div>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ</div></div>`;
                    html += `<div class="metric"><div class="metric-value">${data.alerts_created || 0}</div><div>–ê–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ</div></div>`;
                    html += '</div>';
                    html += `<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${data.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>`;
                    html += '</div>';
                    
                    document.getElementById('content').innerHTML = html;
                    
                } catch (error) {
                    showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
                }
                hideLoading();
            }
            
            async function loadReport() {
                showLoading();
                try {
                    const response = await fetch('/api/reports/comprehensive');
                    const data = await response.json();
                    
                    if (data.error) {
                        showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ' + data.error);
                        return;
                    }
                    
                    let html = '<div class="card"><h2>üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç</h2>';
                    
                    if (data.inventory_metrics) {
                        html += '<h3>üì¶ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∞—Å–æ–≤</h3>';
                        html += '<div class="metrics">';
                        html += `<div class="metric"><div class="metric-value">${data.inventory_metrics.total_products}</div><div>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</div></div>`;
                        html += `<div class="metric"><div class="metric-value">${Math.round(data.inventory_metrics.total_inventory_value).toLocaleString()}</div><div>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤ (—Ä—É–±)</div></div>`;
                        html += `<div class="metric"><div class="metric-value">${data.inventory_metrics.low_stock_products}</div><div>–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫</div></div>`;
                        html += `<div class="metric"><div class="metric-value">${data.inventory_metrics.total_recommended_orders}</div><div>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∑–∞–∫–∞–∑–æ–≤</div></div>`;
                        html += '</div>';
                    }
                    
                    if (data.sales_metrics) {
                        html += '<h3>üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂</h3>';
                        html += '<div class="metrics">';
                        html += `<div class="metric"><div class="metric-value">${data.sales_metrics.total_sales_volume_30d}</div><div>–ü—Ä–æ–¥–∞–∂ –∑–∞ 30 –¥–Ω–µ–π</div></div>`;
                        html += `<div class="metric"><div class="metric-value">${data.sales_metrics.fast_moving_products}</div><div>–ë—ã—Å—Ç—Ä–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è</div></div>`;
                        html += `<div class="metric"><div class="metric-value">${data.sales_metrics.slow_moving_products}</div><div>–ú–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è</div></div>`;
                        html += `<div class="metric"><div class="metric-value">${data.sales_metrics.no_sales_products}</div><div>–ë–µ–∑ –ø—Ä–æ–¥–∞–∂</div></div>`;
                        html += '</div>';
                    }
                    
                    html += '</div>';
                    document.getElementById('content').innerHTML = html;
                    
                } catch (error) {
                    showError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
                }
                hideLoading();
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            window.onload = function() {
                loadRecommendations();
            };
        </script>
    </body>
    </html>
    """
    return render_template_string(html_template)


# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.route('/api/recommendations')
def get_recommendations():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é."""
    try:
        limit = request.args.get('limit', 50, type=int)
        priority_filter = request.args.get('priority', None)
        source = request.args.get('source', None)
        
        if not recommender:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –ë–î
        if priority_filter:
            recommendations = recommender.get_critical_recommendations(limit)
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if priority_filter != 'ALL':
                recommendations = [r for r in recommendations if r.priority_level.value == priority_filter]
        else:
            recommendations = recommender.get_critical_recommendations(limit)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        recommendations_data = []
        for rec in recommendations:
            rec_data = {
                'product_id': rec.product_id,
                'sku': rec.sku,
                'product_name': rec.product_name,
                'source': rec.source,
                'current_stock': rec.current_stock,
                'available_stock': rec.available_stock,
                'recommended_order_quantity': rec.recommended_order_quantity,
                'recommended_order_value': rec.recommended_order_value,
                'priority_level': rec.priority_level.value,
                'urgency_score': rec.urgency_score,
                'days_until_stockout': rec.days_until_stockout,
                'daily_sales_rate_7d': rec.daily_sales_rate_7d,
                'sales_trend': rec.sales_trend.value,
                'analysis_date': rec.analysis_date.strftime('%Y-%m-%d %H:%M:%S')
            }
            recommendations_data.append(rec_data)
        
        return jsonify({
            'recommendations': recommendations_data,
            'total_count': len(recommendations_data),
            'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/recommendations/<int:product_id>')
def get_product_recommendation(product_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    try:
        if not recommender:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∏—â–µ–º –Ω—É–∂–Ω—É—é
        recommendations = recommender.get_critical_recommendations(1000)
        product_rec = next((r for r in recommendations if r.product_id == product_id), None)
        
        if not product_rec:
            return jsonify({'error': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        rec_data = {
            'product_id': product_rec.product_id,
            'sku': product_rec.sku,
            'product_name': product_rec.product_name,
            'source': product_rec.source,
            'current_stock': product_rec.current_stock,
            'reserved_stock': product_rec.reserved_stock,
            'available_stock': product_rec.available_stock,
            'recommended_order_quantity': product_rec.recommended_order_quantity,
            'recommended_order_value': product_rec.recommended_order_value,
            'priority_level': product_rec.priority_level.value,
            'urgency_score': product_rec.urgency_score,
            'days_until_stockout': product_rec.days_until_stockout,
            'daily_sales_rate_7d': product_rec.daily_sales_rate_7d,
            'daily_sales_rate_14d': product_rec.daily_sales_rate_14d,
            'daily_sales_rate_30d': product_rec.daily_sales_rate_30d,
            'sales_trend': product_rec.sales_trend.value,
            'inventory_turnover_days': product_rec.inventory_turnover_days,
            'min_stock_level': product_rec.min_stock_level,
            'reorder_point': product_rec.reorder_point,
            'lead_time_days': product_rec.lead_time_days,
            'analysis_date': product_rec.analysis_date.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        return jsonify(rec_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/alerts')
def get_alerts():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã."""
    try:
        limit = request.args.get('limit', 50, type=int)
        
        if not alert_manager:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        alerts = alert_manager.get_active_alerts(limit)
        
        return jsonify({
            'alerts': alerts,
            'total_count': len(alerts),
            'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/alerts/<int:alert_id>/acknowledge', methods=['POST'])
def acknowledge_alert(alert_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ª–µ—Ä—Ç–∞."""
    try:
        data = request.get_json() or {}
        acknowledged_by = data.get('acknowledged_by', 'API User')
        
        if not alert_manager:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
        success = alert_manager.acknowledge_alert(alert_id, acknowledged_by)
        
        if success:
            return jsonify({'message': '–ê–ª–µ—Ä—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', 'alert_id': alert_id})
        else:
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞'}), 500
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ {alert_id}: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/analysis/run', methods=['POST'])
def run_analysis():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    try:
        data = request.get_json() or {}
        source = data.get('source', None)
        save_to_db = data.get('save_to_db', True)
        send_alerts = data.get('send_alerts', True)
        
        if not orchestrator:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–ª—è API –ª—É—á—à–µ –Ω–µ –¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω—ã–π)
        result = orchestrator.run_quick_check()
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/reports/comprehensive')
def get_comprehensive_report():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç."""
    try:
        source = request.args.get('source', None)
        
        if not reporting_engine:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
        report = reporting_engine.create_comprehensive_report(source)
        
        return jsonify(report)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/reports/export/<format>')
def export_report(format):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    try:
        if format not in ['json', 'csv']:
            return jsonify({'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç'}), 400
        
        source = request.args.get('source', None)
        
        if not reporting_engine:
            return jsonify({'error': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}), 500
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = reporting_engine.create_comprehensive_report(source)
        
        if 'error' in report:
            return jsonify(report), 500
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"replenishment_report_{timestamp}.{format}"
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        if format == 'json':
            success = reporting_engine.export_report_to_json(report, filename)
        else:  # csv
            success = reporting_engine.export_report_to_csv(report, filename)
        
        if success:
            return jsonify({
                'message': f'–û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {format.upper()}',
                'filename': filename,
                'generated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
        else:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞'}), 500
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API."""
    try:
        status = {
            'status': 'healthy',
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'components': {
                'recommender': recommender is not None,
                'alert_manager': alert_manager is not None,
                'reporting_engine': reporting_engine is not None,
                'orchestrator': orchestrator is not None
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        try:
            if recommender and recommender.connection:
                cursor = recommender.connection.cursor()
                cursor.execute("SELECT 1")
                cursor.close()
                status['components']['database'] = True
            else:
                status['components']['database'] = False
        except:
            status['components']['database'] = False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_healthy = all(status['components'].values())
        status['status'] = 'healthy' if all_healthy else 'degraded'
        
        return jsonify(status)
        
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e),
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }), 500


@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏."""
    return jsonify({'error': '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404


@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–∫–∏."""
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


def main():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞."""
    print("üöÄ –ó–ê–ü–£–°–ö API –°–ò–°–¢–ï–ú–´ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–õ–ê–î–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    init_components()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    print("   URL: http://localhost:5000")
    print("   API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5000/api/health")
    print("   –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   GET  /api/recommendations - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   GET  /api/alerts - –ü–æ–ª—É—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã")
    print("   POST /api/analysis/run - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
    print("   GET  /api/reports/comprehensive - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç")
    print("   GET  /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("\n‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=False)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")


if __name__ == "__main__":
    main()