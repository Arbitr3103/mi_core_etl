#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç APIErrorHandler, DataRecoveryManager –∏ FallbackManager
–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import requests
import time
from datetime import datetime, date
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from importers.ozon_importer import connect_to_db
    import config
    from inventory_data_validator import InventoryDataValidator, ValidationResult
    from sync_logger import SyncLogger, SyncType, SyncStatus as LogSyncStatus
    from inventory_error_handler import (
        APIErrorHandler, DataRecoveryManager, FallbackManager,
        RetryConfig, ErrorType, ErrorContext
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SyncStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    SUCCESS = "success"
    PARTIAL = "partial"
    FAILED = "failed"
    FALLBACK = "fallback"


@dataclass
class InventoryRecord:
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞."""
    product_id: int
    sku: str
    source: str
    warehouse_name: str
    stock_type: str
    current_stock: int
    reserved_stock: int
    available_stock: int
    quantity_present: int
    quantity_reserved: int
    snapshot_date: date
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.current_stock = max(0, int(self.current_stock or 0))
        self.reserved_stock = max(0, int(self.reserved_stock or 0))
        self.available_stock = max(0, int(self.available_stock or 0))
        self.quantity_present = max(0, int(self.quantity_present or 0))
        self.quantity_reserved = max(0, int(self.quantity_reserved or 0))
        
        if self.available_stock == 0 and self.current_stock > 0:
            self.available_stock = max(0, self.current_stock - self.reserved_stock)


@dataclass
class SyncResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    source: str
    status: SyncStatus
    records_processed: int
    records_updated: int
    records_inserted: int
    records_failed: int
    started_at: datetime
    completed_at: Optional[datetime] = None
    error_message: Optional[str] = None
    api_requests_count: int = 0
    fallback_used: bool = False
    recovery_actions: List[str] = None
    
    def __post_init__(self):
        if self.recovery_actions is None:
            self.recovery_actions = []
    
    @property
    def duration_seconds(self) -> int:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if self.completed_at:
            return int((self.completed_at - self.started_at).total_seconds())
        return 0


class RobustInventorySyncService:
    """
    –ù–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - Retry –ª–æ–≥–∏–∫—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    - –û–±—Ä–∞–±–æ—Ç–∫—É rate limits –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
    - Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
    - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.connection = None
        self.cursor = None
        self.validator = InventoryDataValidator()
        self.sync_logger: Optional[SyncLogger] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        retry_config = RetryConfig(
            max_attempts=3,
            base_delay=2.0,
            max_delay=120.0,
            exponential_base=2.0,
            jitter=True
        )
        self.error_handler = APIErrorHandler(retry_config)
        self.recovery_manager: Optional[DataRecoveryManager] = None
        self.fallback_manager: Optional[FallbackManager] = None
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            self.sync_logger = SyncLogger(self.cursor, self.connection, "RobustInventorySyncService")
            self.recovery_manager = DataRecoveryManager(self.cursor, self.connection)
            self.fallback_manager = FallbackManager(self.cursor, self.connection)
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            if self.sync_logger:
                self.sync_logger.log_info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def get_product_id_by_ozon_sku(self, sku_ozon: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Ozon."""
        if not sku_ozon:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE sku_ozon = %s",
                (sku_ozon,)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_ozon {sku_ozon}: {e}")
            return None

    def get_product_id_by_wb_sku(self, sku_wb: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ SKU Wildberries."""
        if not sku_wb:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE sku_wb = %s",
                (str(sku_wb),)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ sku_wb {sku_wb}: {e}")
            return None

    def get_product_id_by_barcode(self, barcode: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É."""
        if not barcode:
            return None
            
        try:
            self.cursor.execute(
                "SELECT id FROM dim_products WHERE barcode = %s",
                (barcode,)
            )
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ barcode {barcode}: {e}")
            return None

    def make_api_request(self, method: str, url: str, source: str, **kwargs) -> Tuple[Optional[requests.Response], Optional[ErrorContext]]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            method: HTTP –º–µ—Ç–æ–¥
            url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ API
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è requests
            
        Returns:
            Tuple[Optional[Response], Optional[ErrorContext]]: –û—Ç–≤–µ—Ç –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        """
        def _make_request():
            if method.upper() == 'GET':
                return requests.get(url, **kwargs)
            elif method.upper() == 'POST':
                return requests.post(url, **kwargs)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
        
        return self.error_handler.execute_with_retry(_make_request, source)

    def sync_ozon_inventory_with_recovery(self) -> SyncResult:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
        
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        source = 'Ozon'
        
        if self.sync_logger:
            self.sync_logger.start_sync_session(SyncType.INVENTORY, source)
            self.sync_logger.log_info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        inventory_records = []
        recovery_actions = []
        fallback_used = False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ–µ–≤
            if self.recovery_manager:
                recovery_result = self.recovery_manager.recover_from_failure(source)
                if recovery_result['status'] == 'success':
                    recovery_actions.append(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è: {recovery_result['message']}")
                    if self.sync_logger:
                        self.sync_logger.log_info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recovery_result['message']}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å
            url = f"{config.OZON_API_BASE_URL}/v3/product/info/stocks"
            headers = {
                "Client-Id": config.OZON_CLIENT_ID,
                "Api-Key": config.OZON_API_KEY,
                "Content-Type": "application/json"
            }
            
            offset = 0
            limit = 1000
            
            while True:
                payload = {
                    "filter": {},
                    "last_id": "",
                    "limit": limit
                }
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                response, error_context = self.make_api_request(
                    'POST', url, source,
                    json=payload, headers=headers, timeout=30
                )
                
                api_requests += 1
                
                if error_context:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
                    error_msg = f"–û—à–∏–±–∫–∞ API Ozon: {error_context.error_message}"
                    logger.error(error_msg)
                    
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
                    if self.fallback_manager and not fallback_used:
                        fallback_result = self.fallback_manager.use_cached_data(source, max_age_hours=24)
                        if fallback_result['status'] == 'success':
                            fallback_used = True
                            recovery_actions.append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {fallback_result['copied_records']} –∑–∞–ø–∏—Å–µ–π")
                            if self.sync_logger:
                                self.sync_logger.log_warning(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: {fallback_result['message']}")
                            
                            return SyncResult(
                                source=source,
                                status=SyncStatus.FALLBACK,
                                records_processed=fallback_result['copied_records'],
                                records_updated=0,
                                records_inserted=fallback_result['copied_records'],
                                records_failed=0,
                                started_at=started_at,
                                completed_at=datetime.now(),
                                api_requests_count=api_requests,
                                fallback_used=True,
                                recovery_actions=recovery_actions
                            )
                    
                    # –ï—Å–ª–∏ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    return SyncResult(
                        source=source,
                        status=SyncStatus.FAILED,
                        records_processed=records_processed,
                        records_updated=0,
                        records_inserted=records_inserted,
                        records_failed=records_failed,
                        started_at=started_at,
                        completed_at=datetime.now(),
                        error_message=error_context.error_message,
                        api_requests_count=api_requests,
                        recovery_actions=recovery_actions
                    )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                data = response.json()
                items = data.get('result', {}).get('items', [])
                
                if not items:
                    if self.sync_logger:
                        self.sync_logger.log_info("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    break
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon (offset: {offset})")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                for item in items:
                    records_processed += 1
                    
                    try:
                        offer_id = item.get('offer_id', '')
                        product_id = self.get_product_id_by_ozon_sku(offer_id)
                        
                        if not product_id:
                            if self.sync_logger:
                                self.sync_logger.log_warning(f"–¢–æ–≤–∞—Ä —Å offer_id {offer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                            records_failed += 1
                            continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
                        stocks = item.get('stocks', [])
                        if not stocks:
                            stocks = [{'warehouse_name': 'Ozon Main', 'type': 'FBO', 'present': 0, 'reserved': 0}]
                        
                        for stock in stocks:
                            warehouse_name = stock.get('warehouse_name', 'Ozon Main')
                            stock_type = stock.get('type', 'FBO')
                            quantity_present = max(0, int(stock.get('present', 0)))
                            quantity_reserved = max(0, int(stock.get('reserved', 0)))
                            
                            inventory_record = InventoryRecord(
                                product_id=product_id,
                                sku=offer_id,
                                source=source,
                                warehouse_name=warehouse_name,
                                stock_type=stock_type,
                                current_stock=quantity_present,
                                reserved_stock=quantity_reserved,
                                available_stock=max(0, quantity_present - quantity_reserved),
                                quantity_present=quantity_present,
                                quantity_reserved=quantity_reserved,
                                snapshot_date=date.today()
                            )
                            
                            inventory_records.append(inventory_record)
                            
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.get('offer_id', 'unknown')}: {e}"
                        if self.sync_logger:
                            self.sync_logger.log_error(error_msg)
                        records_failed += 1
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(items) < limit:
                    break
                
                offset += limit
                time.sleep(config.OZON_REQUEST_DELAY)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if inventory_records:
                validation_result = self.validate_inventory_data(inventory_records, source)
                valid_records = self.filter_valid_records(inventory_records, validation_result)
                
                if valid_records:
                    updated, inserted, failed = self.update_inventory_data(valid_records, source)
                    records_inserted = inserted
                    records_failed += failed + (len(inventory_records) - len(valid_records))
                    
                    success_msg = (f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                                 f"–≤–∞–ª–∏–¥–Ω—ã—Ö {len(valid_records)}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
                    if self.sync_logger:
                        self.sync_logger.log_info(success_msg)
                else:
                    error_msg = "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    records_failed = records_processed
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if records_failed == 0:
                sync_status = SyncStatus.SUCCESS
                log_status = LogSyncStatus.SUCCESS
            elif records_inserted > 0:
                sync_status = SyncStatus.PARTIAL
                log_status = LogSyncStatus.PARTIAL
            else:
                sync_status = SyncStatus.FAILED
                log_status = LogSyncStatus.FAILED
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.sync_logger:
                self.sync_logger.update_sync_counters(
                    records_processed=records_processed,
                    records_inserted=records_inserted,
                    records_failed=records_failed
                )
                self.sync_logger.end_sync_session(status=log_status)
            
            return SyncResult(
                source=source,
                status=sync_status,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests,
                fallback_used=fallback_used,
                recovery_actions=recovery_actions
            )
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg, e)
                self.sync_logger.end_sync_session(status=LogSyncStatus.FAILED, error_message=str(e))
            
            return SyncResult(
                source=source,
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests,
                recovery_actions=recovery_actions
            )

    def sync_wb_inventory_with_recovery(self) -> SyncResult:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
        
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        source = 'Wildberries'
        
        if self.sync_logger:
            self.sync_logger.start_sync_session(SyncType.INVENTORY, source)
            self.sync_logger.log_info("–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        inventory_records = []
        recovery_actions = []
        fallback_used = False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if self.recovery_manager:
                recovery_result = self.recovery_manager.recover_from_failure(source)
                if recovery_result['status'] == 'success':
                    recovery_actions.append(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è: {recovery_result['message']}")
                    if self.sync_logger:
                        self.sync_logger.log_info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {recovery_result['message']}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å
            url = f"{config.WB_SUPPLIERS_API_URL}/api/v1/supplier/stocks"
            headers = {
                "Authorization": config.WB_API_TOKEN
            }
            
            params = {
                'dateFrom': datetime.now().replace(hour=0, minute=0, second=0, microsecond=0).isoformat()
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º API –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            response, error_context = self.make_api_request(
                'GET', url, source,
                headers=headers, params=params, timeout=30
            )
            
            api_requests += 1
            
            if error_context:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API
                error_msg = f"–û—à–∏–±–∫–∞ API Wildberries: {error_context.error_message}"
                logger.error(error_msg)
                
                if self.sync_logger:
                    self.sync_logger.log_error(error_msg)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
                if self.fallback_manager and not fallback_used:
                    fallback_result = self.fallback_manager.use_cached_data(source, max_age_hours=24)
                    if fallback_result['status'] == 'success':
                        fallback_used = True
                        recovery_actions.append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {fallback_result['copied_records']} –∑–∞–ø–∏—Å–µ–π")
                        if self.sync_logger:
                            self.sync_logger.log_warning(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: {fallback_result['message']}")
                        
                        return SyncResult(
                            source=source,
                            status=SyncStatus.FALLBACK,
                            records_processed=fallback_result['copied_records'],
                            records_updated=0,
                            records_inserted=fallback_result['copied_records'],
                            records_failed=0,
                            started_at=started_at,
                            completed_at=datetime.now(),
                            api_requests_count=api_requests,
                            fallback_used=True,
                            recovery_actions=recovery_actions
                        )
                
                # –ï—Å–ª–∏ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                return SyncResult(
                    source=source,
                    status=SyncStatus.FAILED,
                    records_processed=records_processed,
                    records_updated=0,
                    records_inserted=records_inserted,
                    records_failed=records_failed,
                    started_at=started_at,
                    completed_at=datetime.now(),
                    error_message=error_context.error_message,
                    api_requests_count=api_requests,
                    recovery_actions=recovery_actions
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            data = response.json()
            
            if not isinstance(data, list):
                warning_msg = "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç WB API"
                if self.sync_logger:
                    self.sync_logger.log_warning(warning_msg)
                data = []
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Wildberries")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
            for item in data:
                records_processed += 1
                
                try:
                    barcode = item.get('barcode', '')
                    nm_id = item.get('nmId', '')
                    
                    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
                    product_id = None
                    if barcode:
                        product_id = self.get_product_id_by_barcode(barcode)
                    if not product_id and nm_id:
                        product_id = self.get_product_id_by_wb_sku(str(nm_id))
                    
                    if not product_id:
                        warning_msg = f"–¢–æ–≤–∞—Ä —Å barcode {barcode} –∏–ª–∏ nmId {nm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                        if self.sync_logger:
                            self.sync_logger.log_warning(warning_msg)
                        records_failed += 1
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
                    warehouse_name = item.get('warehouseName', 'WB Main')
                    quantity_present = max(0, int(item.get('quantity', 0)))
                    quantity_in_way_to_client = max(0, int(item.get('inWayToClient', 0)))
                    quantity_in_way_from_client = max(0, int(item.get('inWayFromClient', 0)))
                    quantity_reserved = quantity_in_way_to_client + quantity_in_way_from_client
                    
                    inventory_record = InventoryRecord(
                        product_id=product_id,
                        sku=str(nm_id) if nm_id else barcode,
                        source=source,
                        warehouse_name=warehouse_name,
                        stock_type='FBS',
                        current_stock=quantity_present,
                        reserved_stock=quantity_reserved,
                        available_stock=max(0, quantity_present - quantity_reserved),
                        quantity_present=quantity_present,
                        quantity_reserved=quantity_reserved,
                        snapshot_date=date.today()
                    )
                    
                    inventory_records.append(inventory_record)
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ WB {item.get('nmId', 'unknown')}: {e}"
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    records_failed += 1
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if inventory_records:
                validation_result = self.validate_inventory_data(inventory_records, source)
                valid_records = self.filter_valid_records(inventory_records, validation_result)
                
                if valid_records:
                    updated, inserted, failed = self.update_inventory_data(valid_records, source)
                    records_inserted = inserted
                    records_failed += failed + (len(inventory_records) - len(valid_records))
                    
                    success_msg = (f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Wildberries –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                                 f"–≤–∞–ª–∏–¥–Ω—ã—Ö {len(valid_records)}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
                    if self.sync_logger:
                        self.sync_logger.log_info(success_msg)
                else:
                    error_msg = "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    records_failed = records_processed
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if records_failed == 0:
                sync_status = SyncStatus.SUCCESS
                log_status = LogSyncStatus.SUCCESS
            elif records_inserted > 0:
                sync_status = SyncStatus.PARTIAL
                log_status = LogSyncStatus.PARTIAL
            else:
                sync_status = SyncStatus.FAILED
                log_status = LogSyncStatus.FAILED
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.sync_logger:
                self.sync_logger.update_sync_counters(
                    records_processed=records_processed,
                    records_inserted=records_inserted,
                    records_failed=records_failed
                )
                self.sync_logger.end_sync_session(status=log_status)
            
            return SyncResult(
                source=source,
                status=sync_status,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests,
                fallback_used=fallback_used,
                recovery_actions=recovery_actions
            )
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Wildberries: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg, e)
                self.sync_logger.end_sync_session(status=LogSyncStatus.FAILED, error_message=str(e))
            
            return SyncResult(
                source=source,
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests,
                recovery_actions=recovery_actions
            )

    def force_full_resync(self, source: str, days_back: int = 7) -> Dict[str, Any]:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {source}")
        
        if not self.recovery_manager:
            return {'status': 'error', 'message': 'Recovery manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            resync_result = self.recovery_manager.force_resync(source, days_back)
            
            if resync_result['status'] == 'success':
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                if source == 'Ozon':
                    sync_result = self.sync_ozon_inventory_with_recovery()
                elif source == 'Wildberries':
                    sync_result = self.sync_wb_inventory_with_recovery()
                else:
                    return {'status': 'error', 'message': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}'}
                
                return {
                    'status': 'success',
                    'source': source,
                    'resync_result': resync_result,
                    'sync_result': {
                        'status': sync_result.status.value,
                        'records_processed': sync_result.records_processed,
                        'records_inserted': sync_result.records_inserted,
                        'records_failed': sync_result.records_failed,
                        'fallback_used': sync_result.fallback_used,
                        'recovery_actions': sync_result.recovery_actions
                    }
                }
            else:
                return resync_result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {'status': 'error', 'message': str(e)}

    def get_error_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫.
        
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        """
        return self.error_handler.get_error_statistics()

    def validate_data_integrity(self, source: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        if not self.recovery_manager:
            return {'status': 'error', 'message': 'Recovery manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        return self.recovery_manager.validate_data_integrity(source)

    # –ú–µ—Ç–æ–¥—ã –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
    def validate_inventory_data(self, records: List[InventoryRecord], source: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö."""
        return self.validator.validate_inventory_records(records, source)

    def filter_valid_records(self, records: List[InventoryRecord], validation_result: ValidationResult) -> List[InventoryRecord]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
        if validation_result.is_valid:
            return records
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        valid_records = []
        for record in records:
            if (record.product_id and record.sku and 
                record.quantity_present >= 0 and record.quantity_reserved >= 0):
                valid_records.append(record)
        
        return valid_records

    def update_inventory_data(self, inventory_records: List[InventoryRecord], source: str) -> Tuple[int, int, int]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã inventory_data."""
        if not inventory_records:
            return 0, 0, 0
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            today = date.today()
            delete_query = "DELETE FROM inventory_data WHERE source = %s AND snapshot_date = %s"
            self.cursor.execute(delete_query, (source, today))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            insert_query = """
                INSERT INTO inventory_data 
                (product_id, sku, source, warehouse_name, stock_type, 
                 snapshot_date, current_stock, reserved_stock, available_stock,
                 quantity_present, quantity_reserved, last_sync_at)
                VALUES (%(product_id)s, %(sku)s, %(source)s, %(warehouse_name)s, %(stock_type)s,
                       %(snapshot_date)s, %(current_stock)s, %(reserved_stock)s, %(available_stock)s,
                       %(quantity_present)s, %(quantity_reserved)s, NOW())
            """
            
            batch_data = []
            for record in inventory_records:
                batch_data.append({
                    'product_id': record.product_id,
                    'sku': record.sku,
                    'source': record.source,
                    'warehouse_name': record.warehouse_name,
                    'stock_type': record.stock_type,
                    'snapshot_date': record.snapshot_date,
                    'current_stock': record.current_stock,
                    'reserved_stock': record.reserved_stock,
                    'available_stock': record.available_stock,
                    'quantity_present': record.quantity_present,
                    'quantity_reserved': record.quantity_reserved
                })
            
            self.cursor.executemany(insert_query, batch_data)
            self.connection.commit()
            
            return 0, len(batch_data), 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è inventory_data: {e}")
            self.connection.rollback()
            return 0, 0, len(inventory_records)

    def run_full_sync_with_recovery(self) -> Dict[str, SyncResult]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Returns:
            Dict[str, SyncResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        results = {}
        
        try:
            self.connect_to_database()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon
            logger.info("=" * 50)
            logger.info("–ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í OZON")
            logger.info("=" * 50)
            
            results['Ozon'] = self.sync_ozon_inventory_with_recovery()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Wildberries
            logger.info("=" * 50)
            logger.info("–ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í WILDBERRIES")
            logger.info("=" * 50)
            
            results['Wildberries'] = self.sync_wb_inventory_with_recovery()
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_sync_summary(results)
            
            logger.info("‚úÖ –ü–æ–ª–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            raise
        finally:
            self.close_database_connection()
        
        return results

    def print_sync_summary(self, results: Dict[str, SyncResult]):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        logger.info("=" * 60)
        logger.info("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        logger.info("=" * 60)
        
        for source, result in results.items():
            logger.info(f"\nüìä {source}:")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {result.status.value}")
            logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.records_processed}")
            logger.info(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
            logger.info(f"   –û—à–∏–±–æ–∫: {result.records_failed}")
            logger.info(f"   API –∑–∞–ø—Ä–æ—Å–æ–≤: {result.api_requests_count}")
            logger.info(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds}—Å")
            logger.info(f"   Fallback –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {'–î–∞' if result.fallback_used else '–ù–µ—Ç'}")
            
            if result.recovery_actions:
                logger.info(f"   –î–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
                for action in result.recovery_actions:
                    logger.info(f"     - {action}")
            
            if result.error_message:
                logger.info(f"   –û—à–∏–±–∫–∞: {result.error_message}")


if __name__ == "__main__":
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    service = RobustInventorySyncService()
    
    try:
        results = service.run_full_sync_with_recovery()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        error_stats = service.get_error_statistics()
        if error_stats['total_errors'] > 0:
            logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫: {error_stats['total_errors']} –≤—Å–µ–≥–æ, {error_stats['recent_errors']} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)