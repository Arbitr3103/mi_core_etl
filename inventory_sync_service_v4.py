#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Ozon v4 API.

–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ POST /v4/product/info/stocks –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ cursor
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ offer_id –∏ visibility
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤: present, reserved, fbo, fbs, realFbs

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 07 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
import requests
import time
import json
from datetime import datetime, date
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    import config
    from inventory_data_validator import InventoryDataValidator, ValidationResult
    from sync_logger import SyncLogger, SyncType, SyncStatus as LogSyncStatus, ProcessingStats
    import mysql.connector
    from dotenv import load_dotenv
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL."""
    try:
        connection = mysql.connector.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            user=os.getenv('DB_USER', 'ingest_user'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME', 'mi_core_db'),
            charset='utf8mb4',
            collation='utf8mb4_unicode_ci',
            autocommit=True
        )
        return connection
    except mysql.connector.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SyncStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    SUCCESS = "success"
    PARTIAL = "partial"
    FAILED = "failed"


class StockType(Enum):
    """–¢–∏–ø—ã —Å–∫–ª–∞–¥–æ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤."""
    FBO = "fbo"
    FBS = "fbs"
    REAL_FBS = "realFbs"


class OzonAPIError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ Ozon API."""
    def __init__(self, message: str, status_code: int = None, response_data: dict = None):
        self.message = message
        self.status_code = status_code
        self.response_data = response_data or {}
        super().__init__(self.message)


class OzonRateLimitError(OzonAPIError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    pass


class OzonAuthenticationError(OzonAPIError):
    """–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    pass


class OzonValidationError(OzonAPIError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞."""
    pass


class OzonServerError(OzonAPIError):
    """–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ Ozon."""
    pass


@dataclass
class OzonStockRecord:
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞ —Å Ozon v4 API."""
    offer_id: str
    product_id: int
    warehouse_id: int
    warehouse_name: str
    stock_type: str
    present: int
    reserved: int
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.present = max(0, int(self.present or 0))
        self.reserved = max(0, int(self.reserved or 0))


@dataclass
class InventoryRecord:
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ë–î."""
    product_id: int
    sku: str
    source: str
    warehouse_name: str
    stock_type: str
    current_stock: int
    reserved_stock: int
    available_stock: int
    quantity_present: int
    quantity_reserved: int
    snapshot_date: date
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.current_stock = max(0, int(self.current_stock or 0))
        self.reserved_stock = max(0, int(self.reserved_stock or 0))
        self.available_stock = max(0, int(self.available_stock or 0))
        self.quantity_present = max(0, int(self.quantity_present or 0))
        self.quantity_reserved = max(0, int(self.quantity_reserved or 0))
        
        # –ï—Å–ª–∏ available_stock –Ω–µ –∑–∞–¥–∞–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
        if self.available_stock == 0 and self.current_stock > 0:
            self.available_stock = max(0, self.current_stock - self.reserved_stock)


@dataclass
class OzonWarehouse:
    """–ú–æ–¥–µ–ª—å —Å–∫–ª–∞–¥–∞ Ozon."""
    warehouse_id: int
    warehouse_name: str
    warehouse_type: str
    is_active: bool
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.warehouse_id = int(self.warehouse_id or 0)
        self.is_active = bool(self.is_active)


@dataclass
class OzonAnalyticsStock:
    """–ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Å Ozon."""
    offer_id: str
    warehouse_id: int
    warehouse_name: str
    free_to_sell_amount: int
    promised_amount: int
    reserved_amount: int
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.free_to_sell_amount = max(0, int(self.free_to_sell_amount or 0))
        self.promised_amount = max(0, int(self.promised_amount or 0))
        self.reserved_amount = max(0, int(self.reserved_amount or 0))


@dataclass
class StockComparison:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º API."""
    offer_id: str
    warehouse_id: int
    main_api_present: int
    main_api_reserved: int
    analytics_free_to_sell: int
    analytics_reserved: int
    discrepancy_present: int
    discrepancy_reserved: int
    has_significant_discrepancy: bool
    
    def __post_init__(self):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π."""
        self.discrepancy_present = abs(self.main_api_present - self.analytics_free_to_sell)
        self.discrepancy_reserved = abs(self.main_api_reserved - self.analytics_reserved)
        
        # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 10% –∏–ª–∏ –±–æ–ª—å—à–µ 5 –µ–¥–∏–Ω–∏—Ü
        threshold_percent = 0.1
        threshold_absolute = 5
        
        present_threshold = max(threshold_absolute, self.main_api_present * threshold_percent)
        reserved_threshold = max(threshold_absolute, self.main_api_reserved * threshold_percent)
        
        self.has_significant_discrepancy = (
            self.discrepancy_present > present_threshold or 
            self.discrepancy_reserved > reserved_threshold
        )


@dataclass
class SyncResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    source: str
    status: SyncStatus
    records_processed: int
    records_updated: int
    records_inserted: int
    records_failed: int
    started_at: datetime
    completed_at: Optional[datetime] = None
    error_message: Optional[str] = None
    api_requests_count: int = 0
    
    @property
    def duration_seconds(self) -> int:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if self.completed_at:
            return int((self.completed_at - self.started_at).total_seconds())
        return 0


class InventorySyncServiceV4:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Ozon v4 API.
    
    –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ POST /v4/product/info/stocks
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ cursor
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.connection = None
        self.cursor = None
        self.validator = InventoryDataValidator()
        self.sync_logger: Optional[SyncLogger] = None
        self.warehouse_cache: Dict[int, OzonWarehouse] = {}
        self.warehouse_cache_updated: Optional[datetime] = None
        self.api_retry_count = 0
        self.max_retries = 3
        self.base_delay = 1.0
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = connect_to_db()
            self.cursor = self.connection.cursor(dictionary=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SyncLogger –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            self.sync_logger = SyncLogger(self.cursor, self.connection, "InventorySyncServiceV4")
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            if self.sync_logger:
                self.sync_logger.log_info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def close_database_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    def handle_ozon_api_error(self, response: requests.Response, endpoint: str) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Ozon API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º.
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç API
            endpoint: URL endpoint –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É
        """
        status_code = response.status_code
        
        try:
            error_data = response.json()
        except:
            error_data = {"message": response.text}
        
        error_message = error_data.get("message", "Unknown error")
        error_code = error_data.get("code", "UNKNOWN")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        if self.sync_logger:
            self.sync_logger.log_error(
                f"Ozon API Error - Endpoint: {endpoint}, "
                f"Status: {status_code}, Code: {error_code}, Message: {error_message}"
            )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        if status_code == 401:
            raise OzonAuthenticationError(
                f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error_message}",
                status_code=status_code,
                response_data=error_data
            )
        elif status_code == 400:
            raise OzonValidationError(
                f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {error_message}",
                status_code=status_code,
                response_data=error_data
            )
        elif status_code == 429:
            raise OzonRateLimitError(
                f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {error_message}",
                status_code=status_code,
                response_data=error_data
            )
        elif status_code >= 500:
            raise OzonServerError(
                f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ Ozon: {error_message}",
                status_code=status_code,
                response_data=error_data
            )
        else:
            raise OzonAPIError(
                f"–û—à–∏–±–∫–∞ API: {error_message}",
                status_code=status_code,
                response_data=error_data
            )

    def calculate_retry_delay(self, attempt: int, base_delay: float = None) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff.
        
        Args:
            attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
            base_delay: –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if base_delay is None:
            base_delay = self.base_delay
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å jitter
        import random
        delay = base_delay * (2 ** (attempt - 1))
        jitter = random.uniform(0.1, 0.3) * delay
        return delay + jitter

    def make_api_request_with_retry(self, url: str, headers: dict, payload: dict = None, 
                                   method: str = "POST") -> dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            payload: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            method: HTTP –º–µ—Ç–æ–¥
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
        """
        last_exception = None
        
        for attempt in range(1, self.max_retries + 1):
            try:
                if self.sync_logger:
                    self.sync_logger.log_info(f"API –∑–∞–ø—Ä–æ—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_retries}): {url}")
                
                request_start = time.time()
                
                if method.upper() == "POST":
                    response = requests.post(url, json=payload, headers=headers, timeout=30)
                else:
                    response = requests.get(url, headers=headers, timeout=30)
                
                request_time = time.time() - request_start
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
                if self.sync_logger:
                    self.sync_logger.log_api_request(
                        endpoint=url,
                        response_time=request_time,
                        status_code=response.status_code,
                        error_message=None if response.status_code < 400 else response.text
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                if response.status_code < 400:
                    return response.json()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                self.handle_ozon_api_error(response, url)
                
            except OzonRateLimitError as e:
                last_exception = e
                if attempt < self.max_retries:
                    # –î–ª—è rate limit –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                    delay = self.calculate_retry_delay(attempt, base_delay=5.0)
                    if self.sync_logger:
                        self.sync_logger.log_warning(f"Rate limit exceeded, –∂–¥–µ–º {delay:.1f} —Å–µ–∫")
                    time.sleep(delay)
                    continue
                else:
                    raise
                    
            except (OzonServerError, requests.exceptions.RequestException) as e:
                last_exception = e
                if attempt < self.max_retries:
                    delay = self.calculate_retry_delay(attempt)
                    if self.sync_logger:
                        self.sync_logger.log_warning(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫: {e}")
                    time.sleep(delay)
                    continue
                else:
                    raise
                    
            except (OzonAuthenticationError, OzonValidationError) as e:
                # –≠—Ç–∏ –æ—à–∏–±–∫–∏ –Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                if self.sync_logger:
                    self.sync_logger.log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API: {e}")
                raise
                
            except Exception as e:
                last_exception = e
                if attempt < self.max_retries:
                    delay = self.calculate_retry_delay(attempt)
                    if self.sync_logger:
                        self.sync_logger.log_warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f} —Å–µ–∫: {e}")
                    time.sleep(delay)
                    continue
                else:
                    raise
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        if last_exception:
            raise last_exception
        else:
            raise OzonAPIError("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")

    def fallback_to_old_api(self, error: Exception) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã API.
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö endpoints
        if isinstance(error, (OzonServerError, requests.exceptions.ConnectionError)):
            return True
        
        # –î–ª—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ fallback –Ω–µ –ø–æ–º–æ–∂–µ—Ç
        if isinstance(error, (OzonAuthenticationError, OzonValidationError)):
            return False
        
        # –î–ª—è rate limit —Ç–æ–∂–µ –Ω–µ –ø–æ–º–æ–∂–µ—Ç
        if isinstance(error, OzonRateLimitError):
            return False
        
        return True

    def log_endpoint_usage(self, endpoint: str, success: bool, response_time: float, 
                          error_type: str = None) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        
        Args:
            endpoint: URL endpoint
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∞
        """
        if self.sync_logger:
            status = "SUCCESS" if success else f"FAILED ({error_type})"
            self.sync_logger.log_info(
                f"ENDPOINT_USAGE: {endpoint} - {status} - {response_time:.2f}s"
            )

    def get_ozon_stocks_v4(self, cursor: str = None, offer_ids: List[str] = None, 
                          visibility: str = "ALL", limit: int = 1000) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Ozon v4 API.
        
        Args:
            cursor: –ö—É—Ä—Å–æ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (lastId –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)
            offer_ids: –°–ø–∏—Å–æ–∫ offer_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            visibility: –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ ("ALL", "VISIBLE", "INVISIBLE")
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ (–º–∞–∫—Å–∏–º—É–º 1000)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ API –∑–∞–ø—Ä–æ—Å–∞
        """
        url = f"{config.OZON_API_BASE_URL}/v4/product/info/stocks"
        headers = {
            "Client-Id": config.OZON_CLIENT_ID,
            "Api-Key": config.OZON_API_KEY,
            "Content-Type": "application/json"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        payload = {
            "limit": min(limit, 1000),  # –ú–∞–∫—Å–∏–º—É–º 1000 —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            "filter": {
                "visibility": visibility
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º cursor –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if cursor:
            payload["cursor"] = cursor
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ offer_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if offer_ids:
            payload["filter"]["offer_id"] = offer_ids[:100]  # –ú–∞–∫—Å–∏–º—É–º 100 offer_id –∑–∞ —Ä–∞–∑
        
        try:
            if self.sync_logger:
                self.sync_logger.log_info(f"–ó–∞–ø—Ä–æ—Å –∫ Ozon v4 API: cursor={cursor}, limit={limit}, visibility={visibility}")
            
            request_start = time.time()
            data = self.make_api_request_with_retry(url, headers, payload)
            request_time = time.time() - request_start
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint
            self.log_endpoint_usage(url, True, request_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "items" not in data:
                raise ValueError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
            
            items = data.get("items", [])
            cursor = data.get("cursor", "")
            total = data.get("total", 0)
            has_next = bool(cursor)  # –ï—Å–ª–∏ –µ—Å—Ç—å cursor, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ
            
            if self.sync_logger:
                self.sync_logger.log_info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤, has_next={has_next}")
            
            return {
                "items": items,
                "last_id": cursor,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cursor –∫–∞–∫ last_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "has_next": has_next,
                "total_items": len(items)
            }
            
        except OzonAPIError as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint —Å –æ—à–∏–±–∫–æ–π
            self.log_endpoint_usage(url, False, 0, type(e).__name__)
            error_msg = f"–û—à–∏–±–∫–∞ Ozon v4 API: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint —Å –æ—à–∏–±–∫–æ–π
            self.log_endpoint_usage(url, False, 0, type(e).__name__)
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ Ozon v4 API: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise

    def get_ozon_warehouses(self) -> List[OzonWarehouse]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ Ozon —á–µ—Ä–µ–∑ API.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ Ozon
        """
        url = f"{config.OZON_API_BASE_URL}/v1/warehouse/list"
        headers = {
            "Client-Id": config.OZON_CLIENT_ID,
            "Api-Key": config.OZON_API_KEY,
            "Content-Type": "application/json"
        }
        
        try:
            if self.sync_logger:
                self.sync_logger.log_info("–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ Ozon")
            
            request_start = time.time()
            data = self.make_api_request_with_retry(url, headers, {})
            request_time = time.time() - request_start
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint
            self.log_endpoint_usage(url, True, request_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "result" not in data:
                raise ValueError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API —Å–∫–ª–∞–¥–æ–≤")
            
            warehouses_data = data["result"]
            warehouses = []
            
            for warehouse_data in warehouses_data:
                try:
                    warehouse = OzonWarehouse(
                        warehouse_id=warehouse_data.get("warehouse_id", 0),
                        warehouse_name=warehouse_data.get("name", f"Warehouse_{warehouse_data.get('warehouse_id', 0)}"),
                        warehouse_type=warehouse_data.get("type", "FBO"),
                        is_active=warehouse_data.get("is_active", True)
                    )
                    warehouses.append(warehouse)
                except Exception as e:
                    if self.sync_logger:
                        self.sync_logger.log_warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–ª–∞–¥–∞ {warehouse_data}: {e}")
                    continue
            
            if self.sync_logger:
                self.sync_logger.log_info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ Ozon")
            
            return warehouses
            
        except OzonAPIError as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint —Å –æ—à–∏–±–∫–æ–π
            self.log_endpoint_usage(url, False, 0, type(e).__name__)
            error_msg = f"–û—à–∏–±–∫–∞ API —Å–∫–ª–∞–¥–æ–≤ Ozon: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint —Å –æ—à–∏–±–∫–æ–π
            self.log_endpoint_usage(url, False, 0, type(e).__name__)
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ API —Å–∫–ª–∞–¥–æ–≤: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise

    def update_warehouse_cache(self, force_update: bool = False) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–∫–ª–∞–¥–æ–≤.
        
        Args:
            force_update: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
        if not force_update and self.warehouse_cache_updated:
            time_diff = datetime.now() - self.warehouse_cache_updated
            if time_diff.total_seconds() < 24 * 3600:  # 24 —á–∞—Å–∞
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–ª–∞–≥
                if not hasattr(self, '_cache_log_shown'):
                    if self.sync_logger:
                        self.sync_logger.log_info("–ö—ç—à —Å–∫–ª–∞–¥–æ–≤ –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                    self._cache_log_shown = True
                return
        
        try:
            if self.sync_logger:
                self.sync_logger.log_info("–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–∫–ª–∞–¥–æ–≤ Ozon")
            
            warehouses = self.get_ozon_warehouses()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.warehouse_cache.clear()
            for warehouse in warehouses:
                self.warehouse_cache[warehouse.warehouse_id] = warehouse
            
            self.warehouse_cache_updated = datetime.now()
            
            if self.sync_logger:
                self.sync_logger.log_info(f"–ö—ç—à —Å–∫–ª–∞–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.warehouse_cache)} —Å–∫–ª–∞–¥–æ–≤")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å–∫–ª–∞–¥–æ–≤: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤

    def get_warehouse_name(self, warehouse_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ –ø–æ ID —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞.
        
        Args:
            warehouse_id: ID —Å–∫–ª–∞–¥–∞
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if not self.warehouse_cache:
            try:
                self.update_warehouse_cache()
            except Exception:
                pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        # –ò—â–µ–º –≤ –∫—ç—à–µ
        warehouse = self.warehouse_cache.get(warehouse_id)
        if warehouse:
            return warehouse.warehouse_name
        
        # Fallback –Ω–∞–∑–≤–∞–Ω–∏–µ
        return f"Ozon_Warehouse_{warehouse_id}" if warehouse_id > 0 else "Ozon_Main"

    def save_warehouses_to_db(self, warehouses: List[OzonWarehouse]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–∞—Ö –≤ –ë–î.
        
        Args:
            warehouses: –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            if self.sync_logger:
                self.sync_logger.log_info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –≤ –ë–î")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–∫–ª–∞–¥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            create_table_query = """
            CREATE TABLE IF NOT EXISTS ozon_warehouses (
                warehouse_id INT PRIMARY KEY,
                warehouse_name VARCHAR(255) NOT NULL,
                warehouse_type VARCHAR(50) DEFAULT 'FBO',
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_warehouse_name (warehouse_name),
                INDEX idx_warehouse_type (warehouse_type)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """
            self.cursor.execute(create_table_query)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–ª–∞–¥—ã
            for warehouse in warehouses:
                try:
                    upsert_query = """
                    INSERT INTO ozon_warehouses 
                    (warehouse_id, warehouse_name, warehouse_type, is_active)
                    VALUES (%s, %s, %s, %s)
                    ON DUPLICATE KEY UPDATE
                        warehouse_name = VALUES(warehouse_name),
                        warehouse_type = VALUES(warehouse_type),
                        is_active = VALUES(is_active),
                        updated_at = CURRENT_TIMESTAMP
                    """
                    
                    self.cursor.execute(upsert_query, (
                        warehouse.warehouse_id,
                        warehouse.warehouse_name,
                        warehouse.warehouse_type,
                        warehouse.is_active
                    ))
                    
                except Exception as e:
                    if self.sync_logger:
                        self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ {warehouse.warehouse_id}: {e}")
                    continue
            
            self.connection.commit()
            
            if self.sync_logger:
                self.sync_logger.log_info("–°–∫–ª–∞–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            
        except Exception as e:
            self.connection.rollback()
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ –ë–î: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise

    def get_ozon_analytics_stocks(self, date_from: str = None, date_to: str = None) -> List[OzonAnalyticsStock]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —á–µ—Ä–µ–∑ Ozon Analytics API.
        
        Args:
            date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)
            date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        """
        url = f"{config.OZON_API_BASE_URL}/v2/analytics/stock_on_warehouses"
        headers = {
            "Client-Id": config.OZON_CLIENT_ID,
            "Api-Key": config.OZON_API_KEY,
            "Content-Type": "application/json"
        }
        
        # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        if not date_from:
            date_from = date.today().isoformat()
        if not date_to:
            date_to = date.today().isoformat()
        
        payload = {
            "date_from": date_from,
            "date_to": date_to,
            "metrics": [
                "free_to_sell_amount",
                "promised_amount", 
                "reserved_amount"
            ],
            "dimension": [
                "sku",
                "warehouse"
            ],
            "filters": [],
            "sort": [
                {
                    "key": "free_to_sell_amount",
                    "order": "DESC"
                }
            ],
            "limit": 1000,
            "offset": 0
        }
        
        try:
            if self.sync_logger:
                self.sync_logger.log_info(f"–ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö Ozon –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to}")
            
            request_start = time.time()
            data = self.make_api_request_with_retry(url, headers, payload)
            request_time = time.time() - request_start
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint
            self.log_endpoint_usage(url, True, request_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "result" not in data:
                raise ValueError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Analytics API")
            
            result = data["result"]
            analytics_data = result.get("data", [])
            analytics_stocks = []
            
            for item in analytics_data:
                try:
                    dimensions = item.get("dimensions", [])
                    metrics = item.get("metrics", [])
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ dimensions
                    offer_id = ""
                    warehouse_name = ""
                    warehouse_id = 0
                    
                    for dimension in dimensions:
                        if dimension.get("id") == "sku":
                            offer_id = dimension.get("value", "")
                        elif dimension.get("id") == "warehouse":
                            warehouse_name = dimension.get("value", "")
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ warehouse_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                            for wh_id, warehouse in self.warehouse_cache.items():
                                if warehouse.warehouse_name == warehouse_name:
                                    warehouse_id = wh_id
                                    break
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    free_to_sell_amount = 0
                    promised_amount = 0
                    reserved_amount = 0
                    
                    for metric in metrics:
                        metric_id = metric.get("id", "")
                        metric_value = metric.get("value", 0)
                        
                        if metric_id == "free_to_sell_amount":
                            free_to_sell_amount = int(metric_value)
                        elif metric_id == "promised_amount":
                            promised_amount = int(metric_value)
                        elif metric_id == "reserved_amount":
                            reserved_amount = int(metric_value)
                    
                    if offer_id:  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å offer_id
                        analytics_stock = OzonAnalyticsStock(
                            offer_id=offer_id,
                            warehouse_id=warehouse_id,
                            warehouse_name=warehouse_name,
                            free_to_sell_amount=free_to_sell_amount,
                            promised_amount=promised_amount,
                            reserved_amount=reserved_amount
                        )
                        analytics_stocks.append(analytics_stock)
                
                except Exception as e:
                    if self.sync_logger:
                        self.sync_logger.log_warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                    continue
            
            if self.sync_logger:
                self.sync_logger.log_info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(analytics_stocks)} –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            return analytics_stocks
            
        except OzonAPIError as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint —Å –æ—à–∏–±–∫–æ–π
            self.log_endpoint_usage(url, False, 0, type(e).__name__)
            error_msg = f"–û—à–∏–±–∫–∞ Analytics API Ozon: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ endpoint —Å –æ—à–∏–±–∫–æ–π
            self.log_endpoint_usage(url, False, 0, type(e).__name__)
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ Analytics API: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise

    def compare_stock_data(self, main_stocks: List[OzonStockRecord], 
                          analytics_stocks: List[OzonAnalyticsStock]) -> List[StockComparison]:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º API.
        
        Args:
            main_stocks: –î–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
            analytics_stocks: –î–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        comparisons = []
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        analytics_index = {}
        for analytics_stock in analytics_stocks:
            key = f"{analytics_stock.offer_id}_{analytics_stock.warehouse_id}"
            analytics_index[key] = analytics_stock
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for main_stock in main_stocks:
            key = f"{main_stock.offer_id}_{main_stock.warehouse_id}"
            analytics_stock = analytics_index.get(key)
            
            if analytics_stock:
                comparison = StockComparison(
                    offer_id=main_stock.offer_id,
                    warehouse_id=main_stock.warehouse_id,
                    main_api_present=main_stock.present,
                    main_api_reserved=main_stock.reserved,
                    analytics_free_to_sell=analytics_stock.free_to_sell_amount,
                    analytics_reserved=analytics_stock.reserved_amount,
                    discrepancy_present=0,  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –≤ __post_init__
                    discrepancy_reserved=0,  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –≤ __post_init__
                    has_significant_discrepancy=False  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –≤ __post_init__
                )
                comparisons.append(comparison)
        
        return comparisons

    def generate_discrepancy_alerts(self, comparisons: List[StockComparison]) -> List[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            comparisons: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤
        """
        alerts = []
        significant_discrepancies = [c for c in comparisons if c.has_significant_discrepancy]
        
        if not significant_discrepancies:
            return alerts
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        high_present_discrepancy = [c for c in significant_discrepancies if c.discrepancy_present > 10]
        high_reserved_discrepancy = [c for c in significant_discrepancies if c.discrepancy_reserved > 10]
        
        if high_present_discrepancy:
            alerts.append({
                "type": "HIGH_PRESENT_DISCREPANCY",
                "message": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö –¥–ª—è {len(high_present_discrepancy)} —Ç–æ–≤–∞—Ä–æ–≤",
                "count": len(high_present_discrepancy),
                "severity": "HIGH",
                "details": [
                    {
                        "offer_id": c.offer_id,
                        "warehouse_id": c.warehouse_id,
                        "main_api": c.main_api_present,
                        "analytics_api": c.analytics_free_to_sell,
                        "discrepancy": c.discrepancy_present
                    }
                    for c in high_present_discrepancy[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                ]
            })
        
        if high_reserved_discrepancy:
            alerts.append({
                "type": "HIGH_RESERVED_DISCREPANCY", 
                "message": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ä–µ–∑–µ—Ä–≤–µ –¥–ª—è {len(high_reserved_discrepancy)} —Ç–æ–≤–∞—Ä–æ–≤",
                "count": len(high_reserved_discrepancy),
                "severity": "MEDIUM",
                "details": [
                    {
                        "offer_id": c.offer_id,
                        "warehouse_id": c.warehouse_id,
                        "main_api": c.main_api_reserved,
                        "analytics_api": c.analytics_reserved,
                        "discrepancy": c.discrepancy_reserved
                    }
                    for c in high_reserved_discrepancy[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                ]
            })
        
        return alerts

    def save_stock_comparisons(self, comparisons: List[StockComparison]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            comparisons: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            if self.sync_logger:
                self.sync_logger.log_info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {len(comparisons)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –ë–î")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            create_table_query = """
            CREATE TABLE IF NOT EXISTS ozon_stock_comparisons (
                id INT AUTO_INCREMENT PRIMARY KEY,
                offer_id VARCHAR(255) NOT NULL,
                warehouse_id INT NOT NULL,
                main_api_present INT DEFAULT 0,
                main_api_reserved INT DEFAULT 0,
                analytics_free_to_sell INT DEFAULT 0,
                analytics_reserved INT DEFAULT 0,
                discrepancy_present INT DEFAULT 0,
                discrepancy_reserved INT DEFAULT 0,
                has_significant_discrepancy BOOLEAN DEFAULT FALSE,
                comparison_date DATE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_offer_warehouse (offer_id, warehouse_id),
                INDEX idx_comparison_date (comparison_date),
                INDEX idx_significant_discrepancy (has_significant_discrepancy)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """
            self.cursor.execute(create_table_query)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            for comparison in comparisons:
                try:
                    insert_query = """
                    INSERT INTO ozon_stock_comparisons 
                    (offer_id, warehouse_id, main_api_present, main_api_reserved,
                     analytics_free_to_sell, analytics_reserved, discrepancy_present,
                     discrepancy_reserved, has_significant_discrepancy, comparison_date)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """
                    
                    self.cursor.execute(insert_query, (
                        comparison.offer_id,
                        comparison.warehouse_id,
                        comparison.main_api_present,
                        comparison.main_api_reserved,
                        comparison.analytics_free_to_sell,
                        comparison.analytics_reserved,
                        comparison.discrepancy_present,
                        comparison.discrepancy_reserved,
                        comparison.has_significant_discrepancy,
                        date.today()
                    ))
                    
                except Exception as e:
                    if self.sync_logger:
                        self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è {comparison.offer_id}: {e}")
                    continue
            
            self.connection.commit()
            
            if self.sync_logger:
                self.sync_logger.log_info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            
        except Exception as e:
            self.connection.rollback()
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –ë–î: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg)
            raise

    def process_ozon_v4_stocks(self, api_items: List[Dict]) -> List[OzonStockRecord]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏–∑ Ozon v4 API.
        
        Args:
            api_items: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        """
        stock_records = []
        
        for item in api_items:
            try:
                offer_id = item.get("offer_id", "")
                if not offer_id:
                    if self.sync_logger:
                        self.sync_logger.log_warning("–¢–æ–≤–∞—Ä –±–µ–∑ offer_id –ø—Ä–æ–ø—É—â–µ–Ω")
                    continue
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º product_id –∏–∑ API –æ—Ç–≤–µ—Ç–∞
                product_id = item.get("product_id", 0)
                if not product_id:
                    if self.sync_logger:
                        self.sync_logger.log_warning(f"–¢–æ–≤–∞—Ä {offer_id} –±–µ–∑ product_id –ø—Ä–æ–ø—É—â–µ–Ω")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
                stocks = item.get("stocks", [])
                if not stocks:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    stock_record = OzonStockRecord(
                        offer_id=offer_id,
                        product_id=product_id,
                        warehouse_id=0,
                        warehouse_name="Ozon Main",
                        stock_type=StockType.FBO.value,
                        present=0,
                        reserved=0
                    )
                    stock_records.append(stock_record)
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫–ª–∞–¥
                for stock in stocks:
                    warehouse_id = stock.get("warehouse_id", 0)
                    warehouse_name = self.get_warehouse_name(warehouse_id)
                    stock_type = stock.get("type", "fbo")
                    present = stock.get("present", 0)
                    reserved = stock.get("reserved", 0)
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–∞–∂–µ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏)
                    stock_record = OzonStockRecord(
                        offer_id=offer_id,
                        product_id=product_id,
                        warehouse_id=warehouse_id,
                        warehouse_name=warehouse_name,
                        stock_type=stock_type,
                        present=present,
                        reserved=reserved
                    )
                    stock_records.append(stock_record)
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {item.get('offer_id', 'unknown')}: {e}"
                if self.sync_logger:
                    self.sync_logger.log_error(error_msg)
                continue
        
        return stock_records

    def convert_to_inventory_records(self, ozon_stocks: List[OzonStockRecord]) -> List[InventoryRecord]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π Ozon –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç InventoryRecord.
        
        Args:
            ozon_stocks: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Å Ozon
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ InventoryRecord
        """
        inventory_records = []
        
        for stock in ozon_stocks:
            try:
                inventory_record = InventoryRecord(
                    product_id=stock.product_id,
                    sku=stock.offer_id,
                    source='Ozon',
                    warehouse_name=stock.warehouse_name,
                    stock_type=stock.stock_type.upper(),
                    current_stock=stock.present,
                    reserved_stock=stock.reserved,
                    available_stock=max(0, stock.present - stock.reserved),
                    quantity_present=stock.present,
                    quantity_reserved=stock.reserved,
                    snapshot_date=date.today()
                )
                inventory_records.append(inventory_record)
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {stock.offer_id}: {e}"
                if self.sync_logger:
                    self.sync_logger.log_error(error_msg)
                continue
        
        return inventory_records

    def sync_ozon_inventory_v4(self, offer_ids: List[str] = None, 
                              visibility: str = "ALL") -> SyncResult:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon —á–µ—Ä–µ–∑ v4 API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
        
        Args:
            offer_ids: –°–ø–∏—Å–æ–∫ offer_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            visibility: –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            SyncResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        started_at = datetime.now()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.sync_logger:
            self.sync_logger.start_sync_session(SyncType.INVENTORY, "Ozon_v4")
            self.sync_logger.log_info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å Ozon v4 API")
        
        records_processed = 0
        records_inserted = 0
        records_failed = 0
        api_requests = 0
        all_stock_records = []
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–∞—Ö
            try:
                if self.sync_logger:
                    self.sync_logger.log_info("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–∞—Ö Ozon")
                
                warehouses = self.get_ozon_warehouses()
                self.save_warehouses_to_db(warehouses)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–∫–ª–∞–¥–æ–≤
                self.warehouse_cache.clear()
                for warehouse in warehouses:
                    self.warehouse_cache[warehouse.warehouse_id] = warehouse
                self.warehouse_cache_updated = datetime.now()
                
            except Exception as e:
                if self.sync_logger:
                    self.sync_logger.log_warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ —Å–∫–ª–∞–¥–æ–≤
            
            cursor = None
            page = 1
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ cursor
            while True:
                if self.sync_logger:
                    self.sync_logger.log_info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}, cursor: {cursor}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
                api_response = self.get_ozon_stocks_v4(
                    cursor=cursor,
                    offer_ids=offer_ids,
                    visibility=visibility,
                    limit=1000
                )
                
                api_requests += 1
                items = api_response["items"]
                
                if not items:
                    if self.sync_logger:
                        self.sync_logger.log_info("–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                batch_start = time.time()
                stock_records = self.process_ozon_v4_stocks(items)
                all_stock_records.extend(stock_records)
                
                records_processed += len(items)
                batch_time = time.time() - batch_start
                
                if self.sync_logger:
                    self.sync_logger.log_processing_stage(
                        f"Process Page {page}",
                        len(items),
                        len(stock_records),
                        batch_time
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if not api_response["has_next"]:
                    if self.sync_logger:
                        self.sync_logger.log_info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    break
                
                cursor = api_response["last_id"]
                page += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(config.OZON_REQUEST_DELAY)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if self.sync_logger:
                self.sync_logger.log_info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {len(all_stock_records)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç –ë–î")
            
            inventory_records = self.convert_to_inventory_records(all_stock_records)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            try:
                if self.sync_logger:
                    self.sync_logger.log_info("–ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                
                analytics_stocks = self.get_ozon_analytics_stocks()
                
                if analytics_stocks:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É API
                    comparisons = self.compare_stock_data(all_stock_records, analytics_stocks)
                    
                    if comparisons:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        self.save_stock_comparisons(comparisons)
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö
                        alerts = self.generate_discrepancy_alerts(comparisons)
                        
                        if alerts:
                            for alert in alerts:
                                if self.sync_logger:
                                    self.sync_logger.log_warning(f"ALERT: {alert['message']}")
                                    
                                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
                                    if alert['severity'] == 'HIGH':
                                        for detail in alert['details'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                            self.sync_logger.log_warning(
                                                f"  - {detail['offer_id']}: –æ—Å–Ω–æ–≤–Ω–æ–π API={detail['main_api']}, "
                                                f"–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API={detail['analytics_api']}, "
                                                f"—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ={detail['discrepancy']}"
                                            )
                        else:
                            if self.sync_logger:
                                self.sync_logger.log_info("–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É API –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                    
                    if self.sync_logger:
                        self.sync_logger.log_info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ {len(comparisons)} –∑–∞–ø–∏—Å–µ–π –º–µ–∂–¥—É API")
                else:
                    if self.sync_logger:
                        self.sync_logger.log_warning("–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                        
            except Exception as e:
                if self.sync_logger:
                    self.sync_logger.log_warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if inventory_records:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                validation_result = self.validate_inventory_data(inventory_records, 'Ozon')
                valid_records = self.filter_valid_records(inventory_records, validation_result)
                
                if valid_records:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    updated, inserted, failed = self.update_inventory_data(valid_records, 'Ozon')
                    records_inserted = inserted
                    records_failed += failed + (len(inventory_records) - len(valid_records))
                    
                    success_msg = (f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Ozon v4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed}, "
                                 f"–≤–∞–ª–∏–¥–Ω—ã—Ö {len(valid_records)}, –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {records_inserted}, –æ—à–∏–±–æ–∫ {records_failed}")
                    if self.sync_logger:
                        self.sync_logger.log_info(success_msg)
                else:
                    error_msg = "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                    if self.sync_logger:
                        self.sync_logger.log_error(error_msg)
                    records_failed = records_processed
            else:
                warning_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"
                if self.sync_logger:
                    self.sync_logger.log_warning(warning_msg)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if records_failed == 0:
                sync_status = SyncStatus.SUCCESS
                log_status = LogSyncStatus.SUCCESS
            elif records_inserted > 0:
                sync_status = SyncStatus.PARTIAL
                log_status = LogSyncStatus.PARTIAL
            else:
                sync_status = SyncStatus.FAILED
                log_status = LogSyncStatus.FAILED
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.sync_logger:
                self.sync_logger.update_sync_counters(
                    records_processed=records_processed,
                    records_inserted=records_inserted,
                    records_failed=records_failed
                )
                self.sync_logger.end_sync_session(status=log_status)
            
            return SyncResult(
                source='Ozon_v4',
                status=sync_status,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                api_requests_count=api_requests
            )
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon v4: {e}"
            if self.sync_logger:
                self.sync_logger.log_error(error_msg, e)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
            if self.fallback_to_old_api(e):
                if self.sync_logger:
                    self.sync_logger.log_warning("–ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã API")
                
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è fallback
                    from inventory_sync_service_enhanced import EnhancedInventorySyncService
                    
                    fallback_service = EnhancedInventorySyncService()
                    fallback_service.connection = self.connection
                    fallback_service.cursor = self.cursor
                    fallback_service.sync_logger = self.sync_logger
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    fallback_result = fallback_service.sync_ozon_inventory()
                    
                    if self.sync_logger:
                        self.sync_logger.log_info("Fallback —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        self.sync_logger.end_sync_session(status=LogSyncStatus.PARTIAL, 
                                                        error_message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –º–µ—Ç–æ–¥")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç fallback —Å –ø–æ–º–µ—Ç–∫–æ–π
                    fallback_result.source = 'Ozon_v4_fallback'
                    fallback_result.error_message = f"–û—Å–Ω–æ–≤–Ω–æ–π v4 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback: {str(e)}"
                    return fallback_result
                    
                except Exception as fallback_error:
                    if self.sync_logger:
                        self.sync_logger.log_error(f"Fallback —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {fallback_error}")
            
            # –ï—Å–ª–∏ fallback –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª—Å—è
            if self.sync_logger:
                self.sync_logger.end_sync_session(status=LogSyncStatus.FAILED, error_message=str(e))
            
            return SyncResult(
                source='Ozon_v4',
                status=SyncStatus.FAILED,
                records_processed=records_processed,
                records_updated=0,
                records_inserted=records_inserted,
                records_failed=records_failed,
                started_at=started_at,
                completed_at=datetime.now(),
                error_message=str(e),
                api_requests_count=api_requests
            )

    def get_product_id_by_ozon_sku(self, offer_id: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ product_id –ø–æ offer_id —Ç–æ–≤–∞—Ä–∞ –≤ Ozon.
        
        Args:
            offer_id: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ Ozon
            
        Returns:
            product_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            query = """
            SELECT id FROM dim_products 
            WHERE sku_ozon = %s OR sku_internal = %s
            LIMIT 1
            """
            self.cursor.execute(query, (offer_id, offer_id))
            result = self.cursor.fetchone()
            return result['id'] if result else None
        except Exception as e:
            if self.sync_logger:
                self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ offer_id {offer_id}: {e}")
            return None

    def validate_inventory_data(self, records: List[InventoryRecord], source: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö."""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º InventoryRecord –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        record_dicts = [record.__dict__ for record in records]
        return self.validator.validate_inventory_records(record_dicts, source)

    def filter_valid_records(self, records: List[InventoryRecord], 
                           validation_result: ValidationResult) -> List[InventoryRecord]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
        return self.validator.filter_valid_records(records, validation_result)

    def update_inventory_data(self, records: List[InventoryRecord], source: str) -> Tuple[int, int, int]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –≤ –ë–î.
        
        Returns:
            Tuple[updated_count, inserted_count, failed_count]
        """
        updated_count = 0
        inserted_count = 0
        failed_count = 0
        
        try:
            for record in records:
                try:
                    # UPSERT –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    query = """
                    INSERT INTO inventory_data 
                    (product_id, sku, source, warehouse_name, stock_type, 
                     current_stock, reserved_stock, available_stock, 
                     quantity_present, quantity_reserved, snapshot_date, last_sync_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                    ON DUPLICATE KEY UPDATE
                        current_stock = VALUES(current_stock),
                        reserved_stock = VALUES(reserved_stock),
                        available_stock = VALUES(available_stock),
                        quantity_present = VALUES(quantity_present),
                        quantity_reserved = VALUES(quantity_reserved),
                        snapshot_date = VALUES(snapshot_date),
                        last_sync_at = NOW()
                    """
                    
                    self.cursor.execute(query, (
                        record.product_id,
                        record.sku,
                        record.source,
                        record.warehouse_name,
                        record.stock_type,
                        record.current_stock,
                        record.reserved_stock,
                        record.available_stock,
                        record.quantity_present,
                        record.quantity_reserved,
                        record.snapshot_date
                    ))
                    
                    if self.cursor.rowcount > 0:
                        if self.cursor.lastrowid:
                            inserted_count += 1
                        else:
                            updated_count += 1
                    
                except Exception as e:
                    if self.sync_logger:
                        self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {record.sku}: {e}")
                    failed_count += 1
            
            self.connection.commit()
            
        except Exception as e:
            self.connection.rollback()
            if self.sync_logger:
                self.sync_logger.log_error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            failed_count = len(records)
        
        return updated_count, inserted_count, failed_count


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å v4 API
        result = service.sync_ozon_inventory_v4()
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"  –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.records_processed}")
        print(f"  –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
        print(f"  –û—à–∏–±–æ–∫: {result.records_failed}")
        print(f"  API –∑–∞–ø—Ä–æ—Å–æ–≤: {result.api_requests_count}")
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds} —Å–µ–∫")
        
        if result.error_message:
            print(f"  –û—à–∏–±–∫–∞: {result.error_message}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        service.close_database_connection()


if __name__ == "__main__":
    main()