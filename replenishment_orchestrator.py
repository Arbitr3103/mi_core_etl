#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∞—Å–æ–≤, —Ä–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂,
–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–æ–≤.
"""

import sys
import os
import logging
import argparse
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import asdict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import connect_to_db
from inventory_analyzer import InventoryAnalyzer
from sales_velocity_calculator import SalesVelocityCalculator
from replenishment_recommender import ReplenishmentRecommender
from alert_manager import AlertManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('replenishment_orchestrator.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ReplenishmentOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    
    def __init__(self, connection=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        
        Args:
            connection: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.connection = connection or connect_to_db()
        self.start_time = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.inventory_analyzer = InventoryAnalyzer(self.connection)
        self.sales_calculator = SalesVelocityCalculator(self.connection)
        self.recommender = ReplenishmentRecommender(self.connection)
        self.alert_manager = AlertManager(self.connection)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.execution_stats = {
            'start_time': self.start_time,
            'products_analyzed': 0,
            'recommendations_generated': 0,
            'alerts_created': 0,
            'errors_count': 0,
            'warnings_count': 0
        }
    
    def run_full_analysis(self, source: Optional[str] = None, 
                         save_to_db: bool = True,
                         send_alerts: bool = True) -> Dict[str, any]:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞.
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            save_to_db: –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            send_alerts: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–õ–ê–î–ê")
        logger.info("=" * 60)
        
        try:
            # –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∞—Å–æ–≤
            logger.info("üì¶ –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∞—Å–æ–≤")
            inventory_results = self._analyze_inventory(source)
            
            # –≠—Ç–∞–ø 2: –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂
            logger.info("üìà –≠—Ç–∞–ø 2: –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂")
            sales_results = self._calculate_sales_velocity(source)
            
            # –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            logger.info("üéØ –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é")
            recommendations = self._generate_recommendations(source, save_to_db)
            
            # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            if send_alerts:
                logger.info("üö® –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤")
                alert_results = self._process_alerts()
            else:
                alert_results = {'alerts_processed': 0, 'alerts_sent': 0}
            
            # –≠—Ç–∞–ø 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            logger.info("üìä –≠—Ç–∞–ø 5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            final_report = self._create_final_report(
                inventory_results, sales_results, recommendations, alert_results
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.execution_stats['end_time'] = datetime.now()
            self.execution_stats['total_duration'] = (
                self.execution_stats['end_time'] - self.execution_stats['start_time']
            ).total_seconds()
            
            logger.info("‚úÖ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
            logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.execution_stats['total_duration']:.1f} —Å–µ–∫")
            
            return final_report
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            self.execution_stats['errors_count'] += 1
            return {'error': str(e), 'execution_stats': self.execution_stats}
    
    def _analyze_inventory(self, source: Optional[str] = None) -> Dict[str, any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∞—Å–æ–≤."""
        try:
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã
            inventory_items = self.inventory_analyzer.get_current_stock(source=source)
            
            if not inventory_items:
                logger.warning("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∞—Å–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return {'items_count': 0, 'analysis_time': 0}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∞—Å—ã
            low_stock_items = []
            zero_stock_items = []
            total_value = 0
            
            for item in inventory_items:
                if item.available_stock <= 0:
                    zero_stock_items.append(item)
                elif item.available_stock <= item.min_stock_level:
                    low_stock_items.append(item)
                
                if item.cost_price:
                    total_value += item.current_stock * item.cost_price
            
            analysis_time = time.time() - start_time
            self.execution_stats['products_analyzed'] = len(inventory_items)
            
            results = {
                'items_count': len(inventory_items),
                'low_stock_count': len(low_stock_items),
                'zero_stock_count': len(zero_stock_items),
                'total_inventory_value': round(total_value, 2),
                'analysis_time': round(analysis_time, 2)
            }
            
            logger.info(f"   üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {results['items_count']}")
            logger.info(f"   ‚ö†Ô∏è  –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: {results['low_stock_count']}")
            logger.info(f"   üö´ –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º: {results['zero_stock_count']}")
            logger.info(f"   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø–∞—Å–æ–≤: {results['total_inventory_value']:,.2f} —Ä—É–±")
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∞—Å–æ–≤: {e}")
            self.execution_stats['errors_count'] += 1
            return {'error': str(e)}
    
    def _calculate_sales_velocity(self, source: Optional[str] = None) -> Dict[str, any]:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂."""
        try:
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            inventory_items = self.inventory_analyzer.get_current_stock(source=source)
            
            if not inventory_items:
                return {'products_analyzed': 0, 'analysis_time': 0}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂
            fast_moving_count = 0
            slow_moving_count = 0
            no_sales_count = 0
            
            for item in inventory_items[:100]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                try:
                    metrics = self.sales_calculator.get_sales_metrics(item.product_id)
                    
                    if metrics.daily_sales_rate_7d > 5:
                        fast_moving_count += 1
                    elif metrics.daily_sales_rate_7d == 0:
                        no_sales_count += 1
                    elif metrics.daily_sales_rate_7d < 1:
                        slow_moving_count += 1
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ {item.sku}: {e}")
                    continue
            
            analysis_time = time.time() - start_time
            
            results = {
                'products_analyzed': min(len(inventory_items), 100),
                'fast_moving_count': fast_moving_count,
                'slow_moving_count': slow_moving_count,
                'no_sales_count': no_sales_count,
                'analysis_time': round(analysis_time, 2)
            }
            
            logger.info(f"   üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {results['products_analyzed']}")
            logger.info(f"   üöÄ –ë—ã—Å—Ç—Ä–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è: {results['fast_moving_count']}")
            logger.info(f"   üêå –ú–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏—Ö—Å—è: {results['slow_moving_count']}")
            logger.info(f"   üö´ –ë–µ–∑ –ø—Ä–æ–¥–∞–∂: {results['no_sales_count']}")
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂: {e}")
            self.execution_stats['errors_count'] += 1
            return {'error': str(e)}
    
    def _generate_recommendations(self, source: Optional[str] = None, 
                                save_to_db: bool = True) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é."""
        try:
            start_time = time.time()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.recommender.generate_recommendations(source=source)
            
            if not recommendations:
                logger.warning("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                return []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if save_to_db:
                save_success = self.recommender.save_recommendations_to_db(recommendations)
                if not save_success:
                    logger.warning("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –ë–î")
                    self.execution_stats['warnings_count'] += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            priority_stats = {}
            total_order_value = 0
            
            for rec in recommendations:
                priority = rec.priority_level.value
                priority_stats[priority] = priority_stats.get(priority, 0) + 1
                
                if rec.recommended_order_value:
                    total_order_value += rec.recommended_order_value
            
            analysis_time = time.time() - start_time
            self.execution_stats['recommendations_generated'] = len(recommendations)
            
            logger.info(f"   üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
            logger.info(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {priority_stats.get('CRITICAL', 0)}")
            logger.info(f"   ‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {priority_stats.get('HIGH', 0)}")
            logger.info(f"   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤: {total_order_value:,.2f} —Ä—É–±")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            recommendations_dict = []
            for rec in recommendations[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                rec_dict = {
                    'product_id': rec.product_id,
                    'sku': rec.sku,
                    'product_name': rec.product_name,
                    'priority_level': rec.priority_level.value,
                    'urgency_score': rec.urgency_score,
                    'current_stock': rec.current_stock,
                    'recommended_order_quantity': rec.recommended_order_quantity,
                    'recommended_order_value': rec.recommended_order_value,
                    'days_until_stockout': rec.days_until_stockout
                }
                recommendations_dict.append(rec_dict)
            
            return recommendations_dict
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            self.execution_stats['errors_count'] += 1
            return []
    
    def _process_alerts(self) -> Dict[str, any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        try:
            start_time = time.time()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
            alert_summary = self.alert_manager.process_all_alerts()
            
            if not alert_summary:
                logger.warning("‚ö†Ô∏è  –ê–ª–µ—Ä—Ç—ã –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                return {'alerts_processed': 0, 'alerts_sent': 0}
            
            analysis_time = time.time() - start_time
            self.execution_stats['alerts_created'] = alert_summary.get('total_alerts', 0)
            
            logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {alert_summary.get('total_alerts', 0)}")
            logger.info(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {alert_summary.get('critical_alerts', 0)}")
            logger.info(f"   üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'‚úÖ' if alert_summary.get('email_success') else '‚ùå'}")
            
            return {
                'alerts_processed': alert_summary.get('total_alerts', 0),
                'critical_alerts': alert_summary.get('critical_alerts', 0),
                'email_sent': alert_summary.get('email_success', False),
                'processing_time': round(analysis_time, 2)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            self.execution_stats['errors_count'] += 1
            return {'error': str(e)}
    
    def _create_final_report(self, inventory_results: Dict, sales_results: Dict,
                           recommendations: List[Dict], alert_results: Dict) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        try:
            report = {
                'analysis_summary': {
                    'execution_date': self.start_time.strftime('%Y-%m-%d %H:%M:%S'),
                    'total_duration_seconds': self.execution_stats.get('total_duration', 0),
                    'products_analyzed': self.execution_stats['products_analyzed'],
                    'recommendations_generated': self.execution_stats['recommendations_generated'],
                    'alerts_created': self.execution_stats['alerts_created'],
                    'errors_count': self.execution_stats['errors_count'],
                    'warnings_count': self.execution_stats['warnings_count']
                },
                'inventory_analysis': inventory_results,
                'sales_analysis': sales_results,
                'recommendations': {
                    'total_count': len(recommendations),
                    'top_recommendations': recommendations[:10] if recommendations else []
                },
                'alerts': alert_results,
                'status': 'SUCCESS' if self.execution_stats['errors_count'] == 0 else 'COMPLETED_WITH_ERRORS'
            }
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return {'error': str(e)}
    
    def run_quick_check(self) -> Dict[str, any]:
        """
        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        logger.info("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–°–¢–ê–¢–ö–û–í")
        
        try:
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –ë–î
            critical_recommendations = self.recommender.get_critical_recommendations(limit=50)
            
            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
            critical_alerts = self.alert_manager.detect_critical_stock_levels()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç—ã
            if critical_alerts:
                self.alert_manager.save_alerts_to_db(critical_alerts)
                self.alert_manager.send_email_alerts(critical_alerts)
            
            execution_time = time.time() - start_time
            
            results = {
                'execution_time': round(execution_time, 2),
                'critical_recommendations': len(critical_recommendations),
                'critical_alerts': len(critical_alerts),
                'status': 'SUCCESS'
            }
            
            logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.1f} —Å–µ–∫")
            logger.info(f"   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(critical_recommendations)}")
            logger.info(f"   üì¢ –ê–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(critical_alerts)}")
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return {'error': str(e), 'status': 'ERROR'}
    
    def export_recommendations_to_file(self, filename: str, format: str = 'json') -> bool:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —Ñ–∞–π–ª.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ('json', 'csv')
            
        Returns:
            True –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.recommender.get_critical_recommendations(limit=1000)
            
            if not recommendations:
                logger.warning("–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return False
            
            if format.lower() == 'json':
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
                recommendations_data = []
                for rec in recommendations:
                    rec_dict = {
                        'sku': rec.sku,
                        'product_name': rec.product_name,
                        'priority_level': rec.priority_level.value,
                        'current_stock': rec.current_stock,
                        'recommended_order_quantity': rec.recommended_order_quantity,
                        'recommended_order_value': rec.recommended_order_value,
                        'days_until_stockout': rec.days_until_stockout,
                        'urgency_score': rec.urgency_score
                    }
                    recommendations_data.append(rec_dict)
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(recommendations_data, f, ensure_ascii=False, indent=2)
                
            elif format.lower() == 'csv':
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                import csv
                
                with open(filename, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    writer.writerow([
                        'SKU', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫',
                        '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑', '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞', '–î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è',
                        '–û—Ü–µ–Ω–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏'
                    ])
                    
                    # –î–∞–Ω–Ω—ã–µ
                    for rec in recommendations:
                        writer.writerow([
                            rec.sku,
                            rec.product_name,
                            rec.priority_level.value,
                            rec.current_stock,
                            rec.recommended_order_quantity,
                            rec.recommended_order_value or 0,
                            rec.days_until_stockout or '–ù/–î',
                            rec.urgency_score
                        ])
            
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ {filename}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        if self.inventory_analyzer:
            self.inventory_analyzer.close()
        if self.sales_calculator:
            self.sales_calculator.close()
        if self.recommender:
            self.recommender.close()
        if self.alert_manager:
            self.alert_manager.close()
        if self.connection:
            self.connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞')
    parser.add_argument('--mode', choices=['full', 'quick', 'export'], default='full',
                       help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: full (–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑), quick (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞), export (—ç–∫—Å–ø–æ—Ä—Ç)')
    parser.add_argument('--source', type=str, help='–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--no-save', action='store_true', help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î')
    parser.add_argument('--no-alerts', action='store_true', help='–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç—ã')
    parser.add_argument('--export-file', type=str, help='–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
    parser.add_argument('--export-format', choices=['json', 'csv'], default='json',
                       help='–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞')
    
    args = parser.parse_args()
    
    orchestrator = None
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = ReplenishmentOrchestrator()
        
        if args.mode == 'full':
            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            results = orchestrator.run_full_analysis(
                source=args.source,
                save_to_db=not args.no_save,
                send_alerts=not args.no_alerts
            )
            
            print("\n" + "="*80)
            print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –°–ö–õ–ê–î–ê")
            print("="*80)
            
            if 'error' not in results:
                summary = results['analysis_summary']
                print(f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {summary['execution_date']}")
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {summary['total_duration_seconds']:.1f} —Å–µ–∫")
                print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {summary['products_analyzed']}")
                print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {summary['recommendations_generated']}")
                print(f"üö® –ê–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {summary['alerts_created']}")
                print(f"‚ùå –û—à–∏–±–æ–∫: {summary['errors_count']}")
                print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {summary['warnings_count']}")
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {results['status']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                top_recs = results['recommendations']['top_recommendations']
                if top_recs:
                    print(f"\nüîù –¢–û–ü-{len(top_recs)} –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
                    for i, rec in enumerate(top_recs, 1):
                        print(f"{i:2d}. {rec['sku']} - {rec['product_name'][:40]}")
                        print(f"     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority_level']} | –û—Å—Ç–∞—Ç–æ–∫: {rec['current_stock']} —à—Ç | –ó–∞–∫–∞–∑–∞—Ç—å: {rec['recommended_order_quantity']} —à—Ç")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results['error']}")
        
        elif args.mode == 'quick':
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            results = orchestrator.run_quick_check()
            
            print("\n‚ö° –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ô –ü–†–û–í–ï–†–ö–ò:")
            print("="*50)
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {results.get('execution_time', 0)} —Å–µ–∫")
            print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {results.get('critical_recommendations', 0)}")
            print(f"üì¢ –ê–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {results.get('critical_alerts', 0)}")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {results.get('status', 'UNKNOWN')}")
        
        elif args.mode == 'export':
            # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if not args.export_file:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (--export-file)")
                return
            
            success = orchestrator.export_recommendations_to_file(
                args.export_file, args.export_format
            )
            
            if success:
                print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {args.export_file}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ {args.export_file}")
        
        print("\nüéâ –†–∞–±–æ—Ç–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except KeyboardInterrupt:
        logger.info("–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\n‚èπÔ∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
    finally:
        if orchestrator:
            orchestrator.close()


if __name__ == "__main__":
    main()