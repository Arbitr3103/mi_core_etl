#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –æ—Ç—á–µ—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≠—Ç–∞–ø 2).
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é importers
sys.path.append(os.path.join(os.path.dirname(__file__), 'importers'))

from ozon_importer import get_products_from_api, transform_product_data, load_products_to_db, connect_to_db

def test_2_1_api_request():
    """–¢–µ—Å—Ç 2.1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –æ—Ç—á–µ—Ç–æ–≤."""
    print("=== –¢–µ—Å—Ç 2.1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API –æ—Ç—á–µ—Ç–æ–≤ ===")
    
    try:
        products = get_products_from_api()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API: {len(products)}")
        print("–°—Ä–∞–≤–Ω–∏—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Ozon")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if products:
            print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ CSV:")
            sample_product = products[0]
            for key, value in list(sample_product.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–æ–ª–µ–π
                print(f"  {key}: {value}")
            print("  ...")
        
        return products
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API: {e}")
        return []

def test_2_2_transformation(products):
    """–¢–µ—Å—Ç 2.2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ CSV."""
    print("\n=== –¢–µ—Å—Ç 2.2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ CSV ===")
    
    if not products:
        print("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return []
    
    try:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sample_product = products[0]
        print("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ (–∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è):")
        key_fields = ['–ê—Ä—Ç–∏–∫—É–ª', 'Barcode', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'Ozon Product ID', 'SKU']
        for field in key_fields:
            print(f"  {field}: {sample_product.get(field, '–ù–ï–¢')}")
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º
        transformed = transform_product_data(sample_product)
        print(f"\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {transformed}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['sku_ozon', 'barcode', 'product_name', 'cost_price']
        missing_fields = [field for field in required_fields if field not in transformed]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            return []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ (–∫—Ä–æ–º–µ cost_price)
        empty_fields = []
        for field in ['sku_ozon', 'barcode', 'product_name']:
            if not transformed[field]:
                empty_fields.append(field)
        
        if empty_fields:
            print(f"‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ –ø–æ–ª—è: {empty_fields}")
        
        print("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        transformed_products = [transform_product_data(product) for product in products]
        return transformed_products
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def test_2_3_database_load(transformed_products):
    """–¢–µ—Å—Ç 2.3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    print("\n=== –¢–µ—Å—Ç 2.3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ===")
    
    if not transformed_products:
        print("‚ùå –ù–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É
        load_products_to_db(transformed_products)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = connect_to_db()
        cursor = connection.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM dim_products")
        result = cursor.fetchone()
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {result[0]}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        cursor.execute("SELECT id, sku_ozon, product_name FROM dim_products LIMIT 10")
        samples = cursor.fetchall()
        print("\n–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for sample in samples:
            product_name = sample[2][:50] + "..." if len(sample[2]) > 50 else sample[2]
            print(f"ID: {sample[0]}, SKU: {sample[1]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}")
        
        cursor.close()
        connection.close()
        print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def run_all_product_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤."""
    print("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –æ—Ç—á–µ—Ç–æ–≤\n")
    
    # –¢–µ—Å—Ç 2.1: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –æ—Ç—á–µ—Ç–æ–≤
    products = test_2_1_api_request()
    
    # –¢–µ—Å—Ç 2.2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ CSV
    transformed_products = test_2_2_transformation(products)
    
    # –¢–µ—Å—Ç 2.3: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ë–î
    success = test_2_3_database_load(transformed_products)
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ù–æ–≤—ã–π API –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    run_all_product_tests()
