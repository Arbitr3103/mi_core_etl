<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ozon v4 API - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f7fa;
            color: #2d3748;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border: 1px solid #e2e8f0;
        }
        
        .card h3 {
            color: #2d3748;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }
        
        .btn {
            background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(66, 153, 225, 0.4);
        }
        
        .btn:disabled {
            background: #a0aec0;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-success {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
        }
        
        .btn-warning {
            background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
        }
        
        .status {
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            display: inline-block;
        }
        
        .status-success {
            background: #c6f6d5;
            color: #22543d;
        }
        
        .status-warning {
            background: #feebc8;
            color: #744210;
        }
        
        .status-error {
            background: #fed7d7;
            color: #742a2a;
        }
        
        .status-info {
            background: #bee3f8;
            color: #2a4365;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }
        
        .stat-item {
            text-align: center;
            padding: 15px;
            background: #f7fafc;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #718096;
        }
        
        .log {
            background: #1a202c;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9rem;
            max-height: 400px;
            overflow-y: auto;
            margin-top: 20px;
        }
        
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background: #c6f6d5;
            color: #22543d;
            border: 1px solid #9ae6b4;
        }
        
        .alert-error {
            background: #fed7d7;
            color: #742a2a;
            border: 1px solid #feb2b2;
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4299e1, #3182ce);
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Ozon v4 API</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π v4 API</p>
        </div>
        
        <div id="alerts"></div>
        
        <div class="cards">
            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π -->
            <div class="card">
                <h3>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</h3>
                <p>–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ v4 API</p>
                <div style="margin-top: 20px;">
                    <button id="syncBtn" class="btn" onclick="runSync()">
                        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                    </button>
                    <button id="testBtn" class="btn btn-warning" onclick="testAPI()">
                        –¢–µ—Å—Ç API
                    </button>
                </div>
                <div id="syncStatus" style="margin-top: 15px;"></div>
                <div id="syncProgress" style="display: none;">
                    <div class="progress-bar">
                        <div id="progressFill" class="progress-fill" style="width: 0%"></div>
                    </div>
                    <p id="progressText">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</p>
                </div>
            </div>
            
            <!-- –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã -->
            <div class="card">
                <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                <div id="systemStatus">
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</p>
                </div>
                <button class="btn btn-success" onclick="loadStatus()" style="margin-top: 15px;">
                    –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                </button>
            </div>
            
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
            <div class="card">
                <h3>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤</h3>
                <div id="statsContainer">
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
                </div>
                <button class="btn btn-success" onclick="loadStats()" style="margin-top: 15px;">
                    –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                </button>
            </div>
        </div>
        
        <!-- –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π -->
        <div class="card">
            <h3>üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
            <div id="operationLog" class="log">
                –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...
            </div>
            <button class="btn" onclick="clearLog()" style="margin-top: 10px;">
                –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥
            </button>
        </div>
    </div>

    <script>
        let logContainer = document.getElementById('operationLog');
        
        function log(message, type = 'info') {
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = `[${timestamp}] ${message}\n`;
            logContainer.textContent += logEntry;
            logContainer.scrollTop = logContainer.scrollHeight;
        }
        
        function clearLog() {
            logContainer.textContent = '–õ–æ–≥ –æ—á–∏—â–µ–Ω...\n';
        }
        
        function showAlert(message, type = 'success') {
            const alertsContainer = document.getElementById('alerts');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            alertsContainer.appendChild(alert);
            
            setTimeout(() => {
                alert.remove();
            }, 5000);
        }
        
        function setButtonLoading(buttonId, loading) {
            const btn = document.getElementById(buttonId);
            if (loading) {
                btn.disabled = true;
                btn.innerHTML = '<span class="loading"></span>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
            } else {
                btn.disabled = false;
                btn.innerHTML = btn.id === 'syncBtn' ? '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é' : '–¢–µ—Å—Ç API';
            }
        }
        
        function showProgress(show, text = '') {
            const progressDiv = document.getElementById('syncProgress');
            const progressText = document.getElementById('progressText');
            
            if (show) {
                progressDiv.style.display = 'block';
                progressText.textContent = text;
            } else {
                progressDiv.style.display = 'none';
            }
        }
        
        function updateProgress(percent, text) {
            document.getElementById('progressFill').style.width = percent + '%';
            document.getElementById('progressText').textContent = text;
        }
        
        async function testAPI() {
            log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ v4 API...');
            setButtonLoading('testBtn', true);
            
            try {
                const response = await fetch('/api/inventory-v4.php?action=test');
                const result = await response.json();
                
                if (result.success && result.data.api_working) {
                    log(`‚úÖ API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω: –ø–æ–ª—É—á–µ–Ω–æ ${result.data.items_received} —Ç–æ–≤–∞—Ä–æ–≤`);
                    showAlert('v4 API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', 'success');
                    
                    document.getElementById('syncStatus').innerHTML = `
                        <span class="status status-success">API –¥–æ—Å—Ç—É–ø–µ–Ω</span>
                        <p style="margin-top: 10px; font-size: 0.9rem;">
                            –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.data.items_received}<br>
                            –ï—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ: ${result.data.has_next ? '–î–∞' : '–ù–µ—Ç'}<br>
                            –ü–∞–≥–∏–Ω–∞—Ü–∏—è: ${result.data.cursor_present ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
                        </p>
                    `;
                } else {
                    log(`‚ùå API —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: ${result.data?.error || result.error}`);
                    showAlert('v4 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
                    
                    document.getElementById('syncStatus').innerHTML = `
                        <span class="status status-error">API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</span>
                    `;
                }
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ API: ${error.message}`);
                showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API', 'error');
            } finally {
                setButtonLoading('testBtn', false);
            }
        }
        
        async function runSync() {
            log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ v4 API...');
            setButtonLoading('syncBtn', true);
            showProgress(true, '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
            
            try {
                updateProgress(10, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...');
                
                const response = await fetch('/api/inventory-v4.php?action=sync');
                const result = await response.json();
                
                updateProgress(50, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
                
                if (result.success) {
                    const data = result.data;
                    updateProgress(100, '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                    
                    log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`);
                    log(`   –°—Ç–∞—Ç—É—Å: ${data.status}`);
                    log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${data.records_processed} –∑–∞–ø–∏—Å–µ–π`);
                    log(`   –í—Å—Ç–∞–≤–ª–µ–Ω–æ: ${data.records_inserted} –∑–∞–ø–∏—Å–µ–π`);
                    log(`   –û—à–∏–±–æ–∫: ${data.records_failed}`);
                    log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${data.duration_seconds} —Å–µ–∫`);
                    log(`   API –∑–∞–ø—Ä–æ—Å–æ–≤: ${data.api_requests_count}`);
                    
                    showAlert(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${data.records_processed} –∑–∞–ø–∏—Å–µ–π`, 'success');
                    
                    document.getElementById('syncStatus').innerHTML = `
                        <span class="status status-success">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                        <div class="stats-grid" style="margin-top: 15px;">
                            <div class="stat-item">
                                <div class="stat-value">${data.records_processed}</div>
                                <div class="stat-label">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">${data.records_inserted}</div>
                                <div class="stat-label">–í—Å—Ç–∞–≤–ª–µ–Ω–æ</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">${data.duration_seconds}—Å</div>
                                <div class="stat-label">–í—Ä–µ–º—è</div>
                            </div>
                        </div>
                    `;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    setTimeout(loadStats, 1000);
                    
                } else {
                    updateProgress(0, '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                    log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${result.error}`);
                    showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error');
                    
                    document.getElementById('syncStatus').innerHTML = `
                        <span class="status status-error">–û—à–∏–±–∫–∞</span>
                        <p style="margin-top: 10px; font-size: 0.9rem; color: #e53e3e;">
                            ${result.error}
                        </p>
                    `;
                }
            } catch (error) {
                updateProgress(0, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
                log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
                showAlert('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error');
            } finally {
                setButtonLoading('syncBtn', false);
                setTimeout(() => showProgress(false), 2000);
            }
        }
        
        async function loadStatus() {
            try {
                const response = await fetch('/api/inventory-v4.php?action=status');
                const result = await response.json();
                
                if (result.success) {
                    const data = result.data;
                    const statusContainer = document.getElementById('systemStatus');
                    
                    if (data.last_sync) {
                        const lastSync = data.last_sync;
                        const syncDate = new Date(lastSync.created_at).toLocaleString();
                        
                        statusContainer.innerHTML = `
                            <div style="margin-bottom: 15px;">
                                <span class="status status-${lastSync.status === 'success' ? 'success' : 'warning'}">
                                    ${lastSync.status}
                                </span>
                            </div>
                            <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> ${syncDate}</p>
                            <p><strong>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π:</strong> ${lastSync.records_processed}</p>
                            <p><strong>–í—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</strong> ${lastSync.records_inserted}</p>
                            <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${lastSync.duration_seconds} —Å–µ–∫</p>
                        `;
                    } else {
                        statusContainer.innerHTML = `
                            <span class="status status-info">–ù–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å</span>
                            <p style="margin-top: 10px;">v4 API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å</p>
                        `;
                    }
                }
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
            }
        }
        
        async function loadStats() {
            try {
                const response = await fetch('/api/inventory-v4.php?action=stats');
                const result = await response.json();
                
                if (result.success) {
                    const data = result.data;
                    const statsContainer = document.getElementById('statsContainer');
                    
                    const overview = data.overview;
                    const stockTypes = data.stock_types;
                    
                    let stockTypesHtml = '';
                    if (stockTypes && stockTypes.length > 0) {
                        stockTypesHtml = stockTypes.map(type => `
                            <div class="stat-item">
                                <div class="stat-value">${type.total_stock || 0}</div>
                                <div class="stat-label">${type.stock_type}</div>
                            </div>
                        `).join('');
                    }
                    
                    statsContainer.innerHTML = `
                        <div class="stats-grid">
                            <div class="stat-item">
                                <div class="stat-value">${overview.total_products || 0}</div>
                                <div class="stat-label">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">${overview.products_in_stock || 0}</div>
                                <div class="stat-label">–í –Ω–∞–ª–∏—á–∏–∏</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">${overview.total_stock || 0}</div>
                                <div class="stat-label">–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">${overview.total_reserved || 0}</div>
                                <div class="stat-label">–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ</div>
                            </div>
                        </div>
                        ${stockTypesHtml ? `
                            <h4 style="margin: 20px 0 10px 0;">–ü–æ —Ç–∏–ø–∞–º —Å–∫–ª–∞–¥–æ–≤:</h4>
                            <div class="stats-grid">${stockTypesHtml}</div>
                        ` : ''}
                        <p style="margin-top: 15px; font-size: 0.9rem; color: #718096;">
                            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${overview.last_update ? new Date(overview.last_update).toLocaleString() : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                        </p>
                    `;
                }
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
            }
        }
        
        // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            log('üéØ –î–∞—à–±–æ—Ä–¥ v4 API –∑–∞–≥—Ä—É–∂–µ–Ω');
            loadStatus();
            loadStats();
        });
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            loadStatus();
            loadStats();
        }, 30000);
    </script>
</body>
</html>