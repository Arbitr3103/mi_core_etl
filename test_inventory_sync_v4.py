#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Ozon v4 API.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 07 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from inventory_sync_service_v4 import InventorySyncServiceV4
    import config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_v4_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ v4 API."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon v4 API...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        result = service.get_ozon_stocks_v4(limit=10)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {result['total_items']} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"   Has next: {result['has_next']}")
        print(f"   Last ID: {result['last_id']}")
        
        if result['items']:
            first_item = result['items'][0]
            print(f"   –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_item.get('offer_id', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ v4 API: {e}")
        return False
    finally:
        service.close_database_connection()


def test_warehouse_api():
    """–¢–µ—Å—Ç API —Å–∫–ª–∞–¥–æ–≤."""
    print("üè™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–∫–ª–∞–¥–æ–≤ Ozon...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        warehouses = service.get_ozon_warehouses()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤")
        
        for warehouse in warehouses[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {warehouse.warehouse_name} (ID: {warehouse.warehouse_id}, Type: {warehouse.warehouse_type})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}")
        return False
    finally:
        service.close_database_connection()


def test_analytics_api():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API."""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Analytics API Ozon...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        service.update_warehouse_cache()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        analytics_stocks = service.get_ozon_analytics_stocks()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(analytics_stocks)} –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        for stock in analytics_stocks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {stock.offer_id}: free_to_sell={stock.free_to_sell_amount}, reserved={stock.reserved_amount}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return False
    finally:
        service.close_database_connection()


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            result = service.get_ozon_stocks_v4(limit=10000)  # –ü—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
            print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return False
        except Exception as e:
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º retry –ª–æ–≥–∏–∫—É
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º retry –ª–æ–≥–∏–∫—É...")
        service.max_retries = 2  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False
    finally:
        service.close_database_connection()


def test_full_sync():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        result = service.sync_ozon_inventory_v4(visibility="VISIBLE")
        
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.records_processed}")
        print(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
        print(f"   –û—à–∏–±–æ–∫: {result.records_failed}")
        print(f"   API –∑–∞–ø—Ä–æ—Å–æ–≤: {result.api_requests_count}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds} —Å–µ–∫")
        
        if result.error_message:
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.error_message}")
        
        return result.status.value != "failed"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    finally:
        service.close_database_connection()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Ozon v4 API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.OZON_CLIENT_ID or not config.OZON_API_KEY:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏ Ozon")
        return
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ v4 API", test_v4_api_connection),
        ("API —Å–∫–ª–∞–¥–æ–≤", test_warehouse_api),
        ("Analytics API", test_analytics_api),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", test_full_sync),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{test_name}:")
        print("-" * 30)
        
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"   {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


if __name__ == "__main__":
    main()