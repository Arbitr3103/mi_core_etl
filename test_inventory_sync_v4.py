#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Ozon v4 API.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 07 —è–Ω–≤–∞—Ä—è 2025
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

try:
    from inventory_sync_service_v4 import InventorySyncServiceV4
    import config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_v4_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É v4 API."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É Ozon v4 API...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ v4 API
        result = service.get_ozon_stocks_v4(limit=10)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {result['total_items']} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"   Has next: {result['has_next']}")
        print(f"   Cursor: {result.get('cursor', 'N/A')}")
        
        if result['items']:
            first_item = result['items'][0]
            print(f"   –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {first_item.get('offer_id', 'N/A')}")
            print(f"   Product ID: {first_item.get('product_id', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É stocks[]
            stocks = first_item.get('stocks', [])
            if stocks:
                first_stock = stocks[0]
                print(f"   SKU –∏–∑ stocks[]: {first_stock.get('sku', 'N/A')}")
                print(f"   Warehouse ID: {first_stock.get('warehouse_id', 'N/A')}")
                print(f"   Stock type: {first_stock.get('type', 'N/A')}")
                print(f"   Present: {first_stock.get('present', 0)}")
                print(f"   Reserved: {first_stock.get('reserved', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ v4 API: {e}")
        return False
    finally:
        service.close_database_connection()


def test_warehouse_api():
    """–¢–µ—Å—Ç API —Å–∫–ª–∞–¥–æ–≤."""
    print("üè™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–∫–ª–∞–¥–æ–≤ Ozon...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        warehouses = service.get_ozon_warehouses()
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤")
        
        for warehouse in warehouses[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {warehouse.warehouse_name} (ID: {warehouse.warehouse_id}, Type: {warehouse.warehouse_type})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}")
        return False
    finally:
        service.close_database_connection()


def test_analytics_api():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API."""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Analytics API Ozon...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        service.update_warehouse_cache()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        result = service.get_ozon_analytics_stocks(limit=10)
        analytics_stocks = result["analytics_stocks"]
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(analytics_stocks)} –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        print(f"   Total count: {result['total_count']}")
        print(f"   Has next: {result['has_next']}")
        
        for stock in analytics_stocks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {stock.offer_id} (WH: {stock.warehouse_name})")
            print(f"     free_to_sell={stock.free_to_sell_amount}, promised={stock.promised_amount}, reserved={stock.reserved_amount}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        all_analytics = service.get_all_ozon_analytics_stocks()
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(all_analytics)} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return False
    finally:
        service.close_database_connection()


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            result = service.get_ozon_stocks_v3(limit=10000)  # –ü—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç
            print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return False
        except Exception as e:
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º retry –ª–æ–≥–∏–∫—É
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º retry –ª–æ–≥–∏–∫—É...")
        service.max_retries = 2  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False
    finally:
        service.close_database_connection()


def test_data_validation():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ SKU –æ—Ç Ozon
        test_records = [
            {
                'product_id': 123456789,
                'sku': '987654321',  # –ß–∏—Å–ª–æ–≤–æ–π SKU –æ—Ç Ozon v4 API
                'source': 'Ozon',
                'warehouse_name': 'Ozon FBO Moscow',
                'stock_type': 'FBO',
                'current_stock': 15,
                'reserved_stock': 3,
                'available_stock': 12,
                'quantity_present': 15,
                'quantity_reserved': 3,
                'snapshot_date': datetime.now().date(),
                # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API
                'analytics_free_to_sell': 12,
                'analytics_promised': 15,
                'analytics_reserved': 3
            },
            {
                'product_id': 111222333,
                'sku': 'ABC-123_DEF',  # –ë—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–æ–π SKU
                'source': 'Ozon',
                'warehouse_name': 'Ozon FBS Warehouse',
                'stock_type': 'FBS',
                'current_stock': 8,
                'reserved_stock': 1,
                'available_stock': 7,
                'quantity_present': 8,
                'quantity_reserved': 1,
                'snapshot_date': datetime.now().date()
            }
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        validation_result = service.validator.validate_inventory_records(test_records, 'Ozon')
        
        print(f"   –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: {validation_result.valid_records}/{validation_result.total_records} –∑–∞–ø–∏—Å–µ–π –≤–∞–ª–∏–¥–Ω—ã")
        print(f"   –û—à–∏–±–æ–∫: {validation_result.error_count}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {validation_result.warning_count}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        combined_validation = service.validator.validate_combined_stock_data(test_records, 'Ozon')
        
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {combined_validation.valid_records}/{combined_validation.total_records} –∑–∞–ø–∏—Å–µ–π –≤–∞–ª–∏–¥–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        for issue in validation_result.issues[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
            print(f"   - {issue.severity.value}: {issue.field} - {issue.message}")
        
        return validation_result.error_count == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False
    finally:
        service.close_database_connection()


def test_combined_api_sync():
    """–¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–æ–∏–º–∏ API."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        result = service.sync_ozon_inventory_combined(
            visibility="VISIBLE",
            include_analytics=True,
            fallback_on_error=True
        )
        
        print(f"‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.records_processed}")
        print(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
        print(f"   –û—à–∏–±–æ–∫: {result.records_failed}")
        print(f"   API –∑–∞–ø—Ä–æ—Å–æ–≤: {result.api_requests_count}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds} —Å–µ–∫")
        
        if result.error_message:
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.error_message}")
        
        return result.status.value != "failed"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    finally:
        service.close_database_connection()


def test_stock_mapping():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        main_result = service.get_ozon_stocks_v4(limit=5)
        main_stocks = service.process_ozon_v4_stocks(main_result['items'])
        
        analytics_result = service.get_ozon_analytics_stocks(limit=5)
        analytics_stocks = analytics_result["analytics_stocks"]
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
        stock_mapping = service.create_stock_mapping(main_stocks, analytics_stocks)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(stock_mapping)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥
        main_only = sum(1 for v in stock_mapping.values() if not v["has_analytics_data"])
        analytics_only = sum(1 for v in stock_mapping.values() if v["main_present"] == 0 and v["has_analytics_data"])
        both_sources = sum(1 for v in stock_mapping.values() if v["main_present"] > 0 and v["has_analytics_data"])
        
        print(f"   –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π API: {main_only}")
        print(f"   –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API: {analytics_only}")
        print(f"   –û–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {both_sources}")
        
        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        unified_structure = service.create_unified_data_structure(main_stocks, analytics_stocks)
        
        print(f"   –ï–¥–∏–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(unified_structure['stock_data'])} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –°–∫–ª–∞–¥–æ–≤: {len(unified_structure['warehouse_summary'])}")
        print(f"   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: {len(unified_structure['discrepancies'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
        return False
    finally:
        service.close_database_connection()


def test_fallback_mechanisms():
    """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º—ã fallback...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cached_stocks = service.get_cached_stock_data(max_age_hours=24)
        print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(cached_stocks)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é v3 –≤ v4 —Ñ–æ—Ä–º–∞—Ç
        v3_test_data = [
            {
                "offer_id": "TEST-123",
                "product_id": 123456,
                "present": 10,
                "reserved": 2,
                "stocks": [
                    {
                        "warehouse_id": 1,
                        "type": "fbo",
                        "present": 10,
                        "reserved": 2
                    }
                ]
            }
        ]
        
        v4_converted = service._convert_v3_to_v4_format(v3_test_data)
        print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ v3->v4: {len(v4_converted)} –∑–∞–ø–∏—Å–µ–π")
        
        if v4_converted:
            first_converted = v4_converted[0]
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ v4: offer_id={first_converted.get('offer_id')}, stocks={len(first_converted.get('stocks', []))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback: {e}")
        return False
    finally:
        service.close_database_connection()


def test_full_sync():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    
    service = InventorySyncServiceV4()
    
    try:
        service.connect_to_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        result = service.sync_ozon_inventory_v4(visibility="VISIBLE")
        
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.records_processed}")
        print(f"   –í—Å—Ç–∞–≤–ª–µ–Ω–æ: {result.records_inserted}")
        print(f"   –û—à–∏–±–æ–∫: {result.records_failed}")
        print(f"   API –∑–∞–ø—Ä–æ—Å–æ–≤: {result.api_requests_count}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds} —Å–µ–∫")
        
        if result.error_message:
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.error_message}")
        
        return result.status.value != "failed"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    finally:
        service.close_database_connection()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Ozon v4 API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.OZON_CLIENT_ID or not config.OZON_API_KEY:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏ Ozon")
        return
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É v4 API", test_v4_api_connection),
        ("API —Å–∫–ª–∞–¥–æ–≤", test_warehouse_api),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Analytics API", test_analytics_api),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", test_data_validation),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö", test_stock_mapping),
        ("–ú–µ—Ö–∞–Ω–∏–∑–º—ã fallback", test_fallback_mechanisms),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", test_combined_api_sync),
        ("–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", test_full_sync),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{test_name}:")
        print("-" * 30)
        
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"   {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


if __name__ == "__main__":
    main()