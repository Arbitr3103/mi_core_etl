#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä PHP –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ PHP –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã Region –∏ CarFilter –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
"""

import os
import re
from pathlib import Path

class PHPClassValidator:
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.passed_checks = []
        
    def validate_all_classes(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö PHP –∫–ª–∞—Å—Å–æ–≤"""
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø PHP –ö–õ–ê–°–°–û–í")
        print("=" * 60)
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å Region
        self.validate_region_class()
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å CarFilter
        self.validate_car_filter_class()
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã
        self.validate_test_files()
        print()
        
        self.print_summary()
        
    def validate_region_class(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Region"""
        print("üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Region")
        print("-" * 40)
        
        file_path = "classes/Region.php"
        if not os.path.exists(file_path):
            self.errors.append(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞—Å—Å–∞
        if 'class Region' in content:
            self.passed_checks.append("‚úÖ –ö–ª–∞—Å—Å Region –æ–±—ä—è–≤–ª–µ–Ω")
        else:
            self.errors.append("‚ùå –ö–ª–∞—Å—Å Region –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = [
            'getAll', 'getByBrand', 'getByModel', 'exists', 
            'getById', 'getBrandCount', 'getStatistics'
        ]
        
        for method in required_methods:
            if f'function {method}(' in content:
                self.passed_checks.append(f"‚úÖ –ú–µ—Ç–æ–¥ {method}() —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            else:
                self.errors.append(f"‚ùå –ú–µ—Ç–æ–¥ {method}() –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        if 'function __construct(PDO $pdo)' in content:
            self.passed_checks.append("‚úÖ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å PDO –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º")
        else:
            self.errors.append("‚ùå –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        if 'throw new Exception' in content:
            self.passed_checks.append("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        else:
            self.warnings.append("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã
        sql_patterns = [
            'SELECT DISTINCT r.id, r.name FROM regions',
            'INNER JOIN brands',
            'ORDER BY r.name ASC'
        ]
        
        for pattern in sql_patterns:
            if pattern in content:
                self.passed_checks.append(f"‚úÖ SQL –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–π–¥–µ–Ω: {pattern[:30]}...")
            else:
                self.warnings.append(f"‚ö†Ô∏è SQL –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {pattern[:30]}...")
                
    def validate_car_filter_class(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ CarFilter"""
        print("üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ CarFilter")
        print("-" * 40)
        
        file_path = "classes/CarFilter.php"
        if not os.path.exists(file_path):
            self.errors.append(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞—Å—Å–∞
        if 'class CarFilter' in content:
            self.passed_checks.append("‚úÖ –ö–ª–∞—Å—Å CarFilter –æ–±—ä—è–≤–ª–µ–Ω")
        else:
            self.errors.append("‚ùå –ö–ª–∞—Å—Å CarFilter –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        required_methods = [
            'setBrand', 'setModel', 'setYear', 'setCountry', 'setLimit', 'setOffset',
            'setFilters', 'validate', 'buildQuery', 'buildCountQuery', 'execute',
            'getFilters', 'hasFilters', 'getFilterCount', 'reset'
        ]
        
        for method in required_methods:
            if f'function {method}(' in content:
                self.passed_checks.append(f"‚úÖ –ú–µ—Ç–æ–¥ {method}() —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            else:
                self.errors.append(f"‚ùå –ú–µ—Ç–æ–¥ {method}() –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ø–æ—á–∫—É –≤—ã–∑–æ–≤–æ–≤ (fluent interface)
        if 'return $this;' in content:
            self.passed_checks.append("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤ (fluent interface)")
        else:
            self.warnings.append("‚ö†Ô∏è –¶–µ–ø–æ—á–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        validation_patterns = [
            'is_numeric',
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID',
            'errors\[\]',
            'valid.*=>.*empty.*errors'
        ]
        
        validation_found = 0
        for pattern in validation_patterns:
            if re.search(pattern, content):
                validation_found += 1
                
        if validation_found >= 3:
            self.passed_checks.append("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        else:
            self.errors.append("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ
        if 'SELECT' in content and 'FROM dim_products' in content:
            self.passed_checks.append("‚úÖ SQL –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        else:
            self.errors.append("‚ùå SQL –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    def validate_test_files(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üìç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print("-" * 40)
        
        test_files = [
            ("tests/RegionTest.php", "RegionTest"),
            ("tests/CarFilterTest.php", "CarFilterTest"),
            ("tests/run_all_tests.php", "TestRunner")
        ]
        
        for file_path, class_name in test_files:
            if os.path.exists(file_path):
                self.passed_checks.append(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {file_path} —Å–æ–∑–¥–∞–Ω")
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                if f'class {class_name}' in content:
                    self.passed_checks.append(f"‚úÖ –ö–ª–∞—Å—Å {class_name} –æ–±—ä—è–≤–ª–µ–Ω")
                else:
                    self.errors.append(f"‚ùå –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {file_path}")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
                if 'function test' in content or 'runAllTests' in content:
                    self.passed_checks.append(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞–π–¥–µ–Ω—ã –≤ {class_name}")
                else:
                    self.warnings.append(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {class_name}")
                    
            else:
                self.errors.append(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    def check_requirements_compliance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        print("üìç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        print("-" * 40)
        
        # Requirement 2.1: –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å Region —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        region_methods = ['getAll', 'getByBrand', 'getByModel']
        region_file_exists = os.path.exists("classes/Region.php")
        
        if region_file_exists:
            with open("classes/Region.php", 'r') as f:
                region_content = f.read()
                region_methods_found = all(f'function {method}(' in region_content for method in region_methods)
                
            if region_methods_found:
                self.passed_checks.append("‚úÖ Requirement 2.1: –ö–ª–∞—Å—Å Region —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω")
            else:
                self.errors.append("‚ùå Requirement 2.1: –ù–µ –≤—Å–µ –º–µ—Ç–æ–¥—ã Region —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        else:
            self.errors.append("‚ùå Requirement 2.1: –ö–ª–∞—Å—Å Region –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
        # Requirement 4.2: –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å CarFilter –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filter_methods = ['validate', 'buildQuery']
        filter_file_exists = os.path.exists("classes/CarFilter.php")
        
        if filter_file_exists:
            with open("classes/CarFilter.php", 'r') as f:
                filter_content = f.read()
                filter_methods_found = all(f'function {method}(' in filter_content for method in filter_methods)
                
            if filter_methods_found:
                self.passed_checks.append("‚úÖ Requirement 4.2: –ö–ª–∞—Å—Å CarFilter —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤")
            else:
                self.errors.append("‚ùå Requirement 4.2: –ù–µ –≤—Å–µ –º–µ—Ç–æ–¥—ã CarFilter —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        else:
            self.errors.append("‚ùå Requirement 4.2: –ö–ª–∞—Å—Å CarFilter –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
        # Unit —Ç–µ—Å—Ç—ã
        test_files_exist = all(os.path.exists(f) for f in [
            "tests/RegionTest.php", 
            "tests/CarFilterTest.php", 
            "tests/run_all_tests.php"
        ])
        
        if test_files_exist:
            self.passed_checks.append("‚úÖ Unit —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö PHP –∫–ª–∞—Å—Å–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")
        else:
            self.errors.append("‚ùå –ù–µ –≤—Å–µ unit —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        self.check_requirements_compliance()
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(self.passed_checks)}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(self.errors)}")
        
        total_checks = len(self.passed_checks) + len(self.warnings) + len(self.errors)
        if total_checks > 0:
            success_rate = (len(self.passed_checks) / total_checks) * 100
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
        if self.passed_checks:
            print(f"\n‚úÖ –£–°–ü–ï–®–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
            for check in self.passed_checks:
                print(f"  {check}")
                
        if self.warnings:
            print(f"\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"  {warning}")
                
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"  {error}")
                
        print(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        if len(self.errors) == 0:
            print("‚úÖ –í—Å–µ PHP –∫–ª–∞—Å—Å—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("‚úÖ –ó–∞–¥–∞—á–∞ 2 '–°–æ–∑–¥–∞–Ω–∏–µ PHP –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            
        print("\nüìã –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        files_to_check = [
            "classes/Region.php",
            "classes/CarFilter.php", 
            "tests/RegionTest.php",
            "tests/CarFilterTest.php",
            "tests/run_all_tests.php"
        ]
        
        for file_path in files_to_check:
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"  ‚úÖ {file_path} ({size} bytes)")
            else:
                print(f"  ‚ùå {file_path} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")

if __name__ == "__main__":
    validator = PHPClassValidator()
    validator.validate_all_classes()