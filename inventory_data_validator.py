#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö,
–ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î.

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 06 —è–Ω–≤–∞—Ä—è 2025
"""

import logging
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum
from datetime import datetime, date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class ValidationSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    ERROR = "error"
    WARNING = "warning"
    INFO = "info"


@dataclass
class ValidationIssue:
    """–ü—Ä–æ–±–ª–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    severity: ValidationSeverity
    field: str
    message: str
    value: Any = None
    record_id: Optional[str] = None
    
    def __str__(self) -> str:
        return f"[{self.severity.value.upper()}] {self.field}: {self.message}"


@dataclass
class ValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    is_valid: bool
    total_records: int
    valid_records: int
    issues: List[ValidationIssue]
    
    @property
    def error_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫."""
        return len([issue for issue in self.issues if issue.severity == ValidationSeverity.ERROR])
    
    @property
    def warning_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."""
        return len([issue for issue in self.issues if issue.severity == ValidationSeverity.WARNING])
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
        if self.total_records == 0:
            return 100.0
        return (self.valid_records / self.total_records) * 100.0


class InventoryDataValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞."""
        self.issues = []
        
    def validate_inventory_records(self, records: List[Dict[str, Any]], source: str) -> ValidationResult:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.
        
        Args:
            records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('Ozon' –∏–ª–∏ 'Wildberries')
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é {len(records)} –∑–∞–ø–∏—Å–µ–π –æ—Ç {source}")
        
        self.issues = []
        valid_records = 0
        
        for i, record in enumerate(records):
            record_id = f"{source}_{i}"
            
            try:
                if self._validate_single_record(record, source, record_id):
                    valid_records += 1
            except Exception as e:
                self._add_issue(
                    ValidationSeverity.ERROR,
                    "validation_error",
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}",
                    record_id=record_id
                )
        
        is_valid = len([issue for issue in self.issues if issue.severity == ValidationSeverity.ERROR]) == 0
        
        result = ValidationResult(
            is_valid=is_valid,
            total_records=len(records),
            valid_records=valid_records,
            issues=self.issues.copy()
        )
        
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {valid_records}/{len(records)} –∑–∞–ø–∏—Å–µ–π –≤–∞–ª–∏–¥–Ω—ã, "
                   f"–æ—à–∏–±–æ–∫: {result.error_count}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result.warning_count}")
        
        return result
    
    def _validate_single_record(self, record: Dict[str, Any], source: str, record_id: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö.
        
        Args:
            record: –ó–∞–ø–∏—Å—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            record_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        is_valid = True
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['product_id', 'sku', 'source']
        for field in required_fields:
            if not self._validate_required_field(record, field, record_id):
                is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è product_id
        if not self._validate_product_id(record.get('product_id'), record_id):
            is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è SKU
        if not self._validate_sku(record.get('sku'), source, record_id):
            is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if not self._validate_source(record.get('source'), source, record_id):
            is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        quantity_fields = ['current_stock', 'reserved_stock', 'available_stock', 
                          'quantity_present', 'quantity_reserved']
        for field in quantity_fields:
            if not self._validate_quantity(record.get(field, 0), field, record_id):
                is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
        if not self._validate_stock_logic(record, record_id):
            is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–∫–ª–∞–¥–∞
        if not self._validate_stock_type(record.get('stock_type'), source, record_id):
            is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞
        if not self._validate_warehouse_name(record.get('warehouse_name'), record_id):
            is_valid = False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å–Ω–∏–º–∫–∞
        if not self._validate_snapshot_date(record.get('snapshot_date'), record_id):
            is_valid = False
        
        return is_valid
    
    def _validate_required_field(self, record: Dict[str, Any], field: str, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è."""
        value = record.get(field)
        
        if value is None or value == '':
            self._add_issue(
                ValidationSeverity.ERROR,
                field,
                f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ",
                value,
                record_id
            )
            return False
        
        return True
    
    def _validate_product_id(self, product_id: Any, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è product_id."""
        if product_id is None:
            self._add_issue(
                ValidationSeverity.ERROR,
                "product_id",
                "Product ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None",
                product_id,
                record_id
            )
            return False
        
        try:
            product_id_int = int(product_id)
            if product_id_int <= 0:
                self._add_issue(
                    ValidationSeverity.ERROR,
                    "product_id",
                    "Product ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
                    product_id,
                    record_id
                )
                return False
        except (ValueError, TypeError):
            self._add_issue(
                ValidationSeverity.ERROR,
                "product_id",
                "Product ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º",
                product_id,
                record_id
            )
            return False
        
        return True
    
    def _validate_sku(self, sku: Any, source: str, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è SKU."""
        if not sku or not isinstance(sku, str):
            self._add_issue(
                ValidationSeverity.ERROR,
                "sku",
                "SKU –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π",
                sku,
                record_id
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã SKU
        if len(sku) > 255:
            self._add_issue(
                ValidationSeverity.ERROR,
                "sku",
                "SKU —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)",
                sku,
                record_id
            )
            return False
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if source == 'Ozon':
            # Ozon SKU –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã
            if not sku.replace('-', '').replace('_', '').isalnum():
                self._add_issue(
                    ValidationSeverity.WARNING,
                    "sku",
                    "Ozon SKU —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
                    sku,
                    record_id
                )
        elif source == 'Wildberries':
            # WB nmId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
            if not sku.isdigit():
                self._add_issue(
                    ValidationSeverity.WARNING,
                    "sku",
                    "Wildberries SKU (nmId) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º",
                    sku,
                    record_id
                )
        
        return True
    
    def _validate_source(self, source: Any, expected_source: str, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        if source != expected_source:
            self._add_issue(
                ValidationSeverity.ERROR,
                "source",
                f"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: {source} != {expected_source}",
                source,
                record_id
            )
            return False
        
        valid_sources = ['Ozon', 'Wildberries']
        if source not in valid_sources:
            self._add_issue(
                ValidationSeverity.ERROR,
                "source",
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_sources}",
                source,
                record_id
            )
            return False
        
        return True
    
    def _validate_quantity(self, quantity: Any, field: str, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è."""
        try:
            quantity_int = int(quantity or 0)
            
            if quantity_int < 0:
                self._add_issue(
                    ValidationSeverity.ERROR,
                    field,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º",
                    quantity,
                    record_id
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
            if quantity_int > 1000000:
                self._add_issue(
                    ValidationSeverity.WARNING,
                    field,
                    "–û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (>1M)",
                    quantity,
                    record_id
                )
            
        except (ValueError, TypeError):
            self._add_issue(
                ValidationSeverity.ERROR,
                field,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º",
                quantity,
                record_id
            )
            return False
        
        return True
    
    def _validate_stock_logic(self, record: Dict[str, Any], record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤."""
        is_valid = True
        
        try:
            current_stock = int(record.get('current_stock', 0))
            reserved_stock = int(record.get('reserved_stock', 0))
            available_stock = int(record.get('available_stock', 0))
            quantity_present = int(record.get('quantity_present', 0))
            quantity_reserved = int(record.get('quantity_reserved', 0))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
            if reserved_stock > current_stock:
                self._add_issue(
                    ValidationSeverity.ERROR,
                    "stock_logic",
                    f"–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({reserved_stock}) –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ ({current_stock})",
                    record_id=record_id
                )
                is_valid = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è —Ç–µ–∫—É—â–µ–º—É –º–∏–Ω—É—Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
            expected_available = max(0, current_stock - reserved_stock)
            if available_stock != expected_available:
                self._add_issue(
                    ValidationSeverity.WARNING,
                    "stock_logic",
                    f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({available_stock}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–º—É ({expected_available})",
                    record_id=record_id
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è quantity_* –ø–æ–ª–µ–π
            if quantity_present != current_stock:
                self._add_issue(
                    ValidationSeverity.WARNING,
                    "stock_logic",
                    f"quantity_present ({quantity_present}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç current_stock ({current_stock})",
                    record_id=record_id
                )
            
            if quantity_reserved != reserved_stock:
                self._add_issue(
                    ValidationSeverity.WARNING,
                    "stock_logic",
                    f"quantity_reserved ({quantity_reserved}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç reserved_stock ({reserved_stock})",
                    record_id=record_id
                )
            
        except (ValueError, TypeError) as e:
            self._add_issue(
                ValidationSeverity.ERROR,
                "stock_logic",
                f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}",
                record_id=record_id
            )
            is_valid = False
        
        return is_valid
    
    def _validate_stock_type(self, stock_type: Any, source: str, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–∫–ª–∞–¥–∞."""
        if source == 'Ozon':
            valid_types = ['FBO', 'FBS', 'realFBS']
        elif source == 'Wildberries':
            valid_types = ['FBS', 'FBO']  # WB –≤ –æ—Å–Ω–æ–≤–Ω–æ–º FBS
        else:
            valid_types = ['FBO', 'FBS', 'realFBS']
        
        if stock_type not in valid_types:
            self._add_issue(
                ValidationSeverity.WARNING,
                "stock_type",
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∫–ª–∞–¥–∞ –¥–ª—è {source}: {stock_type}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {valid_types}",
                stock_type,
                record_id
            )
            return False
        
        return True
    
    def _validate_warehouse_name(self, warehouse_name: Any, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞."""
        if not warehouse_name:
            self._add_issue(
                ValidationSeverity.WARNING,
                "warehouse_name",
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                warehouse_name,
                record_id
            )
            return False
        
        if not isinstance(warehouse_name, str):
            self._add_issue(
                ValidationSeverity.ERROR,
                "warehouse_name",
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
                warehouse_name,
                record_id
            )
            return False
        
        if len(warehouse_name) > 255:
            self._add_issue(
                ValidationSeverity.ERROR,
                "warehouse_name",
                "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)",
                warehouse_name,
                record_id
            )
            return False
        
        return True
    
    def _validate_snapshot_date(self, snapshot_date: Any, record_id: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Å–Ω–∏–º–∫–∞."""
        if snapshot_date is None:
            self._add_issue(
                ValidationSeverity.ERROR,
                "snapshot_date",
                "–î–∞—Ç–∞ —Å–Ω–∏–º–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                snapshot_date,
                record_id
            )
            return False
        
        try:
            if isinstance(snapshot_date, str):
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –¥–∞—Ç—É
                parsed_date = datetime.strptime(snapshot_date, '%Y-%m-%d').date()
            elif isinstance(snapshot_date, datetime):
                parsed_date = snapshot_date.date()
            elif isinstance(snapshot_date, date):
                parsed_date = snapshot_date
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞—Ç—ã: {type(snapshot_date)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            today = date.today()
            if parsed_date > today:
                self._add_issue(
                    ValidationSeverity.WARNING,
                    "snapshot_date",
                    f"–î–∞—Ç–∞ —Å–Ω–∏–º–∫–∞ –≤ –±—É–¥—É—â–µ–º: {parsed_date}",
                    snapshot_date,
                    record_id
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
            days_old = (today - parsed_date).days
            if days_old > 30:
                self._add_issue(
                    ValidationSeverity.WARNING,
                    "snapshot_date",
                    f"–î–∞—Ç–∞ —Å–Ω–∏–º–∫–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è: {days_old} –¥–Ω–µ–π –Ω–∞–∑–∞–¥",
                    snapshot_date,
                    record_id
                )
            
        except (ValueError, TypeError) as e:
            self._add_issue(
                ValidationSeverity.ERROR,
                "snapshot_date",
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Å–Ω–∏–º–∫–∞: {e}",
                snapshot_date,
                record_id
            )
            return False
        
        return True
    
    def _add_issue(self, severity: ValidationSeverity, field: str, message: str, 
                   value: Any = None, record_id: Optional[str] = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        issue = ValidationIssue(
            severity=severity,
            field=field,
            message=message,
            value=value,
            record_id=record_id
        )
        self.issues.append(issue)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if severity == ValidationSeverity.ERROR:
            logger.error(f"‚ùå {issue}")
        elif severity == ValidationSeverity.WARNING:
            logger.warning(f"‚ö†Ô∏è {issue}")
    
    def validate_product_existence(self, product_ids: List[int], db_cursor) -> ValidationResult:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            product_ids: –°–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            db_cursor: –ö—É—Ä—Å–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            ValidationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ {len(product_ids)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î")
        
        self.issues = []
        valid_count = 0
        
        try:
            if not product_ids:
                return ValidationResult(
                    is_valid=True,
                    total_records=0,
                    valid_records=0,
                    issues=[]
                )
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
            unique_ids = list(set(product_ids))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î
            placeholders = ','.join(['%s'] * len(unique_ids))
            query = f"SELECT id FROM dim_products WHERE id IN ({placeholders})"
            
            db_cursor.execute(query, unique_ids)
            existing_ids = {row['id'] for row in db_cursor.fetchall()}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π ID
            for product_id in unique_ids:
                if product_id in existing_ids:
                    valid_count += 1
                else:
                    self._add_issue(
                        ValidationSeverity.ERROR,
                        "product_id",
                        f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î",
                        product_id
                    )
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {valid_count}/{len(unique_ids)} –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            
            return ValidationResult(
                is_valid=len(self.issues) == 0,
                total_records=len(unique_ids),
                valid_records=valid_count,
                issues=self.issues.copy()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            self._add_issue(
                ValidationSeverity.ERROR,
                "database",
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: {e}"
            )
            
            return ValidationResult(
                is_valid=False,
                total_records=len(product_ids),
                valid_records=0,
                issues=self.issues.copy()
            )


def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞."""
    validator = InventoryDataValidator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_records = [
        {
            'product_id': 1,
            'sku': 'TEST-SKU-001',
            'source': 'Ozon',
            'warehouse_name': 'Ozon FBO',
            'stock_type': 'FBO',
            'current_stock': 10,
            'reserved_stock': 2,
            'available_stock': 8,
            'quantity_present': 10,
            'quantity_reserved': 2,
            'snapshot_date': date.today()
        },
        {
            'product_id': None,  # –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç product_id
            'sku': '',  # –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π SKU
            'source': 'Ozon',
            'current_stock': -5,  # –û—à–∏–±–∫–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'reserved_stock': 15,  # –û—à–∏–±–∫–∞: –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
            'available_stock': 5,
            'quantity_present': -5,
            'quantity_reserved': 15,
            'snapshot_date': '2025-01-06'
        }
    ]
    
    result = validator.validate_inventory_records(test_records, 'Ozon')
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {result.total_records}")
    print(f"  –í–∞–ª–∏–¥–Ω—ã—Ö: {result.valid_records}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result.success_rate:.1f}%")
    print(f"  –û—à–∏–±–æ–∫: {result.error_count}")
    print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {result.warning_count}")
    
    print("\n–ü—Ä–æ–±–ª–µ–º—ã:")
    for issue in result.issues:
        print(f"  {issue}")


if __name__ == "__main__":
    main()