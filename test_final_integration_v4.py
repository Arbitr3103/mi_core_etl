#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ v4 API —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º API.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –†–∞–±–æ—Ç—É v4 API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
2. –†–∞–±–æ—Ç—É –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ API –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º
3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ —Å–∫–ª–∞–¥–∞–º
5. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–ê–≤—Ç–æ—Ä: ETL System
–î–∞—Ç–∞: 08 –æ–∫—Ç—è–±—Ä—è 2025
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(__file__))

from inventory_sync_service_v4 import InventorySyncServiceV4

def test_v4_api_integration():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ v4 API."""
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ v4 API —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º API")
    print("=" * 60)
    
    service = InventorySyncServiceV4()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        service.connect_to_database()
        
        # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π v4 API
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π v4 API...")
        main_result = service.get_ozon_stocks_v4(limit=10)
        main_stocks = service.process_ozon_v4_stocks(main_result['items'])
        
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(main_stocks)} –∑–∞–ø–∏—Å–µ–π –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤")
        print(f"   üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ API: {main_result.get('total', 0)}")
        print(f"   üîÑ –ï—Å—Ç—å –µ—â–µ –¥–∞–Ω–Ω—ã–µ: {main_result.get('has_next', False)}")
        
        # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API...")
        today = datetime.now().strftime('%Y-%m-%d')
        analytics_result = service.get_ozon_analytics_stocks(
            date_from=today,
            date_to=today,
            limit=50,
            offset=0
        )
        analytics_stocks = analytics_result.get("analytics_stocks", [])
        
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(analytics_stocks)} –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–ª–∞–¥—ã
        warehouses = {}
        for stock in analytics_stocks:
            wh_name = stock.warehouse_name
            if wh_name not in warehouses:
                warehouses[wh_name] = 0
            warehouses[wh_name] += 1
        
        print(f"   üè≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
        top_warehouses = sorted(warehouses.items(), key=lambda x: x[1], reverse=True)[:5]
        for wh_name, count in top_warehouses:
            print(f"      - {wh_name}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        inventory_records = service.convert_to_inventory_records(main_stocks)
        analytics_inventory_records = service.convert_analytics_to_inventory_records(analytics_stocks)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        main_validation = service.validate_inventory_data(inventory_records, 'Ozon')
        print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {main_validation.valid_records}/{main_validation.total_records} –≤–∞–ª–∏–¥–Ω—ã")
        print(f"      –û—à–∏–±–æ–∫: {main_validation.error_count}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {main_validation.warning_count}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        analytics_validation = service.validate_inventory_data(analytics_inventory_records, 'Ozon_Analytics')
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {analytics_validation.valid_records}/{analytics_validation.total_records} –≤–∞–ª–∏–¥–Ω—ã")
        print(f"      –û—à–∏–±–æ–∫: {analytics_validation.error_count}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {analytics_validation.warning_count}")
        
        # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞...")
        stock_mapping = service.create_stock_mapping(main_stocks, analytics_stocks)
        
        main_only = sum(1 for v in stock_mapping.values() if not v["has_analytics_data"])
        analytics_only = sum(1 for v in stock_mapping.values() if v["main_present"] == 0 and v["has_analytics_data"])
        both_sources = sum(1 for v in stock_mapping.values() if v["main_present"] > 0 and v["has_analytics_data"])
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(stock_mapping)} –∑–∞–ø–∏—Å–µ–π")
        print(f"      üìà –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π API: {main_only}")
        print(f"      üìä –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π API: {analytics_only}")
        print(f"      üîÑ –û–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {both_sources}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        service.cursor.execute("""
            SELECT COUNT(*) as count FROM inventory_data 
            WHERE source = 'Ozon' AND DATE(last_sync_at) = CURDATE()
        """)
        main_db_count = service.cursor.fetchone()['count']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        service.cursor.execute("""
            SELECT COUNT(*) as count FROM inventory_data 
            WHERE source = 'Ozon_Analytics' AND DATE(last_sync_at) = CURDATE()
        """)
        analytics_db_count = service.cursor.fetchone()['count']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã
        service.cursor.execute("""
            SELECT COUNT(DISTINCT warehouse_name) as count FROM inventory_data 
            WHERE source = 'Ozon_Analytics'
        """)
        unique_warehouses = service.cursor.fetchone()['count']
        
        print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: {main_db_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"   ‚úÖ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: {analytics_db_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"   üè≠ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –≤ –ë–î: {unique_warehouses}")
        
        # –¢–µ—Å—Ç 6: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        sync_result = service.sync_ozon_inventory_combined()
        
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_result.status.value}")
        print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {sync_result.records_processed}")
        print(f"   ‚ûï –í—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {sync_result.records_inserted}")
        print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {sync_result.records_updated}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {sync_result.records_failed}")
        print(f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sync_result.duration_seconds} —Å–µ–∫")
        print(f"   üåê API –∑–∞–ø—Ä–æ—Å–æ–≤: {sync_result.api_requests_count}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        
        success_criteria = [
            (len(main_stocks) > 0, "–ü–æ–ª—É—á–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"),
            (len(analytics_stocks) > 0, "–ü–æ–ª—É—á–µ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"),
            (len(warehouses) > 5, "–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–ª–∞–¥–æ–≤"),
            (main_validation.error_count == 0, "–ù–µ—Ç –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"),
            (analytics_validation.error_count == 0, "–ù–µ—Ç –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"),
            (main_db_count > 0, "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î"),
            (analytics_db_count > 0, "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î"),
            (unique_warehouses > 5, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º"),
            (sync_result.status.value == "success", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        ]
        
        passed = 0
        for condition, description in success_criteria:
            status = "‚úÖ" if condition else "‚ùå"
            print(f"   {status} {description}")
            if condition:
                passed += 1
        
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{len(success_criteria)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == len(success_criteria):
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è v4 API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        service.close_database_connection()

if __name__ == "__main__":
    success = test_v4_api_integration()
    sys.exit(0 if success else 1)